#include "errcodes.h"

extern QString code2text(unsigned long code)
{
    if (code == 0) return QString::fromUtf8("Операция успешно завершена");
    if (code == 1) return QString::fromUtf8("Неверная функция");
    if (code == 2) return QString::fromUtf8("Не удается найти указанный файл");
    if (code == 3) return QString::fromUtf8("Системе не удается найти указанный путь");
    if (code == 4) return QString::fromUtf8("Системе не удается открыть файл");
    if (code == 5) return QString::fromUtf8("Отказано в доступе");
    if (code == 6) return QString::fromUtf8("Неверный дескриптор");
    if (code == 7) return QString::fromUtf8("Повреждены управляющие блоки памяти");
    if (code == 8) return QString::fromUtf8("Недостаточно памяти для обработки команды");
    if (code == 9) return QString::fromUtf8("Неверный адрес управляющего блока памяти");
    if (code == 10) return QString::fromUtf8("Ошибка в среде");
    if (code == 11) return QString::fromUtf8("Была сделана попытка загрузить программу, имеющую неверный формат");
    if (code == 12) return QString::fromUtf8("Код доступа неверен");
    if (code == 13) return QString::fromUtf8("Недопустимые данные");
    if (code == 14) return QString::fromUtf8("Недостаточно памяти для завершения операции");
    if (code == 15) return QString::fromUtf8("Системе не удается найти указанный диск");
    if (code == 16) return QString::fromUtf8("Не удается удалить папку");
    if (code == 17) return QString::fromUtf8("Системе не удается переместить файл на другой диск");
    if (code == 18) return QString::fromUtf8("Больше файлов не осталось");
    if (code == 19) return QString::fromUtf8("Носитель защищен от записи");
    if (code == 20) return QString::fromUtf8("Системе не удается найти указанное устройство");
    if (code == 21) return QString::fromUtf8("Устройство не готово");
    if (code == 22) return QString::fromUtf8("Устройство не опознает команду");
    if (code == 23) return QString::fromUtf8("Ошибка в данных (CRC)");
    if (code == 24) return QString::fromUtf8("Длина выданной программой команды слишком велика");
    if (code == 25) return QString::fromUtf8("Не удается найти заданную область или дорожку на диске");
    if (code == 26) return QString::fromUtf8("Нет доступа к диску или дискете");
    if (code == 27) return QString::fromUtf8("Не удается найти заданный сектор на диске");
    if (code == 28) return QString::fromUtf8("Нет бумаги в принтере");
    if (code == 29) return QString::fromUtf8("Системе не удается произвести запись на устройство");
    if (code == 30) return QString::fromUtf8("Системе не удается произвести чтение с устройства");
    if (code == 31) return QString::fromUtf8("Присоединенное к системе устройство не работает");
    if (code == 32) return QString::fromUtf8("Процесс не может получить доступ к файлу, так как этот файл занят другим процессом");
    if (code == 33) return QString::fromUtf8("Процесс не может получить доступ к файлу, так как часть этого файла заблокирована другим процессом");
    if (code == 36) return QString::fromUtf8("Слишком много файлов открыто для совместного доступа");
    if (code == 38) return QString::fromUtf8("Достигнут конец файла");
    if (code == 39) return QString::fromUtf8("Нет места на диске");
    if (code == 50) return QString::fromUtf8("Такой запрос не поддерживается");
    if (code == 51) return QString::fromUtf8("Невозможно найти сетевой путь. Убедитесь, что сетевой путь указан верно, а конечный компьютер включен и не занят. Если система вновь не сможет найти путь, обратитесь к сетевому администратору");
    if (code == 52) return QString::fromUtf8("Вы не подключены, поскольку такое же имя уже существует в этой сети. Для присоединения к домену откройте компонент панели управления \"Система\", измените имя компьютера и повторите попытку. Для присоединения к рабочей группе выберите другое имя рабочей группы");
    if (code == 53) return QString::fromUtf8("Не найден сетевой путь");
    if (code == 54) return QString::fromUtf8("Сеть занята");
    if (code == 55) return QString::fromUtf8("Сетевой ресурс или устройство более недоступно");
    if (code == 56) return QString::fromUtf8("Достигнут предел числа команд NetBIOS");
    if (code == 57) return QString::fromUtf8("Аппаратная ошибка сетевой платы");
    if (code == 58) return QString::fromUtf8("Указанный сервер не может выполнить требуемую операцию");
    if (code == 59) return QString::fromUtf8("Непредвиденная сетевая ошибка");
    if (code == 60) return QString::fromUtf8("Несовместимый удаленный контроллер");
    if (code == 61) return QString::fromUtf8("Очередь печати переполнена");
    if (code == 62) return QString::fromUtf8("На сервере нет места для хранения ожидающего печати файла");
    if (code == 63) return QString::fromUtf8("Ваш файл, находившийся в очереди вывода на печать, был удален");
    if (code == 64) return QString::fromUtf8("Указанное сетевое имя более недоступно");
    if (code == 65) return QString::fromUtf8("Нет доступа к сети");
    if (code == 66) return QString::fromUtf8("Неверно указан тип сетевого ресурса");
    if (code == 67) return QString::fromUtf8("Не найдено сетевое имя");
    if (code == 68) return QString::fromUtf8("Превышен предел числа имен для сетевого адаптера локального компьютера");
    if (code == 69) return QString::fromUtf8("Превышен предел по числу сеансов NetBIOS");
    if (code == 70) return QString::fromUtf8("Сервер сети был остановлен или находится в процессе запуска");
    if (code == 71) return QString::fromUtf8("Дополнительные подключения к этому удаленному компьютеру в настоящее время невозможны, поскольку число подключений к компьютеру достигло предела");
    if (code == 72) return QString::fromUtf8("Работа указанного принтера или дискового накопителя была остановлена");
    if (code == 80) return QString::fromUtf8("Файл существует");
    if (code == 82) return QString::fromUtf8("Не удается создать файл или папку");
    if (code == 83) return QString::fromUtf8("Сбой прерывания INT 24");
    if (code == 84) return QString::fromUtf8("Недостаточно памяти для обработки запроса");
    if (code == 85) return QString::fromUtf8("Имя локального устройства уже используется");
    if (code == 86) return QString::fromUtf8("Сетевой пароль указан неверно");
    if (code == 87) return QString::fromUtf8("Параметр задан неверно");
    if (code == 88) return QString::fromUtf8("Ошибка записи в сети");
    if (code == 89) return QString::fromUtf8("В настоящее время системе не удается запустить другой процесс");
    if (code == 100) return QString::fromUtf8("Не удается создать еще один системный семафор");
    if (code == 101) return QString::fromUtf8("Семафор эксклюзивного доступа занят другим процессом");
    if (code == 102) return QString::fromUtf8("Семафор установлен и не может быть закрыт");
    if (code == 103) return QString::fromUtf8("Семафор не может быть установлен повторно");
    if (code == 104) return QString::fromUtf8("Запросы к семафорам эксклюзивного доступа на время выполнения прерываний не допускаются");
    if (code == 105) return QString::fromUtf8("Этот семафор более не принадлежит использовавшему его процессу");
    if (code == 107) return QString::fromUtf8("Программа была остановлена, так как нужный диск вставлен не был");
    if (code == 108) return QString::fromUtf8("Диск занят или заблокирован другим процессом");
    if (code == 109) return QString::fromUtf8("Канал был закрыт");
    if (code == 110) return QString::fromUtf8("Системе не удается открыть указанное устройство или файл");
    if (code == 111) return QString::fromUtf8("Указано слишком длинное имя файла");
    if (code == 112) return QString::fromUtf8("Недостаточно места на диске");
    if (code == 113) return QString::fromUtf8("Исчерпаны внутренние идентификаторы файлов");
    if (code == 114) return QString::fromUtf8("Результирующий внутренний идентификатор файла неправилен");
    if (code == 117) return QString::fromUtf8("Вызов IOCTL приложением произведен неверно");
    if (code == 118) return QString::fromUtf8("Параметр проверки записи данных имеет неверное значение");
    if (code == 119) return QString::fromUtf8("Система не может обработать полученную команду");
    if (code == 120) return QString::fromUtf8("Эта функция не поддерживается для этой системы");
    if (code == 121) return QString::fromUtf8("Превышен таймаут семафора");
    if (code == 122) return QString::fromUtf8("Область данных, переданная по системному вызову, слишком мала");
    if (code == 123) return QString::fromUtf8("Синтаксическая ошибка в имени файла, имени папки или метке тома");
    if (code == 124) return QString::fromUtf8("Неверный уровень системного вызова");
    if (code == 125) return QString::fromUtf8("У диска отсутствует метка тома");
    if (code == 126) return QString::fromUtf8("Не найден указанный модуль");
    if (code == 127) return QString::fromUtf8("Не найдена указанная процедура");
    if (code == 128) return QString::fromUtf8("Дочерние процессы, окончания которых требуется ожидать, отсутствуют");
    if (code == 130) return QString::fromUtf8("Попытка использовать дескриптор файла для открытия раздела диска и выполнения операции, отличающейся от ввода/вывода нижнего уровня");
    if (code == 131) return QString::fromUtf8("Попытка поместить указатель на файл перед началом файла");
    if (code == 132) return QString::fromUtf8("Указатель на файл не может быть установлен на заданное устройство или файл");
    if (code == 133) return QString::fromUtf8("Команды JOIN и SUBST не могут быть использованы для дисков, содержащих уже объединенные диски");
    if (code == 134) return QString::fromUtf8("Попытка использовать команду JOIN или SUBST для диска, уже включенного в набор объединенных дисков");
    if (code == 135) return QString::fromUtf8("Попытка использовать команду JOIN или SUBST для диска, который уже был отображен");
    if (code == 136) return QString::fromUtf8("Попытка снять признак объединения с диска, для которого команда JOIN не выполнялась");
    if (code == 137) return QString::fromUtf8("Попытка снять признак отображения с диска, для которого команда SUBST не выполнялась");
    if (code == 138) return QString::fromUtf8("Попытка объединить диск с папкой на объединенном диске");
    if (code == 139) return QString::fromUtf8("Попытка отобразить диск на папку, находящуюся на отображенном диске");
    if (code == 140) return QString::fromUtf8("Попытка объединить диск с папкой на отображенном диске");
    if (code == 141) return QString::fromUtf8("Попытка отобразить диск на папку, находящуюся на объединенном диске");
    if (code == 142) return QString::fromUtf8("В настоящее время выполнить команду JOIN или SUBST невозможно");
    if (code == 143) return QString::fromUtf8("Невозможно объединить (или отобразить) диск с папкой (или на папку) этого же диска");
    if (code == 144) return QString::fromUtf8("Эта папка не является подпапкой корневой папки");
    if (code == 145) return QString::fromUtf8("Папка не пуста");
    if (code == 146) return QString::fromUtf8("Указанный путь используется для отображенного диска");
    if (code == 147) return QString::fromUtf8("Недостаточно ресурсов для обработки команды");
    if (code == 148) return QString::fromUtf8("Указанный путь в настоящее время использовать нельзя");
    if (code == 149) return QString::fromUtf8("Попытка объединить или отобразить диск, папка на котором уже используется для отображения");
    if (code == 150) return QString::fromUtf8("Сведения о трассировке в файле CONFIG.SYS не найдены, либо трассировка запрещена");
    if (code == 151) return QString::fromUtf8("Число семафоров для DosMuxSemWait задано неверно");
    if (code == 152) return QString::fromUtf8("Не выполнен вызов DosMuxSemWait. Установлено слишком много семафоров");
    if (code == 153) return QString::fromUtf8("Некорректный вызов DosMuxSemWait");
    if (code == 154) return QString::fromUtf8("Длина метки тома превосходит предел, установленный для файловой системы");
    if (code == 155) return QString::fromUtf8("Не удается создать еще один поток команд");
    if (code == 156) return QString::fromUtf8("Принимающий процесс отклонил сигнал");
    if (code == 157) return QString::fromUtf8("Сегмент уже освобожден и не может быть заблокирован");
    if (code == 158) return QString::fromUtf8("Блокировка с сегмента уже снята");
    if (code == 159) return QString::fromUtf8("Адрес идентификатора потока команд задан неверно");
    if (code == 160) return QString::fromUtf8("Неверны один или несколько аргументов");
    if (code == 161) return QString::fromUtf8("Указан недопустимый путь");
    if (code == 162) return QString::fromUtf8("Сигнал уже находится в состоянии обработки");
    if (code == 164) return QString::fromUtf8("Создание дополнительных потоков команд невозможно");
    if (code == 167) return QString::fromUtf8("Не удается снять блокировку с области файла");
    if (code == 170) return QString::fromUtf8("Требуемый ресурс занят");
    if (code == 173) return QString::fromUtf8("Запрос на блокировку соответствует определенной области");
    if (code == 174) return QString::fromUtf8("Файловая система не поддерживает указанные изменения типа блокировки");
    if (code == 180) return QString::fromUtf8("Системой обнаружен неверный номер сегмента");
    if (code == 183) return QString::fromUtf8("Невозможно создать файл, так как он уже существует");
    if (code == 186) return QString::fromUtf8("Передан неверный флаг");
    if (code == 187) return QString::fromUtf8("Не найдено указанное имя системного семафора");
    if (code == 196) return QString::fromUtf8("Операционная система не может запустить это приложение");
    if (code == 197) return QString::fromUtf8("Конфигурация операционной системы не рассчитана на запуск этого приложения");
    if (code == 199) return QString::fromUtf8("Операционная система не может запустить это приложение");
    if (code == 200) return QString::fromUtf8("Сегмент кода должен быть меньше 64 КБ");
    if (code == 203) return QString::fromUtf8("Системе не удается найти указанный параметр среды");
    if (code == 205) return QString::fromUtf8("Ни один из процессов в дереве команды не имеет обработчика сигналов");
    if (code == 206) return QString::fromUtf8("Имя файла или его расширение имеет слишком большую длину");
    if (code == 207) return QString::fromUtf8("Кольцо 2 стека занято");
    if (code == 208) return QString::fromUtf8("Подстановочные знаки * и/или ? заданы неверно или образуют неверный шаблон имени");
    if (code == 209) return QString::fromUtf8("Отправляемый сигнал неверен");
    if (code == 210) return QString::fromUtf8("Не удается установить обработчик сигналов");
    if (code == 212) return QString::fromUtf8("Сегмент заблокирован и не может быть перемещен");
    if (code == 214) return QString::fromUtf8("К этой программе или модулю присоединено слишком много динамически подключаемых модулей");
    if (code == 215) return QString::fromUtf8("Вызовы LoadModule не могут быть вложены");
    if (code == 220) return QString::fromUtf8("Этот файл извлечен или заблокирован другим пользователем для редактирования");
    if (code == 221) return QString::fromUtf8("Перед сохранением изменений необходимо извлечь файл");
    if (code == 222) return QString::fromUtf8("Сохраняемый или полученный файл заблокирован");
    if (code == 223) return QString::fromUtf8("Размер файла превышает установленное ограничение, сохранение файла невозможно");
    if (code == 224) return QString::fromUtf8("Доступ запрещен. Перед открытием файла в данном размещении необходимо сначала добавить веб-сайт в список доверенных сайтов, перейти к этому сайту, а затем выбрать возможность автоматического входа");
    if (code == 225) return QString::fromUtf8("Операция не завершена, поскольку файл содержит вирус");
    if (code == 226) return QString::fromUtf8("Это файл содержит вирус и не может быть открыт. Файл удален из-за типа этого вируса");
    if (code == 229) return QString::fromUtf8("Канал локальный");
    if (code == 230) return QString::fromUtf8("Неправильное состояние канала");
    if (code == 231) return QString::fromUtf8("Все копии канала заняты");
    if (code == 232) return QString::fromUtf8("Идет закрытие канала");
    if (code == 233) return QString::fromUtf8("С обоих концов канала отсутствуют процессы");
    if (code == 234) return QString::fromUtf8("Имеются дополнительные данные");
    if (code == 240) return QString::fromUtf8("Сеанс был прекращен");
    if (code == 254) return QString::fromUtf8("Имя дополнительного атрибута было задано неверно");
    if (code == 255) return QString::fromUtf8("Дополнительные атрибуты несовместимы между собой");
    if (code == 258) return QString::fromUtf8("Время ожидания операции истекло");
    if (code == 259) return QString::fromUtf8("Дополнительные данные отсутствуют");
    if (code == 266) return QString::fromUtf8("Не удается использовать функции копирования");
    if (code == 267) return QString::fromUtf8("Неверно задано имя папки");
    if (code == 275) return QString::fromUtf8("Дополнительные атрибуты не уместились в буфере");
    if (code == 276) return QString::fromUtf8("Файл дополнительных атрибутов поврежден");
    if (code == 277) return QString::fromUtf8("Файл дополнительных атрибутов переполнен");
    if (code == 278) return QString::fromUtf8("Неверно указан дескриптор дополнительного атрибута");
    if (code == 282) return QString::fromUtf8("Установленная файловая система не поддерживает дополнительные атрибуты");
    if (code == 288) return QString::fromUtf8("Попытка освободить не принадлежащий процессу объект синхронизации");
    if (code == 298) return QString::fromUtf8("Слишком много попыток занесения события для семафора");
    if (code == 299) return QString::fromUtf8("Запрос ReadProcessMemory или WriteProcessMemory был выполнен только частично");
    if (code == 300) return QString::fromUtf8("Запрос  на нежесткую блокировку (oplock) отклонен");
    if (code == 301) return QString::fromUtf8("Системой получено недопустимое подтверждение на нежесткую блокировку");
    if (code == 302) return QString::fromUtf8("Том слишком сильно фрагментирован для завершения операции");
    if (code == 303) return QString::fromUtf8("Невозможно открыть файл, поскольку это происходит в удаляемом процессе");
    if (code == 304) return QString::fromUtf8("Для этого тома нельзя изменять параметры краткого имени в соответствии с глобальным параметром реестра");
    if (code == 305) return QString::fromUtf8("На этом томе не включено использование коротких имен");
    if (code == 306) return QString::fromUtf8("Поток безопасности для этого тома находится в несогласованном состоянии");
    if (code == 307) return QString::fromUtf8("Не удается обработать запрошенную операцию блокировки файла из-за недопустимого диапазона байтов");
    if (code == 308) return QString::fromUtf8("Отсутствует подсистема, необходимая для поддержки данного типа образа");
    if (code == 309) return QString::fromUtf8("С указанным файлом уже связан GUID уведомления");
    if (code == 318) return QString::fromUtf8("Указанная область не найдена");
    if (code == 350) return QString::fromUtf8("Действие не выполнено, так как требуется перезагрузка системы");
    if (code == 351) return QString::fromUtf8("Сбой операции завершения работы");
    if (code == 352) return QString::fromUtf8("Сбой операции перезапуска");
    if (code == 353) return QString::fromUtf8("Число сеансов достигло максимального значения");
    if (code == 400) return QString::fromUtf8("Этот поток уже находится в режиме фоновой обработки");
    if (code == 401) return QString::fromUtf8("Этот поток не находится в режиме фоновой обработки");
    if (code == 402) return QString::fromUtf8("Этот процесс уже находится в режиме фоновой обработки");
    if (code == 403) return QString::fromUtf8("Этот процесс не находится в режиме фоновой обработки");
    if (code == 487) return QString::fromUtf8("Попытка обращения к неверному адресу");
    if (code == 500) return QString::fromUtf8("Невозможно загрузить профиль пользователя");
    if (code == 534) return QString::fromUtf8("Длина результата арифметической операции превысила 32 разряда");
    if (code == 535) return QString::fromUtf8("С другой стороны канала присутствует процесс");
    if (code == 536) return QString::fromUtf8("Идет ожидание открытия процессом другой стороны канала");
    if (code == 537) return QString::fromUtf8("Программа проверки приложения обнаружила ошибку в текущем процессе");
    if (code == 538) return QString::fromUtf8("В подсистеме ABIOS обнаружена ошибка");
    if (code == 539) return QString::fromUtf8("Подсистема WX86 выдала предупреждение");
    if (code == 540) return QString::fromUtf8("В подсистеме WX86 обнаружена ошибка");
    if (code == 541) return QString::fromUtf8("Поток команд провел попытку отмены или установки таймера, с которым связан асинхронный вызов процедуры, но этот поток не совпадает с потоком, который изначально установил таймер со связанной процедурой асинхронного вызова");
    if (code == 542) return QString::fromUtf8("Программа завершающего исключения");
    if (code == 543) return QString::fromUtf8("Недопустимый или не выровненный стек во время операции завершения");
    if (code == 544) return QString::fromUtf8("Неправильный конечный адрес во время операции завершения");
    if (code == 545) return QString::fromUtf8("Указаны неправильные атрибуты объекта для NtCreatePort или неправильные атрибуты порта для NtConnectPort");
    if (code == 546) return QString::fromUtf8("Длина сообщения, переданного NtRequestPort или NtRequestWaitReplyPort, превышает максимально допустимую длину сообщений для порта");
    if (code == 547) return QString::fromUtf8("Попытка снижения предельных квот ниже текущего используемого уровня");
    if (code == 548) return QString::fromUtf8("Произведена попытка присоединения устройства, которое уже присоединено к другому устройству");
    if (code == 549) return QString::fromUtf8("Произведена попытка выполнения инструкции по не выровненному адресу, но обслуживающая система не поддерживает ссылки на не выровненные инструкции");
    if (code == 550) return QString::fromUtf8("Измерение быстродействия не начато");
    if (code == 551) return QString::fromUtf8("Измерение быстродействия не завершено");
    if (code == 552) return QString::fromUtf8("Переданная таблица управления доступом не содержит требуемых сведений");
    if (code == 553) return QString::fromUtf8("Число активных объектов для измерения быстродействия достигло максимума, запуск дополнительных объектов невозможен");
    if (code == 554) return QString::fromUtf8("Продолжение операции невозможно без блокировки для ввода/вывода");
    if (code == 555) return QString::fromUtf8("Поток команд произвел попытку завершения работы стандартным способом (через вызов NtTerminateThread с параметром NULL), но этот поток команд был последним для текущего процесса");
    if (code == 556) return QString::fromUtf8("При возврате ошибки мультимедиа, не определенной в стандартном фильтре FsRtl, она будет преобразована в следующую ошибку, которая обязательно определена в фильтре");
    if (code == 557) return QString::fromUtf8("При возврате ошибки мультимедиа, не определенной в стандартном фильтре FsRtl, она будет преобразована в следующую ошибку, которая обязательно определена в фильтре");
    if (code == 558) return QString::fromUtf8("При возврате ошибки мультимедиа, не определенной в стандартном фильтре FsRtl, она будет преобразована в следующую ошибку, которая обязательно определена в фильтре");
    if (code == 559) return QString::fromUtf8("При операции завершения обнаружена неправильно сформированная таблица функций");
    if (code == 560) return QString::fromUtf8("Произведена попытка установки защиты для системного файла или каталога, но один из идентификаторов безопасности в дескрипторе безопасности нельзя преобразовать в глобальный уникальный идентификатор (GUID) для сохранения в файловой системе");
    if (code == 561) return QString::fromUtf8("Попытка наращивания локальной таблицы описателей за счет увеличения ее размера, либо размер таблицы не делится нацело на размер селектора");
    if (code == 563) return QString::fromUtf8("Начальное значение сведений о локальной таблице описателей не делится нацело на размер селектора");
    if (code == 564) return QString::fromUtf8("При попытке настройки локальной таблицы описателей пользователь указал неправильный дескриптор");
    if (code == 565) return QString::fromUtf8("Процесс содержит слишком много потоков команд для выполнения требуемой операции. Например, присвоение основного токена допускается лишь для процесса, имеющего не более одного потока команд");
    if (code == 566) return QString::fromUtf8("Произведена попытка выполнения операции над потоком команд определенного процесса, но указанный поток команд не принадлежит данному процессу");
    if (code == 567) return QString::fromUtf8("Превышена квота на использование файла подкачки");
    if (code == 568) return QString::fromUtf8("Запуск службы входа в сеть невозможен из-за конфликта с другой службой входа в сеть, запущенной в домене");
    if (code == 569) return QString::fromUtf8("База данных диспетчера учетных записей на сервере Windows значительно отличается от копии этой базы данных на контроллере домена. Требуется полная синхронизация");
    if (code == 570) return QString::fromUtf8("Сбой функции NtCreateFile API. Эта ошибка никогда не должна возвращаться приложению, она является заглушкой для применения во внутренних процедурах отображения ошибок перенаправителя Windows Lan Manager");
    if (code == 571) return QString::fromUtf8("{Недостаточно привилегий}");
    if (code == 572) return QString::fromUtf8("{Выход из приложения по CTRL+C}");
    if (code == 573) return QString::fromUtf8("{Системный файл отсутствует}");
    if (code == 574) return QString::fromUtf8("{Ошибка приложения}");
    if (code == 575) return QString::fromUtf8("{Ошибка приложения}");
    if (code == 576) return QString::fromUtf8("{Не удается закрыть файл подкачки}");
    if (code == 577) return QString::fromUtf8("Системе Windows не удается проверить цифровую подпись этого файла. При последнем изменении оборудования или программного обеспечения могла быть произведена установка неправильно подписанного или поврежденного файла либо вредоносной программы неизвестного происхождения");
    if (code == 578) return QString::fromUtf8("{Файл подкачки не задан}");
    if (code == 579) return QString::fromUtf8("{ИСКЛЮЧЕНИЕ}");
    if (code == 580) return QString::fromUtf8("Операция синхронизации по паре событий выполнена с помощью связанной с потоком команд пары событий типа клиент/сервер, однако с данным потоком команд не связан ни один объект типа пары событий");
    if (code == 581) return QString::fromUtf8("Неправильная конфигурация сервера Windows");
    if (code == 582) return QString::fromUtf8("Обнаружен недопустимый символ. Для многобайтового набора символов не допускается наличие первого байта без следующего за ним второго байта. Для набора символов Юникода недопустимыми являются символы 0xFFFF и 0xFFFE");
    if (code == 583) return QString::fromUtf8("Символ Юникода не определен в наборе символов Юникода, установленном в системе");
    if (code == 584) return QString::fromUtf8("Создание файла подкачки на гибком диске не допускается");
    if (code == 585) return QString::fromUtf8("Системе BIOS не удалось связать системное прерывание с устройством или шиной, к которой подключено устройство");
    if (code == 586) return QString::fromUtf8("Операция разрешена только для основного контроллера домена");
    if (code == 587) return QString::fromUtf8("Попытка получения объекта-мутанта, которая привела бы к превышению максимального значения счетчика");
    if (code == 588) return QString::fromUtf8("Проведено обращение к тому, требующее драйвера файловой системы, который еще не загружен");
    if (code == 589) return QString::fromUtf8("{Сбой в файле реестра}");
    if (code == 590) return QString::fromUtf8("{Непредвиденный сбой DebugActiveProcess}");
    if (code == 591) return QString::fromUtf8("{Неустранимая системная ошибка} Непредвиденное завершение системного процесса hs");
    if (code == 592) return QString::fromUtf8("{Данные не приняты}");
    if (code == 593) return QString::fromUtf8("Аппаратная ошибка NTVDM");
    if (code == 594) return QString::fromUtf8("{Превышение времени ожидания отмены}");
    if (code == 595) return QString::fromUtf8("{Несовпадение ответного сообщения}");
    if (code == 596) return QString::fromUtf8("{Ошибка отложенной записи}");
    if (code == 597) return QString::fromUtf8("Серверу переданы неправильные параметры в окне общей памяти клиента/сервера. Возможно, окно общей памяти содержит слишком много данных");
    if (code == 598) return QString::fromUtf8("Поток данных не соответствует сверхмалой (tiny) модели памяти");
    if (code == 599) return QString::fromUtf8("Запрос должен быть обработан программой переполнения стека");
    if (code == 600) return QString::fromUtf8("Внутренний код состояния OFS, указывающий режим обработки операции выделения памяти. Либо операция повторяется после перемещения охватывающего O-узла либо поток данных непрерывной области преобразуется к большой модели памяти");
    if (code == 601) return QString::fromUtf8("В процессе поиска на томе обнаружен объект с подходящим идентификатором, но он находится вне области определения дескриптора, используемого для операции");
    if (code == 602) return QString::fromUtf8("Следует увеличить размер массива черпаков. После этого повторите транзакцию");
    if (code == 603) return QString::fromUtf8("Переполнение буфера формирования сообщений пользователя/ядра");
    if (code == 604) return QString::fromUtf8("Предоставленная VARIANT-структура содержит неправильные данные");
    if (code == 605) return QString::fromUtf8("Указанный буфер содержит данные недопустимого формата");
    if (code == 606) return QString::fromUtf8("{Неудачная попытка аудита}");
    if (code == 607) return QString::fromUtf8("Разрешение таймера не было ранее установлено текущим процессом");
    if (code == 608) return QString::fromUtf8("Учетная запись содержит недостаточно сведений для входа в систему");
    if (code == 609) return QString::fromUtf8("{Неправильная точка входа DLL }");
    if (code == 610) return QString::fromUtf8("{Неправильная точка входа ответного вызова службы}");
    if (code == 611) return QString::fromUtf8("Конфликт IP-адреса с другой системой в сети");
    if (code == 612) return QString::fromUtf8("Конфликт IP-адреса с другой системой в сети");
    if (code == 613) return QString::fromUtf8("{Недостаточно места в реестре}");
    if (code == 614) return QString::fromUtf8("Нельзя выйти из ответного вызова системной службы, когда нет активных ответных вызовов");
    if (code == 615) return QString::fromUtf8("Указан слишком короткий пароль, что запрещено политикой учетных записей");
    if (code == 616) return QString::fromUtf8("Политика учетной записи пользователя не разрешает слишком частую смену пароля");
    if (code == 617) return QString::fromUtf8("Выбранный новый пароль уже использовался ранее. Политика учетной записи");
    if (code == 618) return QString::fromUtf8("Указанный формат сжатия не поддерживается");
    if (code == 619) return QString::fromUtf8("Указана неправильная аппаратная конфигурация");
    if (code == 620) return QString::fromUtf8("Указан неправильный путь реестра для самонастраиваемого устройства");
    if (code == 621) return QString::fromUtf8("Указанный список квот внутренне несовместим со своим дескриптором");
    if (code == 622) return QString::fromUtf8("{Уведомление пробной версии Windows}");
    if (code == 623) return QString::fromUtf8("{Недопустимое перемещение системной DLL}");
    if (code == 624) return QString::fromUtf8("{Сбой инициализации DLL}");
    if (code == 625) return QString::fromUtf8("Необходимо перейти к следующему шагу процесса проверки");
    if (code == 626) return QString::fromUtf8("Больше нет соответствий для указанного перечисления индекса");
    if (code == 627) return QString::fromUtf8("Этот диапазон не может быть добавлен в список диапазонов из-за конфликта");
    if (code == 628) return QString::fromUtf8("Процесс сервера выполняется с идентификатором безопасности, отличающимся от запрошенного клиентом");
    if (code == 629) return QString::fromUtf8("Невозможно разрешить использование группы, помеченной как \"используемая только для запрета\"");
    if (code == 630) return QString::fromUtf8("{ИСКЛЮЧЕНИЕ}");
    if (code == 631) return QString::fromUtf8("{ИСКЛЮЧЕНИЕ}");
    if (code == 632) return QString::fromUtf8("Запрошенный интерфейс не поддерживается");
    if (code == 633) return QString::fromUtf8("{Ошибка ждущего режима}");
    if (code == 635) return QString::fromUtf8("{Слишком мало виртуальной памяти}");
    if (code == 636) return QString::fromUtf8("Устройство было удалено, поэтому перечисление необходимо выполнить заново");
    if (code == 637) return QString::fromUtf8("{Неустранимая ошибка системы}");
    if (code == 638) return QString::fromUtf8("Устройство не будет запущено без перезагрузки");
    if (code == 639) return QString::fromUtf8("Недостаточно питания для завершения запрошенной операции");
    if (code == 640) return QString::fromUtf8("ERROR_MULTIPLE_FAULT_VIOLATION");
    if (code == 641) return QString::fromUtf8("Идет завершение работы системы");
    if (code == 642) return QString::fromUtf8("DebugPort предпринял попытку удалить процессы, но порт не был еще связан с этим процессом");
    if (code == 643) return QString::fromUtf8("Данная версия Windows несовместима с версией поведения леса, домена или контроллера домена");
    if (code == 644) return QString::fromUtf8("Указанный диапазон не найден в списке диапазонов");
    if (code == 646) return QString::fromUtf8("Драйвер не был загружен, поскольку система запущена в безопасном режиме");
    if (code == 647) return QString::fromUtf8("Драйвер не был загружен, поскольку произошел сбой при его инициализации");
    if (code == 648) return QString::fromUtf8("\"hs\" вызвало ошибку при включении питания или чтении параметров устройства");
    if (code == 649) return QString::fromUtf8("Операция создания прервана, поскольку имя, содержит по крайней мере одну точку подключения, которая ссылается на том, к которому объект данного устройства не подключен");
    if (code == 650) return QString::fromUtf8("Параметр объекта устройства либо неправильный, либо не подключен к тому, указанному в имени файла");
    if (code == 651) return QString::fromUtf8("Ошибка проверки компьютера. Проверьте системный журнал событий на наличие соответствующих ошибок");
    if (code == 653) return QString::fromUtf8("системный куст реестра превысил ограничение");
    if (code == 654) return QString::fromUtf8("Драйвер не может быть загружен, поскольку в памяти находится его предыдущая версия");
    if (code == 655) return QString::fromUtf8("{Служба теневого копирования тома}");
    if (code == 656) return QString::fromUtf8("Системе не удалось перейти в режим гибернации. Гибернация будет отключена до перезагрузки системы");
    if (code == 665) return QString::fromUtf8("Запрошенная операция не может быть завершена из-за ограничения файловой системы");
    if (code == 668) return QString::fromUtf8("Произошла ошибка подтверждения");
    if (code == 669) return QString::fromUtf8("В подсистеме ACPI обнаружена ошибка");
    if (code == 670) return QString::fromUtf8("Ошибка утверждения WOW");
    if (code == 671) return QString::fromUtf8("Устройство отсутствует в таблице MPS системного BIOS. Это устройство не будет использоваться");
    if (code == 672) return QString::fromUtf8("Транслятору не удалось транслировать ресурсы");
    if (code == 673) return QString::fromUtf8("Транслятору IRQ не удалось транслировать ресурсы");
    if (code == 675) return QString::fromUtf8("{Вызов отладчика ядра}");
    if (code == 676) return QString::fromUtf8("{Дескрипторы закрыты}");
    if (code == 677) return QString::fromUtf8("{Слишком много данных}");
    if (code == 678) return QString::fromUtf8("Этот код предупреждения означает, что ветвь реестра уже находится в состоянии транзакции, однако завершение транзакции ранее было прервано");
    if (code == 679) return QString::fromUtf8("{Смена носителя}");
    if (code == 680) return QString::fromUtf8("{Подстановка GUID}");
    if (code == 681) return QString::fromUtf8("Операция создания остановлена после достижения символической ссылки");
    if (code == 682) return QString::fromUtf8("Выполнен длинный переход");
    if (code == 683) return QString::fromUtf8("Операция запроса самонастраиваемого устройства не была завершена успешно");
    if (code == 684) return QString::fromUtf8("Объединение пакетов завершено");
    if (code == 685) return QString::fromUtf8("{Восстановленный куст реестра}");
    if (code == 686) return QString::fromUtf8("Это приложение пытается запустить исполняемую программу из модуля hs. Это может быть опасно.  Доступен альтернативный модуль hs. Следует приложению использовать безопасный модуль hs?");
    if (code == 687) return QString::fromUtf8("Это приложение загружает исполняемую программу из модуля hs. Это безопасно, но может быть несовместимо с предыдущими выпусками операционной системы. Доступен альтернативный модуль hs. Следует приложению использовать безопасный модуль hs?");
    if (code == 688) return QString::fromUtf8("Отладчик не обработал это исключение");
    if (code == 689) return QString::fromUtf8("Отладчик ответит позже");
    if (code == 690) return QString::fromUtf8("Отладчик не может предоставить дескриптор");
    if (code == 691) return QString::fromUtf8("Отладчик завершил поток");
    if (code == 692) return QString::fromUtf8("Отладчик завершил процесс");
    if (code == 693) return QString::fromUtf8("Отладчик получил CTRL-C");
    if (code == 694) return QString::fromUtf8("Отладчик вывел исключение по CTRL-C");
    if (code == 695) return QString::fromUtf8("Отладчик получил RIP-исключение");
    if (code == 696) return QString::fromUtf8("Отладчик получил CTRL-BREAK");
    if (code == 697) return QString::fromUtf8("Исключение при подключении команды отладчика");
    if (code == 698) return QString::fromUtf8("{Объект существует}");
    if (code == 699) return QString::fromUtf8("{Поток команд приостановлен}");
    if (code == 700) return QString::fromUtf8("{Образ перемещен}");
    if (code == 701) return QString::fromUtf8("Указанная ветвь реестра не находилась в состоянии транзакции, поэтому транзакцию пришлось создать");
    if (code == 702) return QString::fromUtf8("{Загрузка сегмента}");
    if (code == 703) return QString::fromUtf8("{Неправильный текущий каталог}");
    if (code == 704) return QString::fromUtf8("{Чтение с избыточной копии}");
    if (code == 705) return QString::fromUtf8("{Запись избыточной копии}");
    if (code == 706) return QString::fromUtf8("{Несоответствие типа компьютера}");
    if (code == 707) return QString::fromUtf8("{Получена часть данных}");
    if (code == 708) return QString::fromUtf8("{Получены отправленные данные}");
    if (code == 709) return QString::fromUtf8("{Получена часть отправленных данных}");
    if (code == 710) return QString::fromUtf8("{Событие TDI произошло}");
    if (code == 711) return QString::fromUtf8("{Ожидается событие TDI}");
    if (code == 712) return QString::fromUtf8("Проверка файловой системы на wZ");
    if (code == 713) return QString::fromUtf8("{Неустранимая ошибка приложения}");
    if (code == 714) return QString::fromUtf8("На указанный раздел реестра ссылается заранее определенный дескриптор");
    if (code == 715) return QString::fromUtf8("{Страница разблокирована}");
    if (code == 716) return QString::fromUtf8("hs");
    if (code == 717) return QString::fromUtf8("{Страница заблокирована}");
    if (code == 719) return QString::fromUtf8("ERROR_ALREADY_WIN32");
    if (code == 720) return QString::fromUtf8("{Несоответствие типа компьютера}");
    if (code == 721) return QString::fromUtf8("Проведена уступка выполнения, но готовых для выполнения потоков команд нет");
    if (code == 722) return QString::fromUtf8("Возобновляемый флаг для API таймера проигнорирован");
    if (code == 723) return QString::fromUtf8("Арбитр передал разрешение спора о этих ресурсах их родительскому ресурсу");
    if (code == 724) return QString::fromUtf8("Вставленное устройство CardBus не может быть запущено из-за ошибки настройки \"hs\"");
    if (code == 725) return QString::fromUtf8("Процессоры на этом мультипроцессорном компьютере имеют различные уровни редакции. Чтобы использовать все процессоры, операционная система ограничится возможностями процессора наименьшего уровня на этом компьютере. В случае возникновения проблем на этом компьютере, обратитесь к изготовителю ЦП и проверьте,  поддерживается ли совместное использование таких процессоров");
    if (code == 726) return QString::fromUtf8("Система переведена в режим гибернации");
    if (code == 727) return QString::fromUtf8("Система выведена из режима гибернации");
    if (code == 729) return QString::fromUtf8("Драйвер устройства пропускает блокированные страницы ввода-вывода, что понижает производительность системы. Для поиска и обнаружения причины автоматически включена программа отслеживания");
    if (code == 730) return QString::fromUtf8("Системы выведена из спящего режима");
    if (code == 731) return QString::fromUtf8("ERROR_WAIT_1");
    if (code == 732) return QString::fromUtf8("ERROR_WAIT_2");
    if (code == 733) return QString::fromUtf8("ERROR_WAIT_3");
    if (code == 734) return QString::fromUtf8("ERROR_WAIT_63");
    if (code == 735) return QString::fromUtf8("ERROR_ABANDONED_WAIT_0");
    if (code == 736) return QString::fromUtf8("ERROR_ABANDONED_WAIT_63");
    if (code == 737) return QString::fromUtf8("ERROR_USER_APC");
    if (code == 738) return QString::fromUtf8("ERROR_KERNEL_APC");
    if (code == 739) return QString::fromUtf8("ERROR_ALERTED");
    if (code == 740) return QString::fromUtf8("Запрошенная операция требует повышения");
    if (code == 741) return QString::fromUtf8("Требуется повторная обработка команды диспетчером объектов, так как имя файла является символической ссылкой");
    if (code == 742) return QString::fromUtf8("Операция открытия/создания завершена во время снятия нежесткой блокировки");
    if (code == 743) return QString::fromUtf8("Новый том присоединен файловой системой");
    if (code == 744) return QString::fromUtf8("Этот код успешного завершения означает, что ветвь реестра уже находится в состоянии транзакции, однако завершение транзакции ранее было прервано");
    if (code == 745) return QString::fromUtf8("Запрос на уведомление об изменении был завершен из-за закрытия дескриптора, вызвавшего данный запрос");
    if (code == 746) return QString::fromUtf8("{Сбой подключения через основной транспорт}");
    if (code == 747) return QString::fromUtf8("Сбой доступа к странице вызван ошибкой перехода");
    if (code == 748) return QString::fromUtf8("Ошибка страницы при запросе обнуленной страницы");
    if (code == 749) return QString::fromUtf8("Ошибка страницы при запросе обнуленной страницы");
    if (code == 750) return QString::fromUtf8("Ошибка страницы при запросе обнуленной страницы");
    if (code == 751) return QString::fromUtf8("Ошибка страницы устранена путем чтения с дополнительного накопителя");
    if (code == 752) return QString::fromUtf8("Кэшированная страница заблокирована во время операции");
    if (code == 753) return QString::fromUtf8("В файле подкачки записана аварийная копия памяти");
    if (code == 754) return QString::fromUtf8("Заданный буфер содержит только нули");
    if (code == 755) return QString::fromUtf8("Требуется повторная обработка команды диспетчером объектов, так как имя файла является символической ссылкой");
    if (code == 756) return QString::fromUtf8("Устройство успешно выполнило запрос на остановку и его потребности в ресурсах изменились");
    if (code == 757) return QString::fromUtf8("Транслятор перевел эти ресурсы в глобальное пространство и дальнейшие переводы не требуются");
    if (code == 758) return QString::fromUtf8("Завершаемый процесс не имеет потоков для завершения");
    if (code == 759) return QString::fromUtf8("Указанный процесс не является частью задания");
    if (code == 760) return QString::fromUtf8("Указанный процесс является частью задания");
    if (code == 761) return QString::fromUtf8("{Служба теневого копирования тома}");
    if (code == 762) return QString::fromUtf8("Файловая система или драйвер фильтра файловой системы успешно выполнили операцию FsFilter");
    if (code == 763) return QString::fromUtf8("Указанный вектор прерывания уже подключен");
    if (code == 764) return QString::fromUtf8("Указанный вектор прерывания еще подключен");
    if (code == 765) return QString::fromUtf8("Операция заблокирована в ожидании параметра oplock");
    if (code == 766) return QString::fromUtf8("Отладчик обработал исключение");
    if (code == 767) return QString::fromUtf8("Отладчик продолжает работу");
    if (code == 768) return QString::fromUtf8("Ошибка в ответном вызове пользовательского режима, пакет ответного вызова ядра будет удален");
    if (code == 769) return QString::fromUtf8("Сжатие отключено для этого тома");
    if (code == 770) return QString::fromUtf8("Поставщик данных не может отменить выборку в наборе результатов");
    if (code == 771) return QString::fromUtf8("Поставщик данных не может выполнить прокрутку назад в наборе результатов");
    if (code == 772) return QString::fromUtf8("Поставщик данных требует, чтобы ранее выбранные данные были освобождены перед запросом новых данных");
    if (code == 773) return QString::fromUtf8("Поставщику данных не удалось выполнить интерпретацию флагов, заданных для  привязки столбцов в запросе на доступ");
    if (code == 774) return QString::fromUtf8("При обработке запроса произошло несколько ошибок");
    if (code == 775) return QString::fromUtf8("Эта реализация не может выполнить запрос");
    if (code == 776) return QString::fromUtf8("Клиент компонента запросил операцию, которая является недопустимой для текущего состояния экземпляра компонента");
    if (code == 777) return QString::fromUtf8("Невозможно обработать номер версии");
    if (code == 778) return QString::fromUtf8("Недопустимая начальная позиция итератора");
    if (code == 779) return QString::fromUtf8("Оборудование сообщило о неустранимой ошибке памяти");
    if (code == 780) return QString::fromUtf8("Запрошенная операция требует включенной функции самовосстановления");
    if (code == 781) return QString::fromUtf8("При выделении памяти для сеанса из кучи рабочего стола возникла ошибка. Дополнительные сведения см. в журнале системных событий");
    if (code == 784) return QString::fromUtf8("Поток будет отправлен с исключением MCA EXCEPTION из-за MCA");
    if (code == 787) return QString::fromUtf8("Файл данных режима гибернации стал недействительным и будет отброшен");
    if (code == 788) return QString::fromUtf8("{Ошибка отложенной записи}");
    if (code == 789) return QString::fromUtf8("{Ошибка отложенной записи}");
    if (code == 790) return QString::fromUtf8("{Ошибка отложенной записи}");
    if (code == 791) return QString::fromUtf8("Ресурсы, необходимые для этого устройства, конфликтуют с таблицей MCFG");
    if (code == 800) return QString::fromUtf8("Нежесткая блокировка, связанная с данным дескриптором, теперь связана с другим дескриптором");
    if (code == 801) return QString::fromUtf8("Не удается разрешить нежесткую блокировку запрошенного уровня.  Может быть доступна нежесткая блокировка более низкого уровня");
    if (code == 802) return QString::fromUtf8("Не удалось завершить операцию, поскольку ее выполнение могло привести к нарушению нежесткой блокировки. Вызывающий объект отправил запрос на то, чтобы существующие нежесткие блокировки не были нарушены");
    if (code == 803) return QString::fromUtf8("Дескриптор, с которым была связана данная нежесткая блокировка, был закрыт.  Нежесткая блокировка теперь нарушена");
    if (code == 804) return QString::fromUtf8("Указанный элемент управления доступом не содержит условие");
    if (code == 805) return QString::fromUtf8("Указанный элемент управления доступом содержит недопустимое условие");
    if (code == 994) return QString::fromUtf8("Нет доступа к дополнительным атрибутам");
    if (code == 995) return QString::fromUtf8("Операция ввода/вывода была прервана из-за завершения потока команд или по запросу приложения");
    if (code == 996) return QString::fromUtf8("Наложенное событие ввода/вывода не находится в сигнальном состоянии");
    if (code == 997) return QString::fromUtf8("Протекает наложенное событие ввода/вывода");
    if (code == 998) return QString::fromUtf8("Неверная попытка доступа к адресу памяти");
    if (code == 999) return QString::fromUtf8("Ошибка при выполнении операции со страницей");
    if (code == 1001) return QString::fromUtf8("Слишком глубокий уровень рекурсии. Стек переполнен");
    if (code == 1002) return QString::fromUtf8("Окно не может взаимодействовать с отправленным сообщением");
    if (code == 1003) return QString::fromUtf8("Не удается завершить выполнение функции");
    if (code == 1004) return QString::fromUtf8("Флаги установлены неверно");
    if (code == 1005) return QString::fromUtf8("Не удается опознать присутствующую на томе файловую систему");
    if (code == 1006) return QString::fromUtf8("Том для открытого файла был изменен извне, поэтому работа с этим файлом невозможна");
    if (code == 1007) return QString::fromUtf8("Заданная операция не может быть выполнена в полноэкранном режиме");
    if (code == 1008) return QString::fromUtf8("Попытка ссылки на несуществующий токен");
    if (code == 1009) return QString::fromUtf8("База данных реестра повреждена");
    if (code == 1010) return QString::fromUtf8("Параметр реестра имеет неверное значение");
    if (code == 1011) return QString::fromUtf8("Не удается открыть параметр реестра");
    if (code == 1012) return QString::fromUtf8("Не удается прочитать параметр реестра");
    if (code == 1013) return QString::fromUtf8("Не удается записать параметр реестра");
    if (code == 1014) return QString::fromUtf8("Один из файлов в базе данных реестра было необходимо восстановить с помощью протокола или резервной копии.  Восстановление прошло успешно");
    if (code == 1015) return QString::fromUtf8("Реестр поврежден. Структура одного из файлов, содержащего  данные реестра, повреждена. Возможно поврежден образ памяти в файле , или файл не удалось восстановить из-за отсутствия резервной копии или протокола");
    if (code == 1016) return QString::fromUtf8("Неустранимый сбой операции ввода/вывода, запущенной из реестра. Не удалось выполнить чтение, запись или запись буфера для одного из файлов, содержащих образ системного реестра");
    if (code == 1017) return QString::fromUtf8("При попытке загрузить или восстановить файл реестра выяснилось, что этот файл имеет неверный формат");
    if (code == 1018) return QString::fromUtf8("Попытка произвести недопустимую операцию над параметром реестра, отмеченным для удаления");
    if (code == 1019) return QString::fromUtf8("Не удалось выделить требуемое место в протоколе реестра");
    if (code == 1020) return QString::fromUtf8("Нельзя создать символическую ссылку для параметра реестра, который уже содержит подпараметры или значения");
    if (code == 1021) return QString::fromUtf8("Нельзя создать статический подпараметр для временного родительского параметра");
    if (code == 1022) return QString::fromUtf8("Запрос на уведомление об изменениях завершается, однако данные не были возвращены в буфер вызывающей процедуры. Теперь эта процедура нуждается в перечислении файлов для поиска изменений");
    if (code == 1051) return QString::fromUtf8("Команда остановки была отправлена службе, от которой зависят другие службы");
    if (code == 1052) return QString::fromUtf8("Команда неуместна для данной службы");
    if (code == 1053) return QString::fromUtf8("Служба не ответила на запрос своевременно");
    if (code == 1054) return QString::fromUtf8("Не удалось создать поток команд для службы");
    if (code == 1055) return QString::fromUtf8("База данных службы заблокирована");
    if (code == 1056) return QString::fromUtf8("Одна копия службы уже запущена");
    if (code == 1057) return QString::fromUtf8("Имя учетной записи задано неверно или не существует, или же неверен указанный пароль");
    if (code == 1058) return QString::fromUtf8("Указанная служба не может быть запущена, поскольку она отключена или все связанные с ней устройства отключены");
    if (code == 1059) return QString::fromUtf8("Была сделана попытка установить циклическую зависимость между службами");
    if (code == 1060) return QString::fromUtf8("Указанная служба не установлена");
    if (code == 1061) return QString::fromUtf8("Служба в настоящее время не может принимать команды");
    if (code == 1062) return QString::fromUtf8("Служба не запущена");
    if (code == 1063) return QString::fromUtf8("Процесс службы не может установить связь с контроллером службы");
    if (code == 1064) return QString::fromUtf8("Ошибка службы при обработке команды");
    if (code == 1065) return QString::fromUtf8("Указанная база данных не существует");
    if (code == 1066) return QString::fromUtf8("Служба возвратила код ошибки");
    if (code == 1067) return QString::fromUtf8("Процесс был неожиданно завершен");
    if (code == 1068) return QString::fromUtf8("Не удалось запустить дочернюю службу");
    if (code == 1069) return QString::fromUtf8("Служба не запущена из-за ошибки входа в систему");
    if (code == 1070) return QString::fromUtf8("Сразу после запуска служба \"зависла\"");
    if (code == 1071) return QString::fromUtf8("Блокировка базы данных указанной службы наложена неверно");
    if (code == 1072) return QString::fromUtf8("Указанная служба была отмечена для удаления");
    if (code == 1073) return QString::fromUtf8("Указанная служба уже существует");
    if (code == 1074) return QString::fromUtf8("Система в настоящий момент работает с использованием последней удачной конфигурации");
    if (code == 1075) return QString::fromUtf8("Дочерняя служба не существует или была отмечена для удаления");
    if (code == 1076) return QString::fromUtf8("Текущая конфигурация уже была задействована в качестве источника последнего удачного набора параметров");
    if (code == 1077) return QString::fromUtf8("С момента последней загрузки попытки запустить службу не делались");
    if (code == 1078) return QString::fromUtf8("Это имя уже используется в качестве имени службы или выводимого имени службы");
    if (code == 1079) return QString::fromUtf8("Учетная запись, указанная для этой службы, отличается от учетной записи, указанной для других служб в этом же процессе");
    if (code == 1080) return QString::fromUtf8("Действия при возникновении ошибок могут быть назначены только для служб Win32, но не для драйверов");
    if (code == 1081) return QString::fromUtf8("Эта служба запущена в том же процессе, что и диспетчер управления службами");
    if (code == 1082) return QString::fromUtf8("Для этой службы не сконфигурировано ни одной программы восстановления");
    if (code == 1083) return QString::fromUtf8("Исполняемая программа, запуск которой настроен в службе, не включена в состав службы");
    if (code == 1084) return QString::fromUtf8("Эта служба не запускается в безопасном режиме (Safe Mode)");
    if (code == 1100) return QString::fromUtf8("Достигнут физический конец ленты");
    if (code == 1101) return QString::fromUtf8("На ленте достигнута метка файла");
    if (code == 1102) return QString::fromUtf8("Обнаружено начало раздела ленты");
    if (code == 1103) return QString::fromUtf8("На ленте достигнут конец набора файлов");
    if (code == 1104) return QString::fromUtf8("Больше данных на ленте нет");
    if (code == 1105) return QString::fromUtf8("Не удается создать разделы на ленте");
    if (code == 1106) return QString::fromUtf8("Неверный размер блока при обращении к новой ленте многотомного раздела");
    if (code == 1107) return QString::fromUtf8("Сведения о разделах при загрузке ленты не обнаружены");
    if (code == 1108) return QString::fromUtf8("Не удается заблокировать механизм извлечения носителя");
    if (code == 1109) return QString::fromUtf8("Не удается извлечь носитель");
    if (code == 1110) return QString::fromUtf8("Носитель в устройстве мог быть заменен");
    if (code == 1111) return QString::fromUtf8("Шина ввода/вывода была инициализирована заново");
    if (code == 1112) return QString::fromUtf8("Отсутствует носитель в устройстве");
    if (code == 1113) return QString::fromUtf8("Символ Юникода не имеет сопоставления в конечной многобайтовой кодовой странице");
    if (code == 1114) return QString::fromUtf8("Произошел сбой в программе инициализации библиотеки динамической компоновки (DLL)");
    if (code == 1115) return QString::fromUtf8("Идет завершение работы системы");
    if (code == 1116) return QString::fromUtf8("Прервать завершение работы системы невозможно, так как оно не было инициировано");
    if (code == 1117) return QString::fromUtf8("Запрос не был выполнен из-за ошибки ввода/вывода на устройстве");
    if (code == 1118) return QString::fromUtf8("Последовательные устройства не инициализированы. Драйвер будет выгружен");
    if (code == 1119) return QString::fromUtf8("Не удается открыть устройство, использующее общий с другими устройствами запрос на прерывание (IRQ). Как минимум одно устройство, использующее этот же запрос IRQ, уже было открыто");
    if (code == 1120) return QString::fromUtf8("Последовательная операция ввода/вывода была завершена ");
    if (code == 1121) return QString::fromUtf8("Последовательная операция ввода/вывода была завершена ");
    if (code == 1122) return QString::fromUtf8("На гибком диске не обнаружена адресная метка идентификатора");
    if (code == 1123) return QString::fromUtf8("Обнаружено несоответствие между полем идентификатора сектора гибкого диска и адресом дорожки контроллера");
    if (code == 1124) return QString::fromUtf8("Ошибка, возвращенная контроллером гибких дисков, не опознается драйвером");
    if (code == 1125) return QString::fromUtf8("Контроллером гибких дисков возвращены некорректные значения регистров");
    if (code == 1126) return QString::fromUtf8("Зафиксирован многократный сбой операции проверки при обращении к жесткому диску");
    if (code == 1127) return QString::fromUtf8("Зафиксирован многократный сбой операции при обращении к жесткому диску");
    if (code == 1128) return QString::fromUtf8("При обращении к жесткому диску потребовался сброс контроллера, однако даже его произвести не удалось");
    if (code == 1129) return QString::fromUtf8("Достигнут физический конец ленты");
    if (code == 1130) return QString::fromUtf8("Недостаточно памяти сервера для обработки команды");
    if (code == 1131) return QString::fromUtf8("Обнаружена вероятность возникновения взаимоблокировки");
    if (code == 1132) return QString::fromUtf8("Базовый адрес или смещение имеют неверное выравнивание");
    if (code == 1140) return QString::fromUtf8("Попытка изменения режима питания была заблокирована другим приложением или драйвером");
    if (code == 1141) return QString::fromUtf8("Сбой BIOS при попытке изменения режима питания");
    if (code == 1142) return QString::fromUtf8("Попытка создания большего числа ссылок на файл, чем поддерживается файловой системой");
    if (code == 1150) return QString::fromUtf8("Для указанной программы требуется более поздняя версия Windows");
    if (code == 1151) return QString::fromUtf8("Указанная программа не является программой для Windows или MS-DOS");
    if (code == 1152) return QString::fromUtf8("Запуск более одной копии указанной программы невозможен");
    if (code == 1153) return QString::fromUtf8("Указанная программа была написана для одной из предыдущих версий Windows");
    if (code == 1154) return QString::fromUtf8("Поврежден один из файлов библиотек, необходимых для выполнения данного приложения");
    if (code == 1155) return QString::fromUtf8("Указанному файлу не сопоставлено ни одно приложение для выполнения данной операции");
    if (code == 1156) return QString::fromUtf8("Ошибка при пересылке команды приложению");
    if (code == 1157) return QString::fromUtf8("Не найден один из файлов библиотек, необходимых для выполнения данного приложения");
    if (code == 1158) return QString::fromUtf8("Текущий процесс использовал все системные разрешения по управлению объектами диспетчера окон");
    if (code == 1159) return QString::fromUtf8("Сообщение может быть использовано только с операциями синхронизации");
    if (code == 1160) return QString::fromUtf8("Указанный исходный элемент не имеет носителя");
    if (code == 1161) return QString::fromUtf8("Указанный конечный элемент уже содержит носитель");
    if (code == 1162) return QString::fromUtf8("Указанный элемент не существует");
    if (code == 1163) return QString::fromUtf8("Указанный элемент является частью отсутствующего журнала");
    if (code == 1164) return QString::fromUtf8("Указанный элемент требует повторной инициализации из-за аппаратных ошибок");
    if (code == 1165) return QString::fromUtf8("Устройство требует проведение чистки перед его дальнейшим использованием");
    if (code == 1166) return QString::fromUtf8("Устройство сообщает, что открыта дверца");
    if (code == 1167) return QString::fromUtf8("Устройство не подключено");
    if (code == 1168) return QString::fromUtf8("Элемент не найден");
    if (code == 1169) return QString::fromUtf8("В индексе не найдены соответствия указанному ключу");
    if (code == 1170) return QString::fromUtf8("Указанный набор свойств не существует для объекта");
    if (code == 1171) return QString::fromUtf8("Переданная в GetMouseMovePoints точка не находится в буфере");
    if (code == 1172) return QString::fromUtf8("Служба слежения (на рабочей станции) не запущена");
    if (code == 1173) return QString::fromUtf8("Не удается найти идентификатор тома");
    if (code == 1175) return QString::fromUtf8("Не удается удалить заменяемый файл");
    if (code == 1176) return QString::fromUtf8("Не удается заместить файл. Замещаемый файл сохранил свое первоначальное имя");
    if (code == 1177) return QString::fromUtf8("Не удается заместить файл. Замещаемый файл был переименован с использованием резервного имени");
    if (code == 1178) return QString::fromUtf8("Журнал изменений тома удален");
    if (code == 1179) return QString::fromUtf8("Журнал изменений тома не активен");
    if (code == 1180) return QString::fromUtf8("Файл найден, но это может быть неверный файл");
    if (code == 1181) return QString::fromUtf8("Из журнала удалена запись");
    if (code == 1190) return QString::fromUtf8("Завершение работы системы по расписанию уже запланировано");
    if (code == 1191) return QString::fromUtf8("Невозможно инициировать завершение работы системы, так как компьютер используется другими пользователями");
    if (code == 1200) return QString::fromUtf8("Указано неверное имя устройства");
    if (code == 1201) return QString::fromUtf8("Устройство в настоящее время не подключено, однако сведения о нем в конфигурации присутствуют");
    if (code == 1202) return QString::fromUtf8("Локальное имя устройства уже используется для подключения к другому сетевому ресурсу");
    if (code == 1203) return QString::fromUtf8("Сетевой путь введен неправильно, не существует или сеть в данный момент недоступна. Попробуйте ввести путь заново или обратитесь к сетевому администратору");
    if (code == 1204) return QString::fromUtf8("Имя службы доступа к сети задано неверно");
    if (code == 1205) return QString::fromUtf8("Не удается открыть конфигурацию подключения к сети");
    if (code == 1206) return QString::fromUtf8("Конфигурация подключения к сети повреждена");
    if (code == 1207) return QString::fromUtf8("Перечисление объектов, не являющихся контейнерами, невозможно");
    if (code == 1208) return QString::fromUtf8("Ошибка расширенного типа");
    if (code == 1209) return QString::fromUtf8("Неверный формат имени группы");
    if (code == 1210) return QString::fromUtf8("Неверный формат имени компьютера");
    if (code == 1211) return QString::fromUtf8("Неверный формат имени события");
    if (code == 1212) return QString::fromUtf8("Неверный формат имени домена");
    if (code == 1213) return QString::fromUtf8("Неверный формат имени службы");
    if (code == 1214) return QString::fromUtf8("Неверный формат сетевого имени");
    if (code == 1215) return QString::fromUtf8("Неверный формат имени ресурса");
    if (code == 1216) return QString::fromUtf8("Неверный формат пароля");
    if (code == 1217) return QString::fromUtf8("Неверный формат имени сообщения");
    if (code == 1218) return QString::fromUtf8("Неверный формат задания адреса, по которому отправляется сообщение");
    if (code == 1219) return QString::fromUtf8("Множественное подключение к серверу или к общим ресурсам одним пользователем с использованием более одного имени пользователя не разрешено. Отключите все предыдущие подключения к серверу или общим ресурсам и повторите попытку");
    if (code == 1220) return QString::fromUtf8("Попытка установки сеанса связи с сервером сети, для которого достигнут предел по числу таких сеансов");
    if (code == 1221) return QString::fromUtf8("Имя рабочей группы или домена уже используется другим компьютером в сети");
    if (code == 1222) return QString::fromUtf8("Сеть отсутствует или не запущена");
    if (code == 1223) return QString::fromUtf8("Операция была отменена пользователем");
    if (code == 1224) return QString::fromUtf8("Запрошенную операцию нельзя выполнить для файла с открытой пользователем сопоставленной секцией");
    if (code == 1225) return QString::fromUtf8("Удаленный компьютер отклонил это сетевое подключение");
    if (code == 1226) return QString::fromUtf8("Сетевое подключение было закрыто");
    if (code == 1227) return QString::fromUtf8("Конечной точке сетевого транспорта уже сопоставлен адрес");
    if (code == 1228) return QString::fromUtf8("Конечной точке сети еще не сопоставлен адрес");
    if (code == 1229) return QString::fromUtf8("Попытка выполнить операцию для несуществующего сетевого подключения");
    if (code == 1230) return QString::fromUtf8("Попытка выполнить недопустимую операцию для активного сетевого подключения");
    if (code == 1231) return QString::fromUtf8("Сетевая папка недоступна. За информацией о разрешении проблем в сети обратитесь к справочной системе Windows");
    if (code == 1232) return QString::fromUtf8("Сетевая папка недоступна. За информацией о разрешении проблем в сети обратитесь к справочной системе Windows");
    if (code == 1233) return QString::fromUtf8("Сетевая папка недоступна. За информацией о разрешении проблем в сети обратитесь к справочной системе Windows");
    if (code == 1234) return QString::fromUtf8("На конечном звене нужной сети удаленной системы не запущена ни одна служба");
    if (code == 1235) return QString::fromUtf8("Запрос был прерван");
    if (code == 1236) return QString::fromUtf8("Подключение к сети было разорвано локальной системой");
    if (code == 1237) return QString::fromUtf8("Не удалось завершить операцию.  Следует повторить ее");
    if (code == 1238) return QString::fromUtf8("Подключение к серверу невозможно, так как для данной учетной записи уже достигнут предел по числу одновременных подключений");
    if (code == 1239) return QString::fromUtf8("Попытка входа в сеть в непредусмотренное для этой учетной записи время дня");
    if (code == 1240) return QString::fromUtf8("Данная учетная запись не может быть использована для входа в сеть с этой станции");
    if (code == 1241) return QString::fromUtf8("Нельзя использовать сетевой адрес для данной операции");
    if (code == 1242) return QString::fromUtf8("Служба уже зарегистрирована");
    if (code == 1243) return QString::fromUtf8("Указанная служба не существует");
    if (code == 1244) return QString::fromUtf8("Запрошенная операция не была выполнена, так как пользователь не зарегистрирован");
    if (code == 1245) return QString::fromUtf8("Запрошенная операция не была выполнена, так как пользователь не выполнил вход в сеть. Указанная служба не существует");
    if (code == 1246) return QString::fromUtf8("Требуется продолжить выполняющуюся операцию");
    if (code == 1247) return QString::fromUtf8("Попытка выполнить операцию инициализации, которая уже проведена");
    if (code == 1248) return QString::fromUtf8("Больше локальных устройств не найдено");
    if (code == 1249) return QString::fromUtf8("Указанный сайт не существует");
    if (code == 1250) return QString::fromUtf8("Контроллер домена с указанным именем уже существует");
    if (code == 1251) return QString::fromUtf8("Эта операция поддерживается только при наличии подключения к серверу");
    if (code == 1252) return QString::fromUtf8("Основной модуль групповой политики должен вызвать расширение даже в случае отсутствия изменений");
    if (code == 1253) return QString::fromUtf8("Выбранный пользователь не имеет допустимого профиля");
    if (code == 1254) return QString::fromUtf8("Эта операция не поддерживается на Windows Server 2003 for Small Business Server");
    if (code == 1255) return QString::fromUtf8("Идет завершение работы компьютера-сервера");
    if (code == 1256) return QString::fromUtf8("Удаленная система недоступна. За информацией о разрешении проблем в сети, обратитесь к справочной системе Windows");
    if (code == 1257) return QString::fromUtf8("Был указан идентификатор безопасности не из того домена");
    if (code == 1258) return QString::fromUtf8("В указанном идентификаторе безопасности отсутствует компонент для домена");
    if (code == 1259) return QString::fromUtf8("Окно AppHelp закрыто, из-за чего приложение не было запущено");
    if (code == 1260) return QString::fromUtf8("Эта программа заблокирована групповой политикой. За дополнительными сведениями обращайтесь к системному администратору");
    if (code == 1261) return QString::fromUtf8("Попытка программы использовать неправильное значение регистра. Обычно это вызвано неинициализированным регистром");
    if (code == 1262) return QString::fromUtf8("Общий ресурс недоступен или не существует");
    if (code == 1263) return QString::fromUtf8("Ошибка протокола Kerberos при проверке сертификата KDC во время входа в систему со смарт-картой. Дополнительные сведения см. в журнале системных событий");
    if (code == 1264) return QString::fromUtf8("Ошибка протокола Kerberos при попытке использовать подсистему для смарт-карт");
    if (code == 1265) return QString::fromUtf8("Системой обнаружена попытка нарушения безопасности. Проверьте наличие доступа к серверу, через который был выполнен вход");
    if (code == 1271) return QString::fromUtf8("Компьютер заблокирован и не может завершить работу без режима принудительного завершения");
    if (code == 1273) return QString::fromUtf8("Определенный в приложении ответный вызов вернул неверные данные");
    if (code == 1274) return QString::fromUtf8("Система групповой политики должна вызывать расширения в синхронном, не фоновом режиме обновления");
    if (code == 1275) return QString::fromUtf8("Загрузка драйвера была заблокирована");
    if (code == 1276) return QString::fromUtf8("Библиотека, на которую ссылается модуль, не является библиотекой динамической компоновки (DLL) или исполняемым модулем");
    if (code == 1277) return QString::fromUtf8("Windows не удается запустить эту программу, поскольку она отключена");
    if (code == 1278) return QString::fromUtf8("Windows не удается открыть эту программу, поскольку система учета лицензий изменена или повреждена");
    if (code == 1279) return QString::fromUtf8("Неудача при восстановлении транзакции");
    if (code == 1280) return QString::fromUtf8("Текущий поток уже преобразован в нить");
    if (code == 1281) return QString::fromUtf8("Текущий поток уже преобразован из нити");
    if (code == 1282) return QString::fromUtf8("Обнаружено переполнение стекового буфера в данном приложении. Это переполнение может позволить злоумышленнику получить управление над данным приложением");
    if (code == 1283) return QString::fromUtf8("В одном из параметров задано больше данных, чем эта функция может обработать");
    if (code == 1284) return QString::fromUtf8("Не удалось выполнить операцию над объектом отладки, поскольку этот объект находится в процессе удаления");
    if (code == 1285) return QString::fromUtf8("Не удалось загрузить с задержкой библиотеку DLL или получить из нее адрес функции");
    if (code == 1287) return QString::fromUtf8("Недостаточно сведений для установки причины сбоя");
    if (code == 1288) return QString::fromUtf8("В динамическую функцию C передан неверный параметр");
    if (code == 1289) return QString::fromUtf8("Операция выполнена за пределами допустимой длины данных файла");
    if (code == 1290) return QString::fromUtf8("Не удалось запустить эту службу, так как одна или несколько служб одного процесса имеют несовместимый параметр типа SID службы. Служба с ограниченным типом SID может сосуществовать в одном и том же процессе только с другими службами с ограниченным типом SID. Если тип SID для этой службы только что настроен, необходимо перезапустить хост-процесс, чтобы запустить эту службу");
    if (code == 1291) return QString::fromUtf8("Процесс, использующий драйвер для этого устройства, прерван");
    if (code == 1292) return QString::fromUtf8("Операция попыталась превысить установленный предел");
    if (code == 1293) return QString::fromUtf8("Целевой процесс или процесс целевого потока является защищенным");
    if (code == 1294) return QString::fromUtf8("Клиент уведомлений службы значительно отстает от текущего состояния служб в системе");
    if (code == 1295) return QString::fromUtf8("Требуемая операция с файлами завершилась сбоем из-за превышения квоты на использование места на диске");
    if (code == 1296) return QString::fromUtf8("Требуемая операция с файлами завершилась сбоем, так как политика хранилища блокирует этот тип файлов. За дополнительными сведениями обратитесь к системному администратору");
    if (code == 1297) return QString::fromUtf8("Права, необходимые службе для правильной работы, не существуют в конфигурации учетной записи службы. ");
    if (code == 1298) return QString::fromUtf8("Поток, задействованный в данной операции, не отвечает");
    if (code == 1299) return QString::fromUtf8("Указанный идентификатор безопасности нельзя назначить в качестве метки объекта");
    if (code == 1300) return QString::fromUtf8("Вызывающая сторона не обладает всеми необходимыми правами доступа");
    if (code == 1301) return QString::fromUtf8("Некоторые соответствия между именами пользователей и идентификаторами безопасности не были установлены");
    if (code == 1302) return QString::fromUtf8("Системные квоты для данной учетной записи не установлены");
    if (code == 1303) return QString::fromUtf8("Ключ шифрования недоступен. Возвращен общедоступный ключ");
    if (code == 1304) return QString::fromUtf8("Пароль слишком сложен и не может быть преобразован в пароль LAN Manager.  Вместо пароля LAN Manager была возвращена пустая строка");
    if (code == 1305) return QString::fromUtf8("Уровень редакции неизвестен");
    if (code == 1306) return QString::fromUtf8("Два уровня редакции являются несовместимыми");
    if (code == 1307) return QString::fromUtf8("Этот идентификатор безопасности не может быть назначен владельцем этого объекта");
    if (code == 1308) return QString::fromUtf8("Этот идентификатор безопасности не может быть назначен основной группой объекта");
    if (code == 1309) return QString::fromUtf8("Предпринята попытка использования элемента олицетворения потоком команд, который в данное время не олицетворяет клиента");
    if (code == 1310) return QString::fromUtf8("Группу нельзя отключить");
    if (code == 1311) return QString::fromUtf8("Отсутствуют серверы, которые могли бы обработать запрос на вход в сеть");
    if (code == 1312) return QString::fromUtf8("Указанный сеанс работы не существует.  Возможно, он уже  завершен");
    if (code == 1313) return QString::fromUtf8("Указанная привилегия не существует");
    if (code == 1314) return QString::fromUtf8("Клиент не обладает требуемыми правами");
    if (code == 1315) return QString::fromUtf8("Указанное имя не является корректным именем пользователя");
    if (code == 1316) return QString::fromUtf8("Указанная учетная запись уже существует");
    if (code == 1317) return QString::fromUtf8("Указанная учетная запись не существует");
    if (code == 1318) return QString::fromUtf8("Указанная группа уже существует");
    if (code == 1319) return QString::fromUtf8("Указанная группа не существует");
    if (code == 1320) return QString::fromUtf8("Указанный пользователь уже является членом заданной группы, либо группа не может быть удалена, так как содержит как минимум одного пользователя");
    if (code == 1321) return QString::fromUtf8("Указанный пользователь не является членом заданной группы");
    if (code == 1322) return QString::fromUtf8("Последнюю учетную запись из группы администраторов нельзя отключить или удалить");
    if (code == 1323) return QString::fromUtf8("Не удается обновить пароль.  Текущий пароль был задан неверно");
    if (code == 1324) return QString::fromUtf8("Не удается обновить пароль.  Новый пароль содержит недопустимые символы");
    if (code == 1325) return QString::fromUtf8("Не удается обновить пароль. Введенный пароль не обеспечивает требований домена к длине пароля, его сложности или истории обновления");
    if (code == 1326) return QString::fromUtf8("Вход в систему не произведен: имя пользователя или пароль не опознаны");
    if (code == 1327) return QString::fromUtf8("Вход в систему не произведен: имеются ограничения, связанные с учетной записью. Возможные причины: запрещены пустые пароли, ограничено время входа или применены ограничения групповой политики");
    if (code == 1328) return QString::fromUtf8("Вход в систему не произведен: учетная запись не предусматривает возможность входа в данное время");
    if (code == 1329) return QString::fromUtf8("Вход в систему не произведен: пользователю не предоставлено право работы на этом компьютере");
    if (code == 1330) return QString::fromUtf8("Вход в систему не произведен: срок действия указанного пароля истек");
    if (code == 1331) return QString::fromUtf8("Вход в систему не произведен: учетная запись в настоящее время отключена");
    if (code == 1332) return QString::fromUtf8("Сопоставление между именами пользователей и идентификаторами безопасности не было произведено");
    if (code == 1333) return QString::fromUtf8("Одновременно запрошено слишком много локальных кодов пользователей");
    if (code == 1334) return QString::fromUtf8("Дополнительные локальные коды пользователей недоступны");
    if (code == 1335) return QString::fromUtf8("Часть \"subauthority\" идентификатора безопасности недействительна для этого конкретного использования");
    if (code == 1336) return QString::fromUtf8("Список управления доступом (ACL) имеет неверную структуру");
    if (code == 1337) return QString::fromUtf8("Идентификатор безопасности имеет неверную структуру");
    if (code == 1338) return QString::fromUtf8("Дескриптор защиты данных имеет неверную структуру");
    if (code == 1340) return QString::fromUtf8("Не удается построить список управления доступом (ACL) или элемент этого списка (ACE)");
    if (code == 1341) return QString::fromUtf8("Сервер в настоящее время отключен");
    if (code == 1342) return QString::fromUtf8("Сервер в настоящее время включен");
    if (code == 1343) return QString::fromUtf8("Указано недопустимое значение для защитного кода");
    if (code == 1344) return QString::fromUtf8("Недостаточно памяти для обновления сведений, относящихся к защите данных");
    if (code == 1345) return QString::fromUtf8("Указанные атрибуты неверны или несовместимы с атрибутами группы в целом");
    if (code == 1346) return QString::fromUtf8("Требуемый уровень олицетворения не обеспечен, или обеспеченный уровень неверен");
    if (code == 1347) return QString::fromUtf8("Не удается открыть токен безопасности анонимного уровня");
    if (code == 1348) return QString::fromUtf8("Запрошен неправильный класс сведений для проверки");
    if (code == 1349) return QString::fromUtf8("Тип токена не соответствует выполняемой операции");
    if (code == 1350) return QString::fromUtf8("Операция, связанная с защитой данных, не может быть выполнена для незащищенного объекта");
    if (code == 1351) return QString::fromUtf8("Не удалось получить данные о конфигурации от контроллера домена. Либо он отключен, либо к нему нет доступа");
    if (code == 1352) return QString::fromUtf8("Диспетчер защиты (SAM) или локальный сервер (LSA) не смог выполнить требуемую операцию");
    if (code == 1353) return QString::fromUtf8("Состояние домена не позволило выполнить нужную операцию");
    if (code == 1354) return QString::fromUtf8("Операция разрешена только для основного контроллера домена");
    if (code == 1355) return QString::fromUtf8("Указанный домен не существует или к нему невозможно подключиться");
    if (code == 1356) return QString::fromUtf8("Указанный домен уже существует");
    if (code == 1357) return QString::fromUtf8("Была сделана попытка превысить предел на число доменов, обслуживаемых одним сервером");
    if (code == 1358) return QString::fromUtf8("Не удается завершить требуемую операцию из-за сбоев в данных на диске или неустранимой ошибки носителя");
    if (code == 1359) return QString::fromUtf8("Внутренняя ошибка");
    if (code == 1360) return QString::fromUtf8("Универсальные типы доступа содержатся в маске доступа, которая должна была уже быть связана с нестандартными типами");
    if (code == 1361) return QString::fromUtf8("Дескриптор защиты имеет неверный формат");
    if (code == 1362) return QString::fromUtf8("Выполнение запрошенной операции разрешено только для процессов входа в систему. Вызывающий процесс не зарегистрирован как процесс входа в систему");
    if (code == 1363) return QString::fromUtf8("Запуск нового сеанса работы с уже использующимся кодом невозможен");
    if (code == 1364) return QString::fromUtf8("Пакет проверки подлинности не опознан");
    if (code == 1365) return QString::fromUtf8("Текущее состояние сеанса входа в систему не подходит для запрошенной операции");
    if (code == 1366) return QString::fromUtf8("Код сеанса входа в систему уже используется");
    if (code == 1367) return QString::fromUtf8("Режим входа в систему задан неверно");
    if (code == 1368) return QString::fromUtf8("Невозможно обеспечить олицетворение через именованный канал до тех пор, пока данные не считаны из этого канала");
    if (code == 1369) return QString::fromUtf8("Операция несовместима с состоянием транзакции для ветви реестра");
    if (code == 1370) return QString::fromUtf8("База данных защиты повреждена");
    if (code == 1371) return QString::fromUtf8("Операция не предназначена для встроенных учетных записей");
    if (code == 1372) return QString::fromUtf8("Операция не предназначена для встроенной специальной группы");
    if (code == 1373) return QString::fromUtf8("Операция не предназначена для встроенного специального пользователя");
    if (code == 1374) return QString::fromUtf8("Нельзя удалить пользователя из группы, так как она является для него основной");
    if (code == 1375) return QString::fromUtf8("Токен уже используется в качестве основного токена");
    if (code == 1376) return QString::fromUtf8("Указанная локальная группа не существует");
    if (code == 1377) return QString::fromUtf8("Указанная учетная запись не входит в эту группу");
    if (code == 1378) return QString::fromUtf8("Указанная учетная запись уже входит в эту группу");
    if (code == 1379) return QString::fromUtf8("Указанная локальная группа уже существует");
    if (code == 1380) return QString::fromUtf8("Вход в систему не произведен: выбранный режим входа для данного пользователя на этом компьютере не предусмотрен");
    if (code == 1381) return QString::fromUtf8("Достигнут предел по количеству защищенных данных/ресурсов для одной системы");
    if (code == 1382) return QString::fromUtf8("Длина защищенных данных превышает максимально возможную");
    if (code == 1383) return QString::fromUtf8("Локальная база данных защиты содержит внутренние несоответствия");
    if (code == 1384) return QString::fromUtf8("При попытке входа в систему контекст безопасности пользователя накопил слишком много идентификаторов безопасности");
    if (code == 1385) return QString::fromUtf8("Вход в систему не произведен: выбранный режим входа для данного пользователя на этом компьютере не предусмотрен");
    if (code == 1386) return QString::fromUtf8("Для смены пароля необходим зашифрованный пароль");
    if (code == 1387) return QString::fromUtf8("Не удалось добавить или удалить члена локальной группы, так как он не существует");
    if (code == 1388) return QString::fromUtf8("Добавление нового члена в локальную группу невозможно, так как он имеет неправильный тип учетной записи");
    if (code == 1389) return QString::fromUtf8("Задано слишком много идентификаторов безопасности");
    if (code == 1390) return QString::fromUtf8("Для смены пароля необходим зашифрованный пароль");
    if (code == 1391) return QString::fromUtf8("Список управления доступом (ACL) не содержит наследуемых компонентов");
    if (code == 1392) return QString::fromUtf8("Файл или папка повреждены. Чтение невозможно");
    if (code == 1393) return QString::fromUtf8("Структура диска повреждена. Чтение невозможно");
    if (code == 1394) return QString::fromUtf8("Для заданного сеанса входа в систему отсутствует раздел сеанса пользователя");
    if (code == 1395) return QString::fromUtf8("Для вызываемой службы действует лицензия на определенное число подключений. В настоящее время создание дополнительных подключений к службе невозможно, так как уже существует максимально допустимое число подключений");
    if (code == 1396) return QString::fromUtf8("Вход в систему не произведен: конечная учетная запись указана неверно");
    if (code == 1397) return QString::fromUtf8("Ошибка взаимной проверки подлинности. Пароль сервера на контроллере домена устарел");
    if (code == 1398) return QString::fromUtf8("Существует разница настройки времени и/или даты между клиентом и сервером");
    if (code == 1399) return QString::fromUtf8("Эта операция не может быть выполнена над текущим доменом");
    if (code == 1400) return QString::fromUtf8("Недопустимый дескриптор окна");
    if (code == 1401) return QString::fromUtf8("Неверный дескриптор меню");
    if (code == 1402) return QString::fromUtf8("Неверный дескриптор указателя");
    if (code == 1403) return QString::fromUtf8("Неверный дескриптор таблицы сочетаний клавиш");
    if (code == 1404) return QString::fromUtf8("Неверный дескриптор обработчика");
    if (code == 1405) return QString::fromUtf8("Неверный дескриптор многооконной структуры");
    if (code == 1406) return QString::fromUtf8("Не удается создать дочернее окно верхнего уровня");
    if (code == 1407) return QString::fromUtf8("Не удается найти класс окна");
    if (code == 1408) return QString::fromUtf8("Окно принадлежит другому потоку команд");
    if (code == 1409) return QString::fromUtf8("Назначенная клавиша уже зарегистрирована");
    if (code == 1410) return QString::fromUtf8("Класс уже существует");
    if (code == 1411) return QString::fromUtf8("Класс не существует");
    if (code == 1412) return QString::fromUtf8("Не все окна, принадлежащие данному классу, закрыты");
    if (code == 1413) return QString::fromUtf8("Неверный индекс");
    if (code == 1414) return QString::fromUtf8("Неверный дескриптор значка");
    if (code == 1415) return QString::fromUtf8("Используются ключевые слова, относящиеся к окнам диалога типа private");
    if (code == 1416) return QString::fromUtf8("Идентификатор списка не найден");
    if (code == 1417) return QString::fromUtf8("Подстановочные знаки не обнаружены");
    if (code == 1418) return QString::fromUtf8("Буфер обмена для потока команд не открыт");
    if (code == 1419) return QString::fromUtf8("Назначенная клавиша не зарегистрирована");
    if (code == 1420) return QString::fromUtf8("Окно не является окном диалога");
    if (code == 1421) return QString::fromUtf8("Не найден идентификатор элемента управления");
    if (code == 1422) return QString::fromUtf8("Неверное сообщение для поля со списком (поле не имеет области ввода)");
    if (code == 1423) return QString::fromUtf8("Окно не является полем со списком");
    if (code == 1424) return QString::fromUtf8("Высота не может превышать 256");
    if (code == 1425) return QString::fromUtf8("Неверный дескриптор контекста устройства (DC)");
    if (code == 1426) return QString::fromUtf8("Неверный тип процедуры обработки");
    if (code == 1427) return QString::fromUtf8("Неверная процедура обработки");
    if (code == 1428) return QString::fromUtf8("Невозможно установить нелокальный обработчик без дескриптора модуля");
    if (code == 1429) return QString::fromUtf8("Эта процедура обработки может быть только глобальной");
    if (code == 1430) return QString::fromUtf8("Процедура для обработки журнала уже установлена");
    if (code == 1431) return QString::fromUtf8("Процедура обработки не установлена");
    if (code == 1432) return QString::fromUtf8("Неправильное сообщение для простого списка");
    if (code == 1433) return QString::fromUtf8("Параметр LB_SETCOUNT отправлен списку неправильного типа");
    if (code == 1434) return QString::fromUtf8("Список не входит в порядок обхода элементов управления");
    if (code == 1435) return QString::fromUtf8("Нельзя уничтожить объект, созданный другим потоком команд");
    if (code == 1436) return QString::fromUtf8("Дочерние окна не могут иметь меню");
    if (code == 1437) return QString::fromUtf8("Окно не имеет системного меню");
    if (code == 1438) return QString::fromUtf8("Неверный тип окна сообщения");
    if (code == 1439) return QString::fromUtf8("Неверный системный параметр (SPI_*)");
    if (code == 1440) return QString::fromUtf8("Экран уже заблокирован");
    if (code == 1441) return QString::fromUtf8("Дескрипторы всех окон, входящих в многооконную структуру, должны иметь общий родительский дескриптор");
    if (code == 1442) return QString::fromUtf8("Окно не является дочерним");
    if (code == 1443) return QString::fromUtf8("Неверная команда GW_*");
    if (code == 1444) return QString::fromUtf8("Неверный идентификатор потока команд");
    if (code == 1445) return QString::fromUtf8("Невозможно обработать сообщение от окна, не являющегося компонентом многооконного (MDI) интерфейса");
    if (code == 1446) return QString::fromUtf8("Всплывающее меню уже активно");
    if (code == 1447) return QString::fromUtf8("Окно не имеет полос прокрутки");
    if (code == 1448) return QString::fromUtf8("Диапазон значений для полосы прокрутки не может выходить за пределы MAXLONG");
    if (code == 1449) return QString::fromUtf8("Невозможно отобразить или удалить окно указанным способом");
    if (code == 1450) return QString::fromUtf8("Недостаточно системных ресурсов для завершения операции");
    if (code == 1451) return QString::fromUtf8("Недостаточно системных ресурсов для завершения операции");
    if (code == 1452) return QString::fromUtf8("Недостаточно системных ресурсов для завершения операции");
    if (code == 1453) return QString::fromUtf8("Недостаточная квота для завершения операции");
    if (code == 1454) return QString::fromUtf8("Недостаточная квота для завершения операции");
    if (code == 1455) return QString::fromUtf8("Файл подкачки слишком мал для завершения операции");
    if (code == 1456) return QString::fromUtf8("Не найден пункт меню");
    if (code == 1457) return QString::fromUtf8("Недопустимая раскладка клавиатуры");
    if (code == 1458) return QString::fromUtf8("Запрещенный тип ловушки");
    if (code == 1459) return QString::fromUtf8("Эта операция требует интерактивного оконного терминала");
    if (code == 1460) return QString::fromUtf8("Возврат из операции произошел из-за превышения времени ожидания");
    if (code == 1461) return QString::fromUtf8("Недопустимый обработчик монитора");
    if (code == 1462) return QString::fromUtf8("Неправильный размер аргумента");
    if (code == 1463) return QString::fromUtf8("Символическая ссылка не может быть загружена, так как ее тип отключен");
    if (code == 1464) return QString::fromUtf8("Это приложение не поддерживает текущую операцию или символические ссылки");
    if (code == 1465) return QString::fromUtf8("Не удалось выполнить разбор запрошенных данных XML");
    if (code == 1466) return QString::fromUtf8("Ошибка при обработке цифровой подписи XML");
    if (code == 1467) return QString::fromUtf8("Необходимо перезапустить данное приложение");
    if (code == 1468) return QString::fromUtf8("Вызывающая сторона сделала запрос на подключение в неверном сегменте маршрутизации");
    if (code == 1469) return QString::fromUtf8("Сбой AuthIP при попытке подключения к удаленному узлу");
    if (code == 1470) return QString::fromUtf8("Недостаточно ресурсов NVRAM для завершения запрошенной операции. Может потребоваться перезагрузка");
    if (code == 1500) return QString::fromUtf8("Журнал событий поврежден");
    if (code == 1501) return QString::fromUtf8("Не удается найти файл журнала событий. Служба протоколирования событий не запущена");
    if (code == 1502) return QString::fromUtf8("Журнал событий переполнен");
    if (code == 1503) return QString::fromUtf8("Журнал событий был изменен в промежутке между двумя операциями чтения");
    if (code == 1550) return QString::fromUtf8("Указано неверное имя задачи");
    if (code == 1551) return QString::fromUtf8("Указан неверный индекс задачи");
    if (code == 1552) return QString::fromUtf8("Указанный поток уже участвует в задаче");
    if (code == 1601) return QString::fromUtf8("Не удалось получить доступ к службе установщика Windows. Возможно, не установлен установщик Windows. Обратитесь за помощью в службу поддержки");
    if (code == 1602) return QString::fromUtf8("Установка, прерванная пользователем");
    if (code == 1603) return QString::fromUtf8("В процессе установки произошла неисправимая ошибка");
    if (code == 1604) return QString::fromUtf8("Установка приостановлена, но не завершена");
    if (code == 1605) return QString::fromUtf8("Это действие допускается только для установленных продуктов");
    if (code == 1606) return QString::fromUtf8("Идентификатор функции не зарегистрирован");
    if (code == 1607) return QString::fromUtf8("Идентификатор компонента не зарегистрирован");
    if (code == 1608) return QString::fromUtf8("Неизвестное свойство");
    if (code == 1609) return QString::fromUtf8("Обработчик находится в недопустимом состоянии");
    if (code == 1610) return QString::fromUtf8("Данные настройки для этого продукта повреждены. Обратитесь в службу поддержки");
    if (code == 1611) return QString::fromUtf8("Отсутствует квалификатор компонента");
    if (code == 1612) return QString::fromUtf8("Ресурс с установочными файлами для этого продукта недоступен. Проверьте существование ресурса и доступ к нему");
    if (code == 1613) return QString::fromUtf8("Этот установочный пакет не может быть развернут службой установки Windows. Нужно установить пакет обновления Windows, содержащий обновленную версию службы установки Windows");
    if (code == 1614) return QString::fromUtf8("Продукт удален из системы");
    if (code == 1615) return QString::fromUtf8("Недопустимый или не поддерживаемый синтаксис запроса SQL");
    if (code == 1616) return QString::fromUtf8("Поле записи отсутствует");
    if (code == 1617) return QString::fromUtf8("Это устройство было удалено");
    if (code == 1618) return QString::fromUtf8("Уже запущена другая копия процесса установки. Завершите уже начатую установку, прежде чем запускать новую");
    if (code == 1619) return QString::fromUtf8("Невозможно открыть этот установочный пакет. Проверьте, что пакет существует и к нему есть доступ, или обратитесь к поставщику программы, чтобы убедиться в правильности этого установочного пакета Windows");
    if (code == 1620) return QString::fromUtf8("Невозможно открыть этот установочный пакет. Обратитесь к поставщику программы, чтобы убедиться в правильности этого установочного пакета Windows");
    if (code == 1621) return QString::fromUtf8("Произошла ошибка при запуске пользовательского интерфейса службы установки Windows. Обратитесь в службу поддержки вашей организации");
    if (code == 1622) return QString::fromUtf8("Ошибка открытия файла журнала установки. Проверьте наличие данного файла журнала и прав на запись в журнале");
    if (code == 1623) return QString::fromUtf8("Язык этого установочного пакета не поддерживается данной системой");
    if (code == 1624) return QString::fromUtf8("Ошибка применения преобразований. Проверьте правильности путей указанных преобразований");
    if (code == 1625) return QString::fromUtf8("Установка запрещена на основании системной политики. Обратитесь к системному администратору");
    if (code == 1626) return QString::fromUtf8("Выполнение функции невозможно");
    if (code == 1627) return QString::fromUtf8("Ошибка исполнения функции");
    if (code == 1628) return QString::fromUtf8("Указана недопустимая или неизвестная таблица");
    if (code == 1629) return QString::fromUtf8("Получены данные неверного типа");
    if (code == 1630) return QString::fromUtf8("Данные этого типа не поддерживаются");
    if (code == 1631) return QString::fromUtf8("Ошибка запуска службы установки Windows. Обратитесь в службу поддержки вашей организации");
    if (code == 1632) return QString::fromUtf8("Временная папка переполнена или к ней нет доступа. Освободите место на устройстве  или убедитесь в возможности записи во временную папку");
    if (code == 1633) return QString::fromUtf8("Этот установочный пакет не поддерживается этим типом процессора.  Обратитесь за помощью к поставщику пакета");
    if (code == 1634) return QString::fromUtf8("Данный компонент не используется на этом компьютере");
    if (code == 1635) return QString::fromUtf8("Не удалось открыть этот пакет исправлений. Проверьте, что пакет существует и к нему есть доступ, или обратитесь к поставщику пакета, чтобы удостовериться в том, что этот пакет является правильным пакетом исправлений Windows");
    if (code == 1636) return QString::fromUtf8("Не удалось открыть этот пакет исправлений. Обратитесь к поставщику пакета, чтобы удостовериться в том, что этот пакет является правильным пакетом исправлений Windows");
    if (code == 1637) return QString::fromUtf8("Этот пакет исправлений не может быть обработан имеющейся службой установки Windows. Следует установить пакет обновления Windows, содержащий новую версию службы установки Windows");
    if (code == 1638) return QString::fromUtf8("Уже установлена другая версия этого продукта. Продолжение установки невозможно. Для настройки конфигурации или удаления существующей версии продукта используйте значок \"Установка и удаление программ\" на панели управления ");
    if (code == 1639) return QString::fromUtf8("Недопустимый аргумент командной строки. За справкой по использованию командной строки обратитесь к пакету SDK установщика Windows ");
    if (code == 1640) return QString::fromUtf8("Только администраторы обладают правами на добавление, удаление или настройку сервера в течение работы удаленного сеанса служб терминалов. Обратитесь за помощью к системному администратору");
    if (code == 1641) return QString::fromUtf8("Требуемая операция успешно завершена. Чтобы сделанные изменения возымели силу, система будет перезагружена, ");
    if (code == 1642) return QString::fromUtf8("Пакет обновления не может быть установлен при помощи установщика Windows, поскольку обновляемая программа либо утеряна, либо пакет обновления предназначен для другой версии этой программы. Проверьте наличие этой программы на компьютере и правильность номера версии пакета обновления");
    if (code == 1643) return QString::fromUtf8("Пакеты обновления не допускаются политикой для приложений");
    if (code == 1644) return QString::fromUtf8("Перенастройки не допускаются политикой для приложений");
    if (code == 1645) return QString::fromUtf8("Установщик Windows не допускает установку через подключение к удаленному рабочему столу");
    if (code == 1646) return QString::fromUtf8("Отмена установки пакета обновления не поддерживается");
    if (code == 1647) return QString::fromUtf8("Обновление не применяется для этого продукта");
    if (code == 1648) return QString::fromUtf8("Не удается найти допустимую последовательность для набора обновлений");
    if (code == 1649) return QString::fromUtf8("Удаление обновления запрещено политикой");
    if (code == 1650) return QString::fromUtf8("Недопустимые XML-данные обновления");
    if (code == 1651) return QString::fromUtf8("Установщик Windows не разрешает применять обновления к управляемым объявленным продуктам. Для применения обновления должен быть установлен по крайней мере один из компонентов продукта");
    if (code == 1652) return QString::fromUtf8("Служба установки Windows недоступна в безопасном режиме. Повторите попытку, когда компьютер будет работать не в безопасном режиме, либо попытайтесь восстановить предыдущее рабочее состояние системы с помощью программы  \"Восстановление системы\"");
    if (code == 1653) return QString::fromUtf8("Возникло исключение FailFast. Обработчики исключения вызваны не будут, а процесс будет немедленно завершен");
    if (code == 1700) return QString::fromUtf8("Неправильная строка привязки");
    if (code == 1701) return QString::fromUtf8("Неверный тип дескриптора привязки");
    if (code == 1702) return QString::fromUtf8("Недопустимый дескриптор привязки");
    if (code == 1703) return QString::fromUtf8("Последовательность протокола RPC не поддерживается");
    if (code == 1704) return QString::fromUtf8("Некорректная последовательность протокола RPC");
    if (code == 1705) return QString::fromUtf8("Неверный универсальный уникальный идентификатор строки (UUID)");
    if (code == 1706) return QString::fromUtf8("Неправильный формат конечной точки");
    if (code == 1707) return QString::fromUtf8("Сетевой адрес задан неправильно");
    if (code == 1708) return QString::fromUtf8("Не найдена конечная точка");
    if (code == 1709) return QString::fromUtf8("Неправильное значение времени ожидания");
    if (code == 1710) return QString::fromUtf8("Универсальный уникальный идентификатор объекта (UUID) не найден");
    if (code == 1711) return QString::fromUtf8("Универсальный уникальный идентификатор объекта (UUID) уже зарегистрирован");
    if (code == 1712) return QString::fromUtf8("Универсальный уникальный идентификатор типа (UUID) уже зарегистрирован");
    if (code == 1713) return QString::fromUtf8("Сервер RPC уже находится в режиме приема команд");
    if (code == 1714) return QString::fromUtf8("Не зарегистрирована ни одна последовательность протоколов");
    if (code == 1715) return QString::fromUtf8("Сервер RPC не принимает команды");
    if (code == 1716) return QString::fromUtf8("Неизвестный тип диспетчера");
    if (code == 1717) return QString::fromUtf8("Неизвестный интерфейс");
    if (code == 1718) return QString::fromUtf8("Привязки отсутствуют");
    if (code == 1719) return QString::fromUtf8("Последовательности протоколов отсутствуют");
    if (code == 1720) return QString::fromUtf8("Создание конечной точки невозможно");
    if (code == 1721) return QString::fromUtf8("Недостаточно ресурсов для завершения операции");
    if (code == 1722) return QString::fromUtf8("Сервер RPC недоступен");
    if (code == 1723) return QString::fromUtf8("Сервер RPC занят и не может завершить операцию");
    if (code == 1724) return QString::fromUtf8("Неверные параметры сети");
    if (code == 1725) return QString::fromUtf8("Данный поток команд не содержит активных удаленных вызовов процедур");
    if (code == 1726) return QString::fromUtf8("Сбой при удаленном вызове процедуры");
    if (code == 1727) return QString::fromUtf8("Сбой при удаленном вызове процедуры. Вызов не произведен");
    if (code == 1728) return QString::fromUtf8("Ошибка протокола удаленного вызова процедур (RPC)");
    if (code == 1729) return QString::fromUtf8("Доступ к прокси-серверу запрещен");
    if (code == 1730) return QString::fromUtf8("Синтаксис передачи не поддерживается сервером RPC");
    if (code == 1732) return QString::fromUtf8("Тип универсального уникального идентификатора (UUID) не поддерживается");
    if (code == 1733) return QString::fromUtf8("Неверный тег");
    if (code == 1734) return QString::fromUtf8("Неверные границы массива");
    if (code == 1735) return QString::fromUtf8("Привязка не содержит имени элемента");
    if (code == 1736) return QString::fromUtf8("Имя имеет неправильный синтаксис");
    if (code == 1737) return QString::fromUtf8("Синтаксис имени не поддерживается");
    if (code == 1739) return QString::fromUtf8("Отсутствуют сетевые адреса, позволяющие сконструировать универсальный уникальный идентификатор (UUID)");
    if (code == 1740) return QString::fromUtf8("Эта конечная точка дублирует уже существующую");
    if (code == 1741) return QString::fromUtf8("Неизвестный тип проверки подлинности");
    if (code == 1742) return QString::fromUtf8("Предельное число вызовов слишком мало");
    if (code == 1743) return QString::fromUtf8("Слишком длинная строка");
    if (code == 1744) return QString::fromUtf8("Не найдена последовательность протокола RPC");
    if (code == 1745) return QString::fromUtf8("Номер процедуры выходит за допустимые границы");
    if (code == 1746) return QString::fromUtf8("Привязка не содержит никаких сведений, относящихся к проверке подлинности");
    if (code == 1747) return QString::fromUtf8("Неизвестная служба проверки подлинности");
    if (code == 1748) return QString::fromUtf8("Неизвестный уровень проверки подлинности");
    if (code == 1749) return QString::fromUtf8("Неправильный контекст безопасности");
    if (code == 1750) return QString::fromUtf8("Неизвестная служба авторизации");
    if (code == 1751) return QString::fromUtf8("Недопустимый элемент");
    if (code == 1752) return QString::fromUtf8("Конечный узел (сервер) не может выполнить операцию");
    if (code == 1753) return QString::fromUtf8("В системе отображения конечных точек не осталось доступных конечных точек");
    if (code == 1754) return QString::fromUtf8("Ни один интерфейс не экспортирован");
    if (code == 1755) return QString::fromUtf8("Имя элемента задано не полностью");
    if (code == 1756) return QString::fromUtf8("Неправильная версия");
    if (code == 1757) return QString::fromUtf8("Другие члены в группе отсутствуют");
    if (code == 1758) return QString::fromUtf8("Элементы, экспорт которых можно отменить, отсутствуют");
    if (code == 1759) return QString::fromUtf8("Интерфейс не найден");
    if (code == 1760) return QString::fromUtf8("Элемент уже существует");
    if (code == 1761) return QString::fromUtf8("Элемент не найден");
    if (code == 1762) return QString::fromUtf8("Служба имен недоступна");
    if (code == 1763) return QString::fromUtf8("Неверное семейство сетевых адресов");
    if (code == 1764) return QString::fromUtf8("Запрошенная операция не поддерживается");
    if (code == 1765) return QString::fromUtf8("Нет доступных контекстов безопасности для олицетворения");
    if (code == 1766) return QString::fromUtf8("Внутренняя ошибка при удаленном вызове процедуры (RPC)");
    if (code == 1767) return QString::fromUtf8("Сервер RPC попытался произвести целочисленное деление на нуль");
    if (code == 1768) return QString::fromUtf8("Ошибка адресации на сервере RPC");
    if (code == 1769) return QString::fromUtf8("Операция с плавающей точкой на сервере RPC привела к делению на нуль");
    if (code == 1770) return QString::fromUtf8("Исчезновение порядка при операции с плавающей точкой на сервере RPC");
    if (code == 1771) return QString::fromUtf8("Переполнение при операции с плавающей точкой на сервере RPC");
    if (code == 1772) return QString::fromUtf8("Список серверов RPC, доступных для привязки дескрипторов, был исчерпан");
    if (code == 1773) return QString::fromUtf8("Не удается открыть файл таблицы преобразования символов");
    if (code == 1774) return QString::fromUtf8("Файл, содержащий таблицу преобразования символов, имеет размер менее 512 байт");
    if (code == 1775) return QString::fromUtf8("При удаленном вызове процедуры главному компьютеру от клиента был передан пустой дескриптор контекста");
    if (code == 1777) return QString::fromUtf8("В процессе удаленного вызова процедуры дескриптор контекста был изменен");
    if (code == 1778) return QString::fromUtf8("Дескрипторы привязки, переданные удаленному вызову процедуры, не совпадают");
    if (code == 1779) return QString::fromUtf8("Не удается получить дескриптор удаленного вызова процедуры");
    if (code == 1780) return QString::fromUtf8("Заглушке передан нулевой указатель ссылки");
    if (code == 1781) return QString::fromUtf8("Номер находится за пределами допустимого диапазона");
    if (code == 1782) return QString::fromUtf8("Значение счетчика байт слишком мало");
    if (code == 1783) return QString::fromUtf8("Заглушке переданы неправильные данные");
    if (code == 1784) return QString::fromUtf8("Имеющийся буфер не подходит для указанной операции");
    if (code == 1785) return QString::fromUtf8("Не удается определить тип диска.  Вероятно, он не отформатирован");
    if (code == 1786) return QString::fromUtf8("Рабочая станция не может участвовать в отношениях доверенности");
    if (code == 1787) return QString::fromUtf8("База данных диспетчера учетных записей на сервере не содержит записи для регистрации  компьютера через доверительные отношения с этой рабочей станции");
    if (code == 1788) return QString::fromUtf8("Установка отношений доверенности между основным доменом и доменом-доверителем не состоялась");
    if (code == 1789) return QString::fromUtf8("Не удалось установить доверительные отношения между этой рабочей станцией и основным доменом");
    if (code == 1790) return QString::fromUtf8("Вход в сеть не произведен");
    if (code == 1791) return QString::fromUtf8("Удаленный вызов процедуры уже выполняется для данного потока команд");
    if (code == 1792) return QString::fromUtf8("Попытка входа в сеть при отключенной сетевой службе входа");
    if (code == 1793) return QString::fromUtf8("Срок действия учетной записи пользователя истек");
    if (code == 1794) return QString::fromUtf8("Перенаправитель используется и не может быть выгружен");
    if (code == 1795) return QString::fromUtf8("Указанный драйвер принтера уже установлен");
    if (code == 1796) return QString::fromUtf8("Указанный порт не существует");
    if (code == 1797) return QString::fromUtf8("Неизвестный драйвер принтера");
    if (code == 1798) return QString::fromUtf8("Неизвестный процессор печати");
    if (code == 1799) return QString::fromUtf8("Файл-разделитель задан неверно");
    if (code == 1800) return QString::fromUtf8("Приоритет задан неверно");
    if (code == 1801) return QString::fromUtf8("Имя принтера задано неверно");
    if (code == 1802) return QString::fromUtf8("Принтер уже существует");
    if (code == 1803) return QString::fromUtf8("Неверная команда принтера");
    if (code == 1804) return QString::fromUtf8("Неверно задан тип данных");
    if (code == 1805) return QString::fromUtf8("Неверно задана среда");
    if (code == 1806) return QString::fromUtf8("Больше нет привязок");
    if (code == 1807) return QString::fromUtf8("Используется доверительная учетная запись домена. Для доступа к серверу требуется глобальная или локальная учетная запись пользователя");
    if (code == 1808) return QString::fromUtf8("Указанное имя является именем компьютера. Для доступа к серверу воспользуйтесь глобальной или локальной учетной записью пользователя");
    if (code == 1809) return QString::fromUtf8("Указанное имя является именем серверного траста.  Для доступа к серверу воспользуйтесь глобальным или локальным именем пользователя");
    if (code == 1810) return QString::fromUtf8("Имя или идентификатор безопасности (SID) указанного домена несовместимы со сведениями, полученными о домене через отношения доверенности");
    if (code == 1811) return QString::fromUtf8("Сервер используется и не может быть выгружен");
    if (code == 1812) return QString::fromUtf8("Указанный файл образа не содержит секции ресурсов");
    if (code == 1813) return QString::fromUtf8("Указанный тип ресурса в файле образа отсутствует");
    if (code == 1814) return QString::fromUtf8("Указанное имя ресурса не найдено в файле образа");
    if (code == 1815) return QString::fromUtf8("Код языка для ресурсов в файле образа не найден");
    if (code == 1816) return QString::fromUtf8("Недостаточно квот для обработки команды");
    if (code == 1817) return QString::fromUtf8("Ни один интерфейс не зарегистрирован");
    if (code == 1818) return QString::fromUtf8("Удаленный вызов процедуры был отменен");
    if (code == 1819) return QString::fromUtf8("Дескриптор привязки не содержит всей необходимой информации");
    if (code == 1820) return QString::fromUtf8("Ошибка при обмене данными во время удаленного вызова процедуры");
    if (code == 1821) return QString::fromUtf8("Запрошенный уровень проверки подлинности не поддерживается");
    if (code == 1822) return QString::fromUtf8("Ни одно основное имя не зарегистрировано");
    if (code == 1823) return QString::fromUtf8("Указан неверный код ошибки RPC Windows");
    if (code == 1824) return QString::fromUtf8("Был создан идентификатор UUID, который подходит только для этого компьютера");
    if (code == 1825) return QString::fromUtf8("Ошибка в пакете безопасности");
    if (code == 1826) return QString::fromUtf8("Поток команд не прерван");
    if (code == 1827) return QString::fromUtf8("Недопустимая операция для дескриптора шифрования и расшифровки");
    if (code == 1828) return QString::fromUtf8("Несовместимая версия пакета сериализации");
    if (code == 1829) return QString::fromUtf8("Несовместимая версия заглушки RPC");
    if (code == 1830) return QString::fromUtf8("Недопустимый или поврежденный объект канала RPC");
    if (code == 1831) return QString::fromUtf8("Недопустимая операция для объекта канала RPC");
    if (code == 1832) return QString::fromUtf8("Версия канала RPC не поддерживается");
    if (code == 1833) return QString::fromUtf8("Отказано в подключении к прокси-серверу HTTP: сбой проверки подлинности файла cookie");
    if (code == 1898) return QString::fromUtf8("Не найден член группы");
    if (code == 1899) return QString::fromUtf8("Не удалось создать элемент базы данных системы отображения конечных точек");
    if (code == 1900) return QString::fromUtf8("Универсальный уникальный идентификатор объекта (UUID) имеет пустое значение");
    if (code == 1901) return QString::fromUtf8("Время задано некорректно");
    if (code == 1902) return QString::fromUtf8("Задано неправильное имя формы");
    if (code == 1903) return QString::fromUtf8("Задан неправильный размер формы");
    if (code == 1904) return QString::fromUtf8("Указанный дескриптор принтера уже ожидается -");
    if (code == 1905) return QString::fromUtf8("Указанный принтер был удален");
    if (code == 1906) return QString::fromUtf8("Некорректное состояние принтера");
    if (code == 1907) return QString::fromUtf8("Перед первым входом в систему пользователь должен сменить свой пароль");
    if (code == 1908) return QString::fromUtf8("Не удается найти контроллер этого домена");
    if (code == 1909) return QString::fromUtf8("Учетная запись пользователя заблокирована и не может быть использована для входа в сеть");
    if (code == 1910) return QString::fromUtf8("Не найден указанный источник экспорта объекта");
    if (code == 1911) return QString::fromUtf8("Указанный объект не найден");
    if (code == 1912) return QString::fromUtf8("Не найден указанный набор сопоставителей объекта");
    if (code == 1913) return QString::fromUtf8("В буфере запроса остались данные для отправки");
    if (code == 1914) return QString::fromUtf8("Недопустимый обработчик вызова удаленной асинхронной процедуры");
    if (code == 1915) return QString::fromUtf8("Недопустимый обработчик вызова асинхронной RPC для этой операции");
    if (code == 1916) return QString::fromUtf8("Канальный RPC-объект уже закрыт");
    if (code == 1917) return QString::fromUtf8("Вызов RPC завершен до обработки всех каналов");
    if (code == 1918) return QString::fromUtf8("Больше нет доступных данных из канала RPC");
    if (code == 1919) return QString::fromUtf8("Для этого компьютера недоступно ни одного имени сайта");
    if (code == 1920) return QString::fromUtf8("Доступ к этому файлу из системы отсутствует");
    if (code == 1921) return QString::fromUtf8("Имя этого файла не может быть разрешено системой");
    if (code == 1922) return QString::fromUtf8("Этот элемент не того типа, что ожидался");
    if (code == 1923) return QString::fromUtf8("Не все из UUID объекта могут быть экспортированы в указанный элемент");
    if (code == 1924) return QString::fromUtf8("Невозможно экспортировать интерфейс в указанный элемент");
    if (code == 1925) return QString::fromUtf8("Нельзя добавить указанную копию профиля");
    if (code == 1926) return QString::fromUtf8("Нельзя добавить указанный элемент копии профиля");
    if (code == 1927) return QString::fromUtf8("Нельзя удалить указанный элемент копии профиля");
    if (code == 1928) return QString::fromUtf8("Нельзя добавить элемент группы");
    if (code == 1929) return QString::fromUtf8("Нельзя удалить элемент группы");
    if (code == 1930) return QString::fromUtf8("Драйвер принтера несовместим с политикой, блокирующей драйверы NT 4.0");
    if (code == 1931) return QString::fromUtf8("Срок действия контекста истек, и его использование не допускается");
    if (code == 1932) return QString::fromUtf8("Превышена квота текущего пользователя на создание делегированного доверия");
    if (code == 1933) return QString::fromUtf8("Превышена общая квота на создание делегированного доверия");
    if (code == 1934) return QString::fromUtf8("Превышена квота текущего пользователя на удаление делегированного доверия");
    if (code == 1935) return QString::fromUtf8("Не удалось войти. Компьютер, на который осуществляется вход, защищен брандмауэром проверки подлинности. Указанная учетная запись не имеет права проверки подлинности на этом компьютере");
    if (code == 1936) return QString::fromUtf8("Удаленные подключения к очереди печати заблокированы набором политики локального компьютера");
    if (code == 1937) return QString::fromUtf8("Не удалось войти: сбой проверки подлинности, так как отключена проверка подлинности NTLM");
    if (code == 2000) return QString::fromUtf8("Неверный формат пикселя");
    if (code == 2001) return QString::fromUtf8("Выбран неверный драйвер");
    if (code == 2002) return QString::fromUtf8("Тип или атрибут класса окна задан неверно");
    if (code == 2003) return QString::fromUtf8("Требуемая операция для метафайлов не поддерживается");
    if (code == 2004) return QString::fromUtf8("Требуемая операция преобразования не поддерживается");
    if (code == 2005) return QString::fromUtf8("Требуемая операция обрезания рисунка не поддерживается");
    if (code == 2010) return QString::fromUtf8("Указан недопустимый модуль управления цветом ");
    if (code == 2011) return QString::fromUtf8("Указан недопустимый цифровой профиль");
    if (code == 2012) return QString::fromUtf8("Указанный тег не найден");
    if (code == 2013) return QString::fromUtf8("Требуемый тег отсутствует");
    if (code == 2014) return QString::fromUtf8("Указанный тег уже присутствует");
    if (code == 2015) return QString::fromUtf8("Указанный цветовой профиль не связан с указанным устройством");
    if (code == 2016) return QString::fromUtf8("Указанный цветовой профиль не найден");
    if (code == 2017) return QString::fromUtf8("Указан недопустимый цветовой профиль");
    if (code == 2018) return QString::fromUtf8("Управление цветовой палитрой изображений не включено");
    if (code == 2019) return QString::fromUtf8("Произошла ошибка при удалении преобразования цвета");
    if (code == 2020) return QString::fromUtf8("Указано недопустимое преобразование цвета");
    if (code == 2021) return QString::fromUtf8("Указанное преобразование не соответствует цветовой палитре точечного рисунка");
    if (code == 2022) return QString::fromUtf8("Указанное имя индекса цвета отсутствует в профиле");
    if (code == 2023) return QString::fromUtf8("Указанный профиль предназначен для устройства другого типа");
    if (code == 2102) return QString::fromUtf8("Драйвер рабочей станции не установлен");
    if (code == 2103) return QString::fromUtf8("Не удалось найти сервер");
    if (code == 2104) return QString::fromUtf8("Внутренняя ошибка.  Сеть не может получить доступ к общему сегменту памяти");
    if (code == 2105) return QString::fromUtf8("Недостаточно сетевых ресурсов");
    if (code == 2106) return QString::fromUtf8("Данная операция не поддерживается на рабочих станциях");
    if (code == 2107) return QString::fromUtf8("Устройство не подключено");
    if (code == 2108) return QString::fromUtf8("Сетевое подключение осуществлено успешно, но у пользователя будет запрошен иной пароль, отличающийся от ранее введенного ");
    if (code == 2109) return QString::fromUtf8("Сетевое соединение успешно установлено с помощью реквизитов, использованных по умолчанию");
    if (code == 2114) return QString::fromUtf8("Не запущена служба сервера");
    if (code == 2115) return QString::fromUtf8("Очередь пуста");
    if (code == 2116) return QString::fromUtf8("Устройство или каталог не существует");
    if (code == 2117) return QString::fromUtf8("Операция является незаконной для перенаправляемого ресурса");
    if (code == 2118) return QString::fromUtf8("Общий доступ к этому имени уже открыт");
    if (code == 2119) return QString::fromUtf8("Запрошенный ресурс в настоящее время у сервера отсутствует");
    if (code == 2121) return QString::fromUtf8("Требуемое число добавляемых элементов превышает максимально допустимое");
    if (code == 2122) return QString::fromUtf8("Служба одноранговой сети поддерживает только двух пользователей одновременно");
    if (code == 2123) return QString::fromUtf8("Буфер возврата API слишком мал");
    if (code == 2127) return QString::fromUtf8("Удаленная ошибка API");
    if (code == 2131) return QString::fromUtf8("Ошибка при открытии или чтении файла конфигурации");
    if (code == 2136) return QString::fromUtf8("Общая ошибка сети");
    if (code == 2137) return QString::fromUtf8("Служба рабочей станции находится в нерабочем состоянии. Перезагрузите компьютер и снова запустите службу рабочей станции");
    if (code == 2138) return QString::fromUtf8("Служба рабочей станции не запущена");
    if (code == 2139) return QString::fromUtf8("Запрошенная информация недоступна");
    if (code == 2140) return QString::fromUtf8("Внутренняя ошибка Windows");
    if (code == 2141) return QString::fromUtf8("Сервер не настроен на выполнение транзакций");
    if (code == 2142) return QString::fromUtf8("Затребованный API не поддерживается на удаленном сервере");
    if (code == 2143) return QString::fromUtf8("Недопустимое имя события");
    if (code == 2144) return QString::fromUtf8("Имя компьютера уже существует в сети.  Измените имя и перезагрузите компьютер");
    if (code == 2146) return QString::fromUtf8("Не удалось найти указанный компонент в сведениях о настройке");
    if (code == 2147) return QString::fromUtf8("Не удалось найти указанный параметр в сведениях о настройке");
    if (code == 2149) return QString::fromUtf8("Слишком длинная строка в файле настройки");
    if (code == 2150) return QString::fromUtf8("Принтер не существует");
    if (code == 2151) return QString::fromUtf8("Задание печати не существует");
    if (code == 2152) return QString::fromUtf8("Адрес принтера не найден");
    if (code == 2153) return QString::fromUtf8("Адрес принтера уже существует");
    if (code == 2154) return QString::fromUtf8("Очередь принтера уже существует");
    if (code == 2155) return QString::fromUtf8("Добавление принтеров невозможно");
    if (code == 2156) return QString::fromUtf8("Добавление заданий печати невозможно");
    if (code == 2157) return QString::fromUtf8("Добавление адресов принтеров невозможно");
    if (code == 2158) return QString::fromUtf8("Принтер находится в состоянии простоя и не может принимать управляющие команды");
    if (code == 2159) return QString::fromUtf8("Запрос на назначение принтера содержит неправильную управляющую функцию");
    if (code == 2160) return QString::fromUtf8("Обработчик заданий печати не отвечает");
    if (code == 2161) return QString::fromUtf8("Диспетчер очереди не выполняется");
    if (code == 2162) return QString::fromUtf8("Операция не может быть выполнена при текущем состоянии принтера");
    if (code == 2163) return QString::fromUtf8("Операция не может быть выполнена при текущем состоянии очереди печати");
    if (code == 2164) return QString::fromUtf8("Операция не может быть выполнена при текущем состоянии задания печати");
    if (code == 2165) return QString::fromUtf8("Ошибка при выделении памяти диспетчером очереди");
    if (code == 2166) return QString::fromUtf8("Отсутствует драйвер устройства");
    if (code == 2167) return QString::fromUtf8("Тип данных не поддерживается обработчиком заданий печати");
    if (code == 2168) return QString::fromUtf8("Обработчик заданий печати не установлен");
    if (code == 2180) return QString::fromUtf8("База данных службы заблокирована");
    if (code == 2181) return QString::fromUtf8("Таблица службы заполнена");
    if (code == 2182) return QString::fromUtf8("Затребованная служба уже запущена");
    if (code == 2183) return QString::fromUtf8("Служба не реагирует на управляющие действия");
    if (code == 2184) return QString::fromUtf8("Служба не запущена");
    if (code == 2185) return QString::fromUtf8("Неправильное имя службы");
    if (code == 2186) return QString::fromUtf8("Служба не реагирует на управляющие функции");
    if (code == 2187) return QString::fromUtf8("Механизм управления службой занят");
    if (code == 2188) return QString::fromUtf8("Файл настройки содержит неправильное имя программы службы");
    if (code == 2189) return QString::fromUtf8("В текущем состоянии службы управление службой невозможно");
    if (code == 2190) return QString::fromUtf8("Нештатное завершение службы");
    if (code == 2191) return QString::fromUtf8("Затребованная пауза, продолжение или останов службы невозможны");
    if (code == 2192) return QString::fromUtf8("Диспетчеру управления службой не удалось найти имя службы в таблице выполнения");
    if (code == 2193) return QString::fromUtf8("Ошибка при чтении канала диспетчера управления службой");
    if (code == 2194) return QString::fromUtf8("Не удалось создать поток команд для новой службы");
    if (code == 2200) return QString::fromUtf8("Рабочая станция уже включена в локальную сеть");
    if (code == 2201) return QString::fromUtf8("Рабочая станция не включена в локальную сеть");
    if (code == 2202) return QString::fromUtf8("Имя пользователя задано неверно");
    if (code == 2203) return QString::fromUtf8("Неправильный параметр пароля");
    if (code == 2204) return QString::fromUtf8("Обработчик входа не добавил псевдоним сообщений");
    if (code == 2205) return QString::fromUtf8("Обработчик входа не добавил псевдоним сообщений");
    if (code == 2206) return QString::fromUtf8("Обработчик выхода не удалил псевдоним сообщений");
    if (code == 2207) return QString::fromUtf8("Обработчик выхода не удалил псевдоним сообщений");
    if (code == 2209) return QString::fromUtf8("Входы в сеть приостановлены");
    if (code == 2210) return QString::fromUtf8("Конфликт на сервере, производящем регистрацию в сети");
    if (code == 2211) return QString::fromUtf8("При настройке сервера не указан допустимый путь пользователя");
    if (code == 2212) return QString::fromUtf8("Ошибка при загрузке или обработке сценария входа в систему");
    if (code == 2214) return QString::fromUtf8("Не указан сервер для обработки входа в сеть. Компьютер будет зарегистрирован как изолированный (STANDALONE)");
    if (code == 2215) return QString::fromUtf8("Не найден сервер для проверки пароля входа в сеть");
    if (code == 2216) return QString::fromUtf8("Домен для входа компьютера в сеть уже выбран");
    if (code == 2217) return QString::fromUtf8("Сервер не может опознать пароль входа в сеть");
    if (code == 2219) return QString::fromUtf8("Не найдена база данных защиты");
    if (code == 2220) return QString::fromUtf8("Не найдено имя группы");
    if (code == 2221) return QString::fromUtf8("Не найдено имя пользователя");
    if (code == 2222) return QString::fromUtf8("Не найдено имя ресурса");
    if (code == 2223) return QString::fromUtf8("Группа уже существует");
    if (code == 2224) return QString::fromUtf8("Учетная запись уже существует");
    if (code == 2225) return QString::fromUtf8("Список разрешений для ресурса уже существует");
    if (code == 2226) return QString::fromUtf8("Данная операция разрешена только для основного контроллера домена");
    if (code == 2227) return QString::fromUtf8("База данных защиты не запущена");
    if (code == 2228) return QString::fromUtf8("База данных учетных записей пользователей содержит слишком много имен");
    if (code == 2229) return QString::fromUtf8("Ошибка ввода/вывода для диска");
    if (code == 2230) return QString::fromUtf8("Превышен предел 64 элементов на один ресурс");
    if (code == 2231) return QString::fromUtf8("Удаления пользователя с сеансом не допускается");
    if (code == 2232) return QString::fromUtf8("Не удалось найти родительский каталог");
    if (code == 2233) return QString::fromUtf8("Не удалось выполнить добавление в сегмент буфера сеанса базы данных защиты");
    if (code == 2234) return QString::fromUtf8("Эта операция не разрешена для данной группы");
    if (code == 2235) return QString::fromUtf8("Данный пользователь не помещен в буфера сеанса базы данных учетных записей");
    if (code == 2236) return QString::fromUtf8("Пользователь уже включен в данную группу");
    if (code == 2237) return QString::fromUtf8("Пользователь не включен в данную группу");
    if (code == 2238) return QString::fromUtf8("Учетная запись пользователя не определена");
    if (code == 2239) return QString::fromUtf8("Срок действия учетной записи пользователя истек");
    if (code == 2240) return QString::fromUtf8("Не разрешен вход пользователя с данной рабочей станции");
    if (code == 2241) return QString::fromUtf8("Не разрешен вход пользователя в данное время");
    if (code == 2242) return QString::fromUtf8("Пароль данного пользователя просрочен");
    if (code == 2243) return QString::fromUtf8("Нельзя изменить пароль данного пользователя");
    if (code == 2244) return QString::fromUtf8("Этот пароль сейчас не действует");
    if (code == 2245) return QString::fromUtf8("Пароль не отвечает требованиям политики. Проверьте минимальную длину пароля, его сложность, отличие от ранее использованных паролей");
    if (code == 2246) return QString::fromUtf8("Пароль данного пользователя был установлен недавно и его нельзя изменить");
    if (code == 2247) return QString::fromUtf8("База данных защиты повреждена");
    if (code == 2248) return QString::fromUtf8("Данная реплицированная сетевая/локальная база данных защиты не требует обновления");
    if (code == 2249) return QString::fromUtf8("Реплицированная база данных устарела; требуется синхронизация");
    if (code == 2250) return QString::fromUtf8("Сетевое подключение не существует");
    if (code == 2251) return QString::fromUtf8("Неправильный тип asg_type");
    if (code == 2252) return QString::fromUtf8("Данное устройство сейчас является общим");
    if (code == 2253) return QString::fromUtf8("Имя пользователя не может совпадать с именем компьютера");
    if (code == 2270) return QString::fromUtf8("Нельзя вводить имя компьютера как псевдоним сообщений.  Имя может уже использоваться в сети");
    if (code == 2271) return QString::fromUtf8("Служба сообщений уже запущена");
    if (code == 2272) return QString::fromUtf8("Сбой при запуске службы сообщений");
    if (code == 2273) return QString::fromUtf8("Не удалось найти псевдоним сообщений в сети");
    if (code == 2274) return QString::fromUtf8("Псевдоним сообщений уже был направлен");
    if (code == 2275) return QString::fromUtf8("Псевдоним сообщений уже добавлен, но ждет направления");
    if (code == 2276) return QString::fromUtf8("Псевдоним сообщений уже существует на локальном уровне");
    if (code == 2277) return QString::fromUtf8("Превышено максимальное число добавленных псевдонимов сообщений");
    if (code == 2278) return QString::fromUtf8("Нельзя удалять имя компьютера");
    if (code == 2279) return QString::fromUtf8("Нельзя направлять сообщения на исходную рабочую станцию");
    if (code == 2280) return QString::fromUtf8("Ошибка в обработчике сообщений домена");
    if (code == 2281) return QString::fromUtf8("Сообщение отослано, но адресат временно отключил службу сообщений");
    if (code == 2282) return QString::fromUtf8("Сообщение отослано, но не принято");
    if (code == 2283) return QString::fromUtf8("Псевдоним сообщений занят.  Повторите попытку позже");
    if (code == 2284) return QString::fromUtf8("Служба сообщений не запущена");
    if (code == 2285) return QString::fromUtf8("Имя не находится на локальном компьютере");
    if (code == 2286) return QString::fromUtf8("Не удалось найти в сети псевдоним направленного сообщения");
    if (code == 2287) return QString::fromUtf8("Таблица псевдонимов сообщений на удаленной станции заполнена");
    if (code == 2288) return QString::fromUtf8("Сообщения с данным псевдонимом в настоящее время не направляются");
    if (code == 2289) return QString::fromUtf8("Переданное широковещательное сообщение усечено");
    if (code == 2294) return QString::fromUtf8("Неправильное имя устройства");
    if (code == 2295) return QString::fromUtf8("Ошибка при записи");
    if (code == 2297) return QString::fromUtf8("В сети существует повторяющийся псевдоним сообщений");
    if (code == 2298) return QString::fromUtf8("Данный псевдоним сообщений будет удален позже");
    if (code == 2299) return QString::fromUtf8("Псевдоним сообщений не был успешно удален из всех сетей");
    if (code == 2300) return QString::fromUtf8("Данная операция не поддерживается для компьютеров, работающих с несколькими сетями");
    if (code == 2310) return QString::fromUtf8("Этот общий ресурс не существует");
    if (code == 2311) return QString::fromUtf8("К этому устройству общий доступ отсутствует");
    if (code == 2312) return QString::fromUtf8("Сеанс с данным именем компьютера не существует");
    if (code == 2314) return QString::fromUtf8("Нет открытого файла с данным идентификационным номером");
    if (code == 2315) return QString::fromUtf8("Сбой при выполнении удаленной административной команды");
    if (code == 2316) return QString::fromUtf8("Сбой при открытии удаленного временного файла");
    if (code == 2317) return QString::fromUtf8("Данные, возвращаемые удаленной административной командой, были усечены до 64 К");
    if (code == 2318) return QString::fromUtf8("Нельзя одновременно определить устройство как общий ресурс с очередью и без");
    if (code == 2319) return QString::fromUtf8("Сведения в списке серверов могут быть неточными");
    if (code == 2320) return QString::fromUtf8("Компьютер не активизирован в данном домене");
    if (code == 2321) return QString::fromUtf8("Перед удалением общий ресурс необходимо вывести из распределенной файловой системы");
    if (code == 2331) return QString::fromUtf8("Недопустимая операция для данного устройства");
    if (code == 2332) return QString::fromUtf8("Это устройство нельзя сделать общим");
    if (code == 2333) return QString::fromUtf8("Это устройство не было открыто");
    if (code == 2334) return QString::fromUtf8("Неправильный список имен устройств");
    if (code == 2335) return QString::fromUtf8("Неправильный приоритет в очереди");
    if (code == 2337) return QString::fromUtf8("Отсутствуют общие устройства связи");
    if (code == 2338) return QString::fromUtf8("Указанная очередь не существует");
    if (code == 2340) return QString::fromUtf8("Неправильный список устройств");
    if (code == 2341) return QString::fromUtf8("Затребовано неправильное устройство");
    if (code == 2342) return QString::fromUtf8("Это устройство уже используется диспетчером очереди");
    if (code == 2343) return QString::fromUtf8("Это устройство уже используется как устройство связи");
    if (code == 2351) return QString::fromUtf8("Неправильное имя компьютера");
    if (code == 2354) return QString::fromUtf8("Указаны слишком длинные строка и префикс");
    if (code == 2356) return QString::fromUtf8("Недопустимый компонент пути");
    if (code == 2357) return QString::fromUtf8("Не удалось определить тип ввода");
    if (code == 2362) return QString::fromUtf8("Буфер для типов недостаточно велик");
    if (code == 2370) return QString::fromUtf8("Размер файлов конфигурации не может превышать 64 К");
    if (code == 2371) return QString::fromUtf8("Смещение начальной инструкции вне допустимого диапазона");
    if (code == 2372) return QString::fromUtf8("Система не может удалить текущие подключения к сетевым ресурсам");
    if (code == 2373) return QString::fromUtf8("Система не может обработать командную строку в данном файле");
    if (code == 2374) return QString::fromUtf8("Ошибка при загрузке файла конфигурации");
    if (code == 2375) return QString::fromUtf8("Ошибка при сохранении файла конфигурации.  Конфигурация сохранена частично");
    if (code == 2378) return QString::fromUtf8("Файл журнала был изменен в интервале между двумя операциями чтения");
    if (code == 2380) return QString::fromUtf8("Нельзя задавать каталог как исходный путь");
    if (code == 2381) return QString::fromUtf8("Неправильный исходный путь");
    if (code == 2382) return QString::fromUtf8("Неправильный путь назначения");
    if (code == 2383) return QString::fromUtf8("Исходный путь и путь назначения находятся на разных серверах");
    if (code == 2385) return QString::fromUtf8("Затребованный сервер выполнения не активен");
    if (code == 2389) return QString::fromUtf8("Ошибка при связи с сервером выполнения");
    if (code == 2391) return QString::fromUtf8("Ошибка при запуске фонового процесса");
    if (code == 2392) return QString::fromUtf8("Не найден подключенный общий ресурс");
    if (code == 2400) return QString::fromUtf8("Недопустимый номер сетевой платы локальной сети");
    if (code == 2401) return QString::fromUtf8("На подключенном устройстве имеются открытые файлы или запросы, ждущие обработки");
    if (code == 2402) return QString::fromUtf8("Некоторые подключения все еще активны");
    if (code == 2403) return QString::fromUtf8("Неправильное сетевое имя или пароль");
    if (code == 2404) return QString::fromUtf8("Устройство используется одним из активных процессов и не может быть отключено");
    if (code == 2405) return QString::fromUtf8("Эта буква диска уже используется на локальном уровне");
    if (code == 2430) return QString::fromUtf8("Указанный клиент уже зарегистрирован для данного события");
    if (code == 2431) return QString::fromUtf8("Таблица предупреждений заполнена");
    if (code == 2432) return QString::fromUtf8("Использовано недопустимое или не существующее имя предупреждения");
    if (code == 2433) return QString::fromUtf8("Неправильный получатель предупреждения");
    if (code == 2434) return QString::fromUtf8("Сеанс пользователя с данным сервером был удален,");
    if (code == 2440) return QString::fromUtf8("Файл журнала не содержит запись с указанным номером");
    if (code == 2450) return QString::fromUtf8("Неправильная конфигурация базы данных учетных записей пользователей");
    if (code == 2451) return QString::fromUtf8("Данная операция не разрешена во время выполнения службы Netlogon");
    if (code == 2452) return QString::fromUtf8("Данную операцию нельзя выполнять над последней учетной записью администратора");
    if (code == 2453) return QString::fromUtf8("Не удалось найти контроллер домена для данного домена");
    if (code == 2454) return QString::fromUtf8("Не удалось задать сведения о входе для данного пользователя");
    if (code == 2455) return QString::fromUtf8("Служба Netlogon не запущена");
    if (code == 2456) return QString::fromUtf8("Не удалось выполнить добавление в базу данных учетных записей пользователей");
    if (code == 2457) return QString::fromUtf8("Часы данного сервера не синхронизованы с часами основного контроллера домена");
    if (code == 2458) return QString::fromUtf8("Обнаружено несоответствие паролей");
    if (code == 2460) return QString::fromUtf8("Идентификация сервера не определяет допустимый сервер");
    if (code == 2461) return QString::fromUtf8("Идентификация сеанса не определяет допустимый сеанс");
    if (code == 2462) return QString::fromUtf8("Идентификация подключения не определяет допустимое подключение");
    if (code == 2463) return QString::fromUtf8("В таблице доступных серверов нет места для добавления записей");
    if (code == 2464) return QString::fromUtf8("Для сервера достигнуто максимально возможное число активных сеансов");
    if (code == 2465) return QString::fromUtf8("Для сервера достигнуто максимально возможное число подключений");
    if (code == 2466) return QString::fromUtf8("Для сервера достигнуто максимально возможное число открытых файлов");
    if (code == 2467) return QString::fromUtf8("Для данного сервера не зарегистрированы альтернативные серверы");
    if (code == 2470) return QString::fromUtf8("Попробуйте использовать версию API нижнего уровня (удаленный административный протокол)");
    if (code == 2480) return QString::fromUtf8("Служба UPS не может получить доступ к драйверу UPS");
    if (code == 2481) return QString::fromUtf8("Неправильная конфигурация службы UPS");
    if (code == 2482) return QString::fromUtf8("Служба UPS не может получить доступ к последовательному порту");
    if (code == 2483) return QString::fromUtf8("UPS указывает обрыв на линии или недостаточную зарядку аккумуляторов. Служба не запущена");
    if (code == 2484) return QString::fromUtf8("Служба UPS не смогла выполнить отключение системы");
    if (code == 2500) return QString::fromUtf8("Следующая программа возвращает код ошибки MS-DOS");
    if (code == 2501) return QString::fromUtf8("Для следующей программы требуется больше памяти");
    if (code == 2502) return QString::fromUtf8("Следующая программа вызывает не поддерживаемую функцию MS-DOS");
    if (code == 2503) return QString::fromUtf8("Сбой при загрузке рабочей станции");
    if (code == 2504) return QString::fromUtf8("Следующий файл поврежден");
    if (code == 2505) return QString::fromUtf8("В файле, определяющем блок загрузки, не указан загрузчик");
    if (code == 2506) return QString::fromUtf8("NetBIOS возвращает ошибку: Выполнено копирование блоков NCB и SMB");
    if (code == 2507) return QString::fromUtf8("Ошибка ввода/вывода для диска");
    if (code == 2508) return QString::fromUtf8("Сбой при подстановке параметра изображения");
    if (code == 2509) return QString::fromUtf8("Слишком большое число параметров изображения привело к выходу за границы диска");
    if (code == 2510) return QString::fromUtf8("Изображение не было создано с дискеты MS-DOS, отформатированной с ключом /S");
    if (code == 2511) return QString::fromUtf8("Загрузка с сервера будет возобновлена позже");
    if (code == 2512) return QString::fromUtf8("Сбой при вызове сервера загрузки");
    if (code == 2513) return QString::fromUtf8("Не удалось подключиться к серверу загрузки");
    if (code == 2514) return QString::fromUtf8("Не удалось открыть файл изображения на сервере загрузки");
    if (code == 2515) return QString::fromUtf8("Выполняется подключение к серверу загрузки...");
    if (code == 2516) return QString::fromUtf8("Выполняется подключение к серверу загрузки...");
    if (code == 2517) return QString::fromUtf8("Служба загрузки с сервера остановлена; проверьте причину по журналу ошибок");
    if (code == 2518) return QString::fromUtf8("Сбой при запуске загрузки с сервера; проверьте причину по журналу ошибок");
    if (code == 2519) return QString::fromUtf8("Второе подключение к ресурсу удаленной загрузки не допускается");
    if (code == 2550) return QString::fromUtf8("Для службы браузера задана конфигурация с параметром MaintainServerList=No");
    if (code == 2610) return QString::fromUtf8("Сбой при запуске службы, поскольку не была запущена ни одна из сетевых плат");
    if (code == 2611) return QString::fromUtf8("Сбой при запуске службы из-за неправильной информации о запуске в реестре");
    if (code == 2612) return QString::fromUtf8("Сбой при запуске службы, так как ее база данных отсутствует или повреждена");
    if (code == 2613) return QString::fromUtf8("Сбой при запуске службы из-за отсутствия общего ресурса RPLFILES");
    if (code == 2614) return QString::fromUtf8("Сбой при запуске службы из-за отсутствия группы RPLUSER");
    if (code == 2615) return QString::fromUtf8("Не удалось перечислить записи службы");
    if (code == 2616) return QString::fromUtf8("Запись рабочей станции повреждена");
    if (code == 2617) return QString::fromUtf8("Запись рабочей станции не найдена");
    if (code == 2618) return QString::fromUtf8("Имя рабочей станции используется другой рабочей станцией");
    if (code == 2619) return QString::fromUtf8("Запись конфигурации повреждена");
    if (code == 2620) return QString::fromUtf8("Запись конфигурации не найдена");
    if (code == 2621) return QString::fromUtf8("Имя конфигурации используется другой конфигурацией");
    if (code == 2622) return QString::fromUtf8("Имеются рабочие станции, использующие данную конфигурацию");
    if (code == 2623) return QString::fromUtf8("Повреждение данных в записи настройки");
    if (code == 2624) return QString::fromUtf8("Запись настройки не найдена");
    if (code == 2625) return QString::fromUtf8("Повреждение данных в записи идентификатора платы");
    if (code == 2626) return QString::fromUtf8("Внутренняя ошибка службы");
    if (code == 2627) return QString::fromUtf8("Запись с ИД поставщика повреждена");
    if (code == 2628) return QString::fromUtf8("Запись блока загрузки повреждена");
    if (code == 2629) return QString::fromUtf8("Для данной записи рабочей станции нет учетной записи пользователя");
    if (code == 2630) return QString::fromUtf8("Не удалось найти локальную группу RPLUSER");
    if (code == 2631) return QString::fromUtf8("Не найдена запись блока загрузки");
    if (code == 2632) return QString::fromUtf8("Выбранная конфигурация несовместима с данной рабочей станцией");
    if (code == 2633) return QString::fromUtf8("Выбранный идентификатор сетевой платы используется другой рабочей станцией");
    if (code == 2634) return QString::fromUtf8("Существуют конфигурации, использующие данную настройку");
    if (code == 2635) return QString::fromUtf8("Существуют рабочие станции, конфигурации или настройки, использующие данный блок загрузки");
    if (code == 2636) return QString::fromUtf8("Служба не смогла выполнить архивацию базы данных удаленной загрузки с сервера");
    if (code == 2637) return QString::fromUtf8("Запись адаптера не найдена");
    if (code == 2638) return QString::fromUtf8("Запись поставщика не найдена");
    if (code == 2639) return QString::fromUtf8("Имя поставщика используется в другой записи поставщика");
    if (code == 2640) return QString::fromUtf8("(имя загрузки, код поставщика) используется в другой записи блока загрузки");
    if (code == 2641) return QString::fromUtf8("Имя конфигурации уже используется");
    if (code == 2660) return QString::fromUtf8("Внутренняя база данных службы распределенной файловой системы DFS повреждена");
    if (code == 2661) return QString::fromUtf8("Одна из записей внутренней базы данных службы DFS повреждена");
    if (code == 2662) return QString::fromUtf8("Указанному пути входа не соответствует ни одного DFS-имени");
    if (code == 2663) return QString::fromUtf8("Корень или ссылка с указанным именем уже существует");
    if (code == 2664) return QString::fromUtf8("Указанный общий ресурс сервера уже включен в распределенную файловую систему DFS");
    if (code == 2665) return QString::fromUtf8("Указанный общий ресурс сервера не поддерживает указанное пространство имен DFS");
    if (code == 2666) return QString::fromUtf8("Эта операция не применима в этой части пространства имен");
    if (code == 2667) return QString::fromUtf8("Эта операция не применима в этой части пространства имен");
    if (code == 2668) return QString::fromUtf8("Операция неоднозначна, так как для этой ссылки имеется несколько серверов");
    if (code == 2669) return QString::fromUtf8("Не удалось создать ссылку");
    if (code == 2670) return QString::fromUtf8("Сервер не поддерживает распределенную файловую систему DFS");
    if (code == 2671) return QString::fromUtf8("Указан недопустимый конечный путь для переименования");
    if (code == 2672) return QString::fromUtf8("Указанная ссылка DFS отключена");
    if (code == 2673) return QString::fromUtf8("Выбранный сервер не является сервером для данной ссылки");
    if (code == 2674) return QString::fromUtf8("Обнаружена циклическая ссылка в имени DFS");
    if (code == 2675) return QString::fromUtf8("Операция не поддерживается для распределенной файловой системы DFS на сервере");
    if (code == 2676) return QString::fromUtf8("Эта ссылка уже поддерживается указанным сервером-ресурсом");
    if (code == 2677) return QString::fromUtf8("Невозможно удалить последний сервер-ресурс, поддерживающий этот корень или ссылку");
    if (code == 2678) return QString::fromUtf8("Эта операция не поддерживается для ссылок между DFS");
    if (code == 2679) return QString::fromUtf8("Внутреннее состояние службы DFS стало противоречивым");
    if (code == 2680) return QString::fromUtf8("Служба DFS установлена на указанном сервере");
    if (code == 2681) return QString::fromUtf8("Данные DFS, для которых выполняется согласование, идентичны");
    if (code == 2682) return QString::fromUtf8("Корень DFS не может быть удален - требуется отмена установки DFS");
    if (code == 2683) return QString::fromUtf8("Дочерняя или родительская папка этого общего ресурса уже содержится в DFS");
    if (code == 2690) return QString::fromUtf8("Внутренняя ошибка распределенной файловой системы DFS");
    if (code == 2691) return QString::fromUtf8("Этот компьютер уже присоединен к домену");
    if (code == 2692) return QString::fromUtf8("Этот компьютер в данный момент не присоединен к домену");
    if (code == 2693) return QString::fromUtf8("Этот компьютер является контроллером домена и не может быть исключен из домена");
    if (code == 2694) return QString::fromUtf8("Конечный контроллер домена не поддерживает создания учетных записей компьютеров в подразделениях");
    if (code == 2695) return QString::fromUtf8("Указанное имя рабочей группы недопустимо");
    if (code == 2696) return QString::fromUtf8("Указанное имя компьютера несовместимо с языком системы, используемым контроллером домена");
    if (code == 2697) return QString::fromUtf8("Указанная учетная запись компьютера не найдена. Обратитесь к администратору, чтобы проверить, что учетная запись присутствует в домене. Если учетная запись была удалена, необходимо вывести компьютер из домена, перезагрузить его и повторно ввести в домен");
    if (code == 2698) return QString::fromUtf8("Компьютер с этой версией Windows не может быть присоединен к домену");
    if (code == 2699) return QString::fromUtf8("Не удалось разрешить DNS-имя контроллера домена в присоединяемом домене. Убедитесь, что настройки данного клиента обеспечивают доступ к DNS-серверу, который может выполнять разрешение DNS-имен в целевом домене. Дополнительные сведения об устранении неполадок сети см. в справке Windows");
    if (code == 2701) return QString::fromUtf8("Пароль необходимо сменить при следующем входе в систему");
    if (code == 2702) return QString::fromUtf8("Учетная запись заблокирована");
    if (code == 2703) return QString::fromUtf8("Слишком длинный пароль");
    if (code == 2704) return QString::fromUtf8("Пароль не соответствует политике сложности");
    if (code == 2705) return QString::fromUtf8("Пароль не соответствует требованиям DLL-библиотек фильтра");
    if (code == 2709) return QString::fromUtf8("Не найдены сведения о завершении автономного присоединения");
    if (code == 2710) return QString::fromUtf8("Сведения о завершении автономного присоединения повреждены");
    if (code == 2711) return QString::fromUtf8("Не удалось создать сведения об автономном присоединении. Проверьте наличие доступа к указанному расположению пути и разрешений для изменения его содержимого. Может потребоваться запуск с правами администратора");
    if (code == 2712) return QString::fromUtf8("Сведения о присоединении к домену сохранены не полностью или с ошибками");
    if (code == 2713) return QString::fromUtf8("Автономная операция присоединения успешно выполнена, но требуется перезагрузка");
    if (code == 2714) return QString::fromUtf8("Ожидающие операции автономного присоединения отсутствуют");
    if (code == 2715) return QString::fromUtf8("Не удалось задать одно или несколько запрошенных значений имен компьютера или домена на локальном компьютере");
    if (code == 2716) return QString::fromUtf8("Не удалось сверить имя узла текущего компьютера со значением, сохраненным в сведениях о завершении присоединения");
    if (code == 2717) return QString::fromUtf8("Не удалось загрузить указанный куст автономного реестра. Проверьте наличие доступа к указанному расположению пути и разрешений для изменения его содержимого. Может потребоваться запуск с правами администратора");
    if (code == 2718) return QString::fromUtf8("Минимальные требования безопасности сеанса для этой операции не выполнены");
    if (code == 2719) return QString::fromUtf8("Не поддерживается предоставление версии blob учетной записью компьютера");
    if (code == 2999) return QString::fromUtf8("Это последняя ошибка в диапазоне NERR");
    if (code == 3000) return QString::fromUtf8("Указан неизвестный монитор печати");
    if (code == 3001) return QString::fromUtf8("Указанный драйвер принтера занят");
    if (code == 3002) return QString::fromUtf8("Не найден файл диспетчера очереди");
    if (code == 3003) return QString::fromUtf8("Не был произведен вызов StartDocPrinter");
    if (code == 3004) return QString::fromUtf8("Не был произведен вызов AddJob");
    if (code == 3005) return QString::fromUtf8("Указанный процессор печати уже установлен");
    if (code == 3006) return QString::fromUtf8("Указанный монитор печати уже установлен");
    if (code == 3007) return QString::fromUtf8("Указанный монитор печати не имеет требуемых функций");
    if (code == 3008) return QString::fromUtf8("Указанный монитор печати сейчас уже используется");
    if (code == 3009) return QString::fromUtf8("Требуемая операция не разрешена, если другие задания ждут очереди на печать");
    if (code == 3010) return QString::fromUtf8("Требуемая операция выполнена успешно. Чтобы сделанные изменения вступили в силу, следует перезагрузить систему");
    if (code == 3011) return QString::fromUtf8("Требуемая операция выполнена успешно. Чтобы сделанные изменения вступили в силу, следует перезагрузить компьютер");
    if (code == 3012) return QString::fromUtf8("Не найдено ни одного принтера");
    if (code == 3013) return QString::fromUtf8("Есть сведения о ненадежности работы драйвера принтера");
    if (code == 3014) return QString::fromUtf8("Есть сведения о вреде, который наносит системе работа драйвера принтера");
    if (code == 3015) return QString::fromUtf8("Указанный пакет драйвера принтера сейчас используется");
    if (code == 3016) return QString::fromUtf8("Не удалось найти пакет драйвера ядра, требуемый пакетом драйвера принтера");
    if (code == 3017) return QString::fromUtf8("Запрошенную операцию выполнить не удалось. Для отката внесенных изменений требуется перезагрузка системы");
    if (code == 3018) return QString::fromUtf8("Запрошенную операцию выполнить не удалось. Для отката внесенных изменений инициирована процедура перезагрузки системы");
    if (code == 3019) return QString::fromUtf8("Указанный драйвер принтера не найден в системе. Необходимо загрузить драйвер");
    if (code == 3020) return QString::fromUtf8("Запрошенному заданию печати не удалось выполнить печать. Обновление системы печати требует, чтобы задание было выдано повторно");
    if (code == 3023) return QString::fromUtf8("Имеется проблема с настройкой указанного пользователем");
    if (code == 3029) return QString::fromUtf8("Невозможно запустить локальную систему защиты, так как база данных");
    if (code == 3037) return QString::fromUtf8("@I *ЧАСЫ ВХОДА");
    if (code == 3039) return QString::fromUtf8("Превышен предел службы репликации на число файлов в каталоге");
    if (code == 3040) return QString::fromUtf8("Превышен предел службы репликации на глубину дерева");
    if (code == 3046) return QString::fromUtf8("Не удалось выполнить вход. Пользователь уже вошел");
    if (code == 3052) return QString::fromUtf8("Требуемый параметр не был задан в командной");
    if (code == 3054) return QString::fromUtf8("Невозможно удовлетворить запрос на ресурсы");
    if (code == 3055) return QString::fromUtf8("Проблема с системной настройкой");
    if (code == 3056) return QString::fromUtf8("Системная ошибка");
    if (code == 3057) return QString::fromUtf8("Внутренняя ошибка согласования");
    if (code == 3058) return QString::fromUtf8("Неизвестный параметр в файле настройки или в командной строке");
    if (code == 3059) return QString::fromUtf8("Повторяющийся параметр в файле настройки или в командной строке");
    if (code == 3060) return QString::fromUtf8("Служба не реагирует на команды управления и остановлена");
    if (code == 3061) return QString::fromUtf8("Ошибка при попытке запуска программы службы");
    if (code == 3062) return QString::fromUtf8("Сбой при запуске подчиненной службы");
    if (code == 3064) return QString::fromUtf8("Проблемы с файлом");
    if (code == 3070) return QString::fromUtf8("память");
    if (code == 3071) return QString::fromUtf8("место на диске");
    if (code == 3072) return QString::fromUtf8("поток");
    if (code == 3073) return QString::fromUtf8("процесс");
    if (code == 3074) return QString::fromUtf8("Ошибка безопасности");
    if (code == 3075) return QString::fromUtf8("Неправильный или отсутствующий корневой каталог диспетчера LAN");
    if (code == 3076) return QString::fromUtf8("Сетевое программное обеспечение не установлено");
    if (code == 3077) return QString::fromUtf8("Сервер не запущен");
    if (code == 3078) return QString::fromUtf8("Нет доступа с сервера к базе данных учетных записей (NET.ACC)");
    if (code == 3079) return QString::fromUtf8("В дереве LANMAN установлены несовместимые файлы");
    if (code == 3080) return QString::fromUtf8("Неправильный каталог LANMAN\\LOGS");
    if (code == 3081) return QString::fromUtf8("Невозможно использовать указанный домен");
    if (code == 3082) return QString::fromUtf8("Имя компьютера используется как псевдоним сообщений на другом компьютере");
    if (code == 3083) return QString::fromUtf8("Сбой при объявлении имени сервера");
    if (code == 3084) return QString::fromUtf8("Неправильная конфигурация базы данных учетных записей пользователей");
    if (code == 3085) return QString::fromUtf8("Сервер не запущен с защитой на уровне пользователя");
    if (code == 3087) return QString::fromUtf8("Неправильная конфигурация рабочей станции");
    if (code == 3088) return QString::fromUtf8("Подробности см. в журнале ошибок");
    if (code == 3089) return QString::fromUtf8("Не удалось выполнить запись в файл");
    if (code == 3090) return QString::fromUtf8("Файл ADDPAK поврежден.  Удалите LANMAN\\NETPROG\\ADDPAK.SER");
    if (code == 3091) return QString::fromUtf8("Невозможно запустить сервер LM386, так как не выполняется программа CACHE.EXE");
    if (code == 3092) return QString::fromUtf8("Нет записи для данного компьютера в базе данных защиты");
    if (code == 3093) return QString::fromUtf8("Данный компьютер не является членом группы SERVERS");
    if (code == 3094) return QString::fromUtf8("В базе данных локальной защиты нет группы SERVERS");
    if (code == 3095) return QString::fromUtf8("Этот компьютер является членом рабочей группы, ");
    if (code == 3096) return QString::fromUtf8("Не удалось найти основной контроллер домена для данного домена");
    if (code == 3098) return QString::fromUtf8("Служба не смогла выполнить проверку имени на основном контроллере домена");
    if (code == 3099) return QString::fromUtf8("Ошибочные дата создания или серийный номер базы данных защиты");
    if (code == 3100) return QString::fromUtf8("Сбой в операции из-за ошибки сетевой программы");
    if (code == 3102) return QString::fromUtf8("Служба не может наложить долговременную блокировку на сегмент");
    if (code == 3103) return QString::fromUtf8("Служба не может снять долговременную блокировку сегмента");
    if (code == 3106) return QString::fromUtf8("Принят неизвестный сетевой управляющий блок (NCB).  Данные содержат NCB");
    if (code == 3107) return QString::fromUtf8("Сеть не запущена");
    if (code == 3108) return QString::fromUtf8("Сбой при обращении DosDevIoctl или DosFsCtl к NETWKSTA.SYS");
    if (code == 3111) return QString::fromUtf8("Неизвестная ошибка NetBIOS");
    if (code == 3112) return QString::fromUtf8("Принят неправильный блок сообщений сервера (SMB)");
    if (code == 3114) return QString::fromUtf8("Некоторые элементы в журнале ошибок были потеряны");
    if (code == 3120) return QString::fromUtf8("Параметры инициализации, управляющие использованием всех ресурсов,");
    if (code == 3121) return QString::fromUtf8("Сервер не может увеличить размер сегмента памяти");
    if (code == 3124) return QString::fromUtf8("Сервер не запустился. Все три параметра chdev");
    if (code == 3129) return QString::fromUtf8("Сервер не может обновить файл расписания AT. Файл");
    if (code == 3130) return QString::fromUtf8("Сервер обнаружил ошибку при вызове");
    if (code == 3132) return QString::fromUtf8("Сбой при долговременной блокировке буферов сервера");
    if (code == 3140) return QString::fromUtf8("Служба остановлена из-за последовательно повторяющихся");
    if (code == 3141) return QString::fromUtf8("Сервер сообщений остановлен из-за блокировки");
    if (code == 3151) return QString::fromUtf8("Не удалось вывести сообщение POPUP из-за системной ошибки вызова VIO");
    if (code == 3152) return QString::fromUtf8("Принят неправильный блок сообщений сервера (SMB).  Данные содержат SMB");
    if (code == 3160) return QString::fromUtf8("Размер сегмента сведений о рабочей станции превышает 64 К");
    if (code == 3161) return QString::fromUtf8("Рабочая станция не смогла получить имя и номер компьютера");
    if (code == 3162) return QString::fromUtf8("Рабочая станция не смогла инициализировать Async NetBIOS Thread");
    if (code == 3163) return QString::fromUtf8("Рабочая станция не смогла открыть начальный общий сегмент");
    if (code == 3164) return QString::fromUtf8("Таблица обслуживающего компьютера рабочей станции заполнена");
    if (code == 3165) return QString::fromUtf8("Принят блок сообщений сервера (SMB) с неправильным слотом сообщений.  SMB представляет данные");
    if (code == 3166) return QString::fromUtf8("Ошибка при запуске базы данных учетных записей пользователей с рабочей станции");
    if (code == 3167) return QString::fromUtf8("Ошибка при ответе рабочей станции на запрос на подтверждение SSI");
    if (code == 3174) return QString::fromUtf8("Сервер не может прочитать файл расписания AT");
    if (code == 3175) return QString::fromUtf8("Сервер обнаружил неправильную запись расписания AT");
    if (code == 3176) return QString::fromUtf8("Сервер не смог найти файл расписания AT и создал новый");
    if (code == 3185) return QString::fromUtf8("Невозможно запустить локальную систему защиты, так как база данных");
    if (code == 3204) return QString::fromUtf8("Сервер не может создать поток команд");
    if (code == 3213) return QString::fromUtf8("Превышен предел службы репликации на число файлов в каталоге");
    if (code == 3214) return QString::fromUtf8("Превышен предел службы репликации на глубину дерева");
    if (code == 3215) return QString::fromUtf8("В слот сообщений принято неопознанное сообщение");
    if (code == 3217) return QString::fromUtf8("Не удалось выполнить вход. Пользователь уже вошел");
    if (code == 3230) return QString::fromUtf8("Сбой питания на сервере");
    if (code == 3231) return QString::fromUtf8("Сервер выключен службой UPS");
    if (code == 3232) return QString::fromUtf8("Служба UPS не завершила выполнение указанного");
    if (code == 3233) return QString::fromUtf8("Не удалось открыть драйвер UPS.  Код ошибки");
    if (code == 3234) return QString::fromUtf8("Питание восстановлено");
    if (code == 3235) return QString::fromUtf8("Неправильная конфигурация указанного пользователем");
    if (code == 3256) return QString::fromUtf8("Непоправимая ошибка в библиотеке динамической");
    if (code == 3257) return QString::fromUtf8("Система возвращает неизвестный код ошибки");
    if (code == 3258) return QString::fromUtf8("Файл журнала ошибок отказоустойчивости, LANROOT\\LOGS\\FT.LOG,");
    if (code == 3259) return QString::fromUtf8("В файле журнала ошибок отказоустойчивости, LANROOT\\LOGS\\FT.LOG,");
    if (code == 3301) return QString::fromUtf8("Удаленный IPC");
    if (code == 3302) return QString::fromUtf8("Удаленный Admin");
    if (code == 3303) return QString::fromUtf8("Общий сервер входа");
    if (code == 3304) return QString::fromUtf8("Ошибка в сети");
    if (code == 3400) return QString::fromUtf8("Недостаточно памяти для запуска службы рабочей станции");
    if (code == 3401) return QString::fromUtf8("Ошибка при чтении элемента NETWORKS в файле LANMAN.INI");
    if (code == 3404) return QString::fromUtf8("Слишком много элементов NETWORKS в файле LANMAN.INI");
    if (code == 3408) return QString::fromUtf8("Программа не может использоваться с данной операционной системой");
    if (code == 3409) return QString::fromUtf8("Перенаправитель уже установлен");
    if (code == 3411) return QString::fromUtf8("Ошибка при установке NETWKSTA.SYS");
    if (code == 3412) return QString::fromUtf8("Ошибка в связывании сопоставителя");
    if (code == 3419) return QString::fromUtf8("У вас имеются открытые файлы или устройства и принудительное");
    if (code == 3420) return QString::fromUtf8("Общий ресурс по умолчанию для внутреннего использования");
    if (code == 3421) return QString::fromUtf8("Служба сообщений");
    if (code == 3500) return QString::fromUtf8("Команда выполнена успешно");
    if (code == 3501) return QString::fromUtf8("Использован недопустимый параметр");
    if (code == 3503) return QString::fromUtf8("Неправильное число аргументов команды");
    if (code == 3504) return QString::fromUtf8("Команда выполнена с одной или несколькими ошибками");
    if (code == 3505) return QString::fromUtf8("Использован параметр с недопустимым значением");
    if (code == 3510) return QString::fromUtf8("Используется команда с конфликтующими ключами");
    if (code == 3512) return QString::fromUtf8("Для программы требуется более поздняя версия");
    if (code == 3513) return QString::fromUtf8("Имеется больше данных, чем может возвратить Windows");
    if (code == 3515) return QString::fromUtf8("Эта команда может использоваться только для контроллера домена Windows");
    if (code == 3516) return QString::fromUtf8("Эта команда не может использоваться для контроллера домена Windows");
    if (code == 3520) return QString::fromUtf8("Запущены следующие службы Windows");
    if (code == 3525) return QString::fromUtf8("Останов службы рабочей станции приведет также к останову службы сервера");
    if (code == 3526) return QString::fromUtf8("На рабочей станции имеются открытые файлы");
    if (code == 3533) return QString::fromUtf8("Служба запускается или останавливается.  Повторите попытку позже");
    if (code == 3534) return QString::fromUtf8("Служба не сообщает об ошибке");
    if (code == 3535) return QString::fromUtf8("Ошибка при управлении устройством");
    if (code == 3660) return QString::fromUtf8("Следующие рабочие станции имеют сеансы на сервере");
    if (code == 3661) return QString::fromUtf8("Следующие рабочие станции имеют на сервере сеансы с открытыми файлами");
    if (code == 3666) return QString::fromUtf8("Направлен псевдоним сообщений");
    if (code == 3670) return QString::fromUtf8("Имеются следующие удаленные подключения");
    if (code == 3671) return QString::fromUtf8("Продолжение приведет к отмене подключений");
    if (code == 3676) return QString::fromUtf8("Новые подключения будут запомнены");
    if (code == 3677) return QString::fromUtf8("Новые подключения не будут запомнены");
    if (code == 3678) return QString::fromUtf8("Ошибка при сохранении конфигурации.  Запоминаемые подключения не были изменены");
    if (code == 3679) return QString::fromUtf8("Ошибка при чтении конфигурации");
    if (code == 3682) return QString::fromUtf8("Сетевые службы не запущены");
    if (code == 3683) return QString::fromUtf8("В списке нет элементов");
    if (code == 3689) return QString::fromUtf8("Служба рабочей станции уже запущена. Windows пропустит командные параметры для рабочей станции");
    if (code == 3694) return QString::fromUtf8("Невозможно удалить очередь общего доступа, содержащую задание печати");
    if (code == 3710) return QString::fromUtf8("Ошибка при открытии файла справки");
    if (code == 3711) return QString::fromUtf8("Файл справки пуст");
    if (code == 3712) return QString::fromUtf8("Файл справки поврежден");
    if (code == 3714) return QString::fromUtf8("Эта операция является привилегированной на системах");
    if (code == 3716) return QString::fromUtf8("Неизвестный тип устройства");
    if (code == 3717) return QString::fromUtf8("Файл журнала поврежден");
    if (code == 3718) return QString::fromUtf8("Имена программных файлов должны иметь окончание .EXE");
    if (code == 3719) return QString::fromUtf8("Не удалось найти соответствующий общий ресурс. Удаление не выполнено");
    if (code == 3720) return QString::fromUtf8("Неправильное значение в поле числа единиц за неделю в записи пользователя");
    if (code == 3725) return QString::fromUtf8("Ошибка при удалении общего ресурса");
    if (code == 3726) return QString::fromUtf8("Недействительное имя пользователя");
    if (code == 3727) return QString::fromUtf8("Недействительный пароль");
    if (code == 3728) return QString::fromUtf8("Пароли не совпадают");
    if (code == 3729) return QString::fromUtf8("Не восстановлены все постоянные подключения");
    if (code == 3730) return QString::fromUtf8("Имя не является правильным именем компьютера или домена");
    if (code == 3732) return QString::fromUtf8("Для данного ресурса не могут быть заданы стандартные разрешения");
    if (code == 3734) return QString::fromUtf8("Не был введен действительный пароль");
    if (code == 3735) return QString::fromUtf8("Не было введено действительное имя");
    if (code == 3736) return QString::fromUtf8("Этот ресурс нельзя сделать общим");
    if (code == 3737) return QString::fromUtf8("Строка разрешений содержит неправильные значения");
    if (code == 3738) return QString::fromUtf8("Данная операция выполняется только для принтеров или устройств связи");
    if (code == 3743) return QString::fromUtf8("Сервер не настроен для удаленного администрирования");
    if (code == 3752) return QString::fromUtf8("Нет пользователей, имеющих сеансы с данным сервером");
    if (code == 3756) return QString::fromUtf8("Неправильный отклик");
    if (code == 3757) return QString::fromUtf8("Не был получен допустимый отклик");
    if (code == 3758) return QString::fromUtf8("Представленный список назначений не совпадает со списком назначений очереди принтера");
    if (code == 3761) return QString::fromUtf8("Указанный временной интервал заканчивается раньше, чем начинается");
    if (code == 3764) return QString::fromUtf8("Неполный час в указанном времени");
    if (code == 3765) return QString::fromUtf8("Нельзя смешивать12- и 24-часовой форматы времени");
    if (code == 3767) return QString::fromUtf8("Введен недопустимый формат даты");
    if (code == 3768) return QString::fromUtf8("Введен недопустимый диапазон дней");
    if (code == 3769) return QString::fromUtf8("Введен недопустимый диапазон времени");
    if (code == 3770) return QString::fromUtf8("Недопустимые аргументы NET USER. Проверьте минимальную");
    if (code == 3771) return QString::fromUtf8("Для ENABLESCRIPT требуется значение YES");
    if (code == 3773) return QString::fromUtf8("Введен неправильный код страны");
    if (code == 3774) return QString::fromUtf8("Пользователь был успешно создан, но не добавлен");
    if (code == 3775) return QString::fromUtf8("Представлен неправильный контекст для пользователя");
    if (code == 3777) return QString::fromUtf8("Отправка файлов более не поддерживается");
    if (code == 3778) return QString::fromUtf8("Возможно, не указаны пути для общих ресурсов ADMIN$ и IPC$");
    if (code == 3784) return QString::fromUtf8("Только дисковые общие ресурсы могут быть помечены как кэшируемые");
    if (code == 3802) return QString::fromUtf8("Неправильная дата в расписании");
    if (code == 3803) return QString::fromUtf8("Корневой каталог LANMAN недоступен");
    if (code == 3804) return QString::fromUtf8("Не удалось открыть файл SCHED.LOG");
    if (code == 3805) return QString::fromUtf8("Служба сервера не запущена");
    if (code == 3806) return QString::fromUtf8("Идентификатор задания AT не существует");
    if (code == 3807) return QString::fromUtf8("Файл расписания AT поврежден");
    if (code == 3808) return QString::fromUtf8("Сбой при удалении из-за ошибки в файле расписания AT");
    if (code == 3809) return QString::fromUtf8("Длина командной строки не может превышать 259 знаков");
    if (code == 3810) return QString::fromUtf8("Невозможно обновить файл расписания AT, так как диск заполнен");
    if (code == 3812) return QString::fromUtf8("Неправильный файл расписания AT.  Удалите этот файл и создайте новый");
    if (code == 3813) return QString::fromUtf8("Файл расписания AT был удален");
    if (code == 3814) return QString::fromUtf8("Синтаксис данной команды");
    if (code == 3815) return QString::fromUtf8("Истек интервал ожидания команды AT");
    if (code == 3816) return QString::fromUtf8("Минимальный срок действия пароля учетной записи пользователя");
    if (code == 3817) return QString::fromUtf8("Указанное значение несовместимо с серверами");
    if (code == 3901) return QString::fromUtf8("****");
    if (code == 3902) return QString::fromUtf8("**** неожиданный конец сообщения ****");
    if (code == 3905) return QString::fromUtf8("Нажмите ESC для выхода");
    if (code == 3906) return QString::fromUtf8("...");
    if (code == 3912) return QString::fromUtf8("Не удалось найти сервер времени");
    if (code == 3915) return QString::fromUtf8("Не удалось определить основной каталог пользователя");
    if (code == 3916) return QString::fromUtf8("Не был указан основной каталог пользователя");
    if (code == 3920) return QString::fromUtf8("Не осталось свободных букв диска");
    if (code == 3936) return QString::fromUtf8("Этот компьютер в данный момент не настроен на использование конкретного SNTP-сервера");
    if (code == 3950) return QString::fromUtf8("Повторите указанную операцию как кэшированную операцию ввода-вывода");
    if (code == 3953) return QString::fromUtf8("Неправильный синтаксис");
    if (code == 3960) return QString::fromUtf8("Указан недопустимый номер файла");
    if (code == 3961) return QString::fromUtf8("Указан недопустимый номер задания печати");
    if (code == 3963) return QString::fromUtf8("Не удалось найти указанную учетную запись пользователя или группы");
    if (code == 3965) return QString::fromUtf8("Пользователь был добавлен, но не удалось разрешить пользование");
    if (code == 3966) return QString::fromUtf8("Служба доступа к файлам и принтерам NetWare не установлена");
    if (code == 3967) return QString::fromUtf8("Не удалось задать свойства пользователя для службы доступа к файлам и принтерам NetWare");
    if (code == 3969) return QString::fromUtf8("NetWare-совместимый вход");
    if (code == 4000) return QString::fromUtf8("Ошибка WINS при обработке команды");
    if (code == 4001) return QString::fromUtf8("Нельзя удалить локальную часть WINS");
    if (code == 4002) return QString::fromUtf8("Ошибка при импорте из файла");
    if (code == 4003) return QString::fromUtf8("Ошибка при архивации данных.  Производилась ли ранее полная архивация?");
    if (code == 4004) return QString::fromUtf8("Ошибка при архивации данных.  Проверьте папку, в которую производится архивация базы данных");
    if (code == 4005) return QString::fromUtf8("Имя не существует в базе данных WINS");
    if (code == 4006) return QString::fromUtf8("Репликация невозможна без предварительной настройки");
    if (code == 4050) return QString::fromUtf8("Версия предоставленного описания содержимого не поддерживается");
    if (code == 4051) return QString::fromUtf8("Предоставленное описание содержимого неправильно сформировано");
    if (code == 4052) return QString::fromUtf8("Запрошенные данные не удалось найти ни в локальном кэше, ни в кэшах одноранговых узлов");
    if (code == 4053) return QString::fromUtf8("Дополнительные данные недоступны или не требуются");
    if (code == 4054) return QString::fromUtf8("Предоставленный объект не был инициализирован");
    if (code == 4055) return QString::fromUtf8("Предоставленный объект уже был инициализирован");
    if (code == 4056) return QString::fromUtf8("Операция завершения уже выполняется");
    if (code == 4057) return QString::fromUtf8("Предоставленный объект уже был сделан недействительным");
    if (code == 4058) return QString::fromUtf8("Элемент уже существует и не был заменен");
    if (code == 4059) return QString::fromUtf8("Невозможно отменить запрошенную операцию, так как она уже завершена");
    if (code == 4060) return QString::fromUtf8("Невозможно отменить запрошенную операцию, так как она уже выполнена");
    if (code == 4061) return QString::fromUtf8("Операция выполнила доступ к данным за границами допустимых данных");
    if (code == 4062) return QString::fromUtf8("Запрошенная версия не поддерживается");
    if (code == 4063) return QString::fromUtf8("Недопустимое значение конфигурации");
    if (code == 4064) return QString::fromUtf8("Номер SKU не лицензирован");
    if (code == 4065) return QString::fromUtf8("Служба PeerDist находится в процессе инициализации и будет доступна в ближайшее время");
    if (code == 4100) return QString::fromUtf8("DHCP-клиент запросил IP-адрес, который уже используется в сети. Локальный интерфейс будет отключен до тех пор, пока DHCP-клиент сможет получить новый адрес");
    if (code == 4200) return QString::fromUtf8("Переданный GUID не был распознан поставщиком данных WMI как правильный GUID");
    if (code == 4201) return QString::fromUtf8("Переданное имя копии не было распознано поставщиком данных WMI как допустимое имя");
    if (code == 4202) return QString::fromUtf8("Переданный идентификатор данных не был распознан поставщиком данных WMI как допустимый");
    if (code == 4203) return QString::fromUtf8("Не удается завершить запрос WMI. Запрос нужно повторить");
    if (code == 4204) return QString::fromUtf8("Не удается найти поставщика данных WMI");
    if (code == 4205) return QString::fromUtf8("Поставщик данных WMI ссылается на незарегистрированный элемент ");
    if (code == 4206) return QString::fromUtf8("Блок данных WMI или оповещение о событиях уже включено");
    if (code == 4207) return QString::fromUtf8("Блок данных WMI более недоступен");
    if (code == 4208) return QString::fromUtf8("Служба данных WMI более недоступна");
    if (code == 4209) return QString::fromUtf8("Поставщик данных WMI не смог выполнить запрос");
    if (code == 4210) return QString::fromUtf8("Информация WMI MOF неверна");
    if (code == 4211) return QString::fromUtf8("Регистрационная информация WMI неверна");
    if (code == 4212) return QString::fromUtf8("Блок данных WMI или оповещение о событиях уже отключено");
    if (code == 4213) return QString::fromUtf8("Элемент данных или блок данных WMI предназначен только для чтения");
    if (code == 4214) return QString::fromUtf8("Нельзя изменить элемент данных или блок данных WMI");
    if (code == 4300) return QString::fromUtf8("Идентификатор носителя не представляет правильный носитель");
    if (code == 4301) return QString::fromUtf8("Идентификатор библиотеки не представляет правильной библиотеки");
    if (code == 4302) return QString::fromUtf8("Идентификатор пула носителей не представляет  правильный пул");
    if (code == 4303) return QString::fromUtf8("Дисковод и носитель несовместимы или принадлежат разным библиотекам");
    if (code == 4304) return QString::fromUtf8("Этот носитель сейчас находится вне сети. Для выполнения операции его надо подключить к сети");
    if (code == 4305) return QString::fromUtf8("Эту операцию выполнить нельзя выполнить на автономной библиотеке");
    if (code == 4306) return QString::fromUtf8("Библиотека, дисковод или носитель пусты");
    if (code == 4307) return QString::fromUtf8("Библиотека, дисковод или носитель должны быть пусты для выполнения этой операции");
    if (code == 4308) return QString::fromUtf8("Отсутствует носитель в библиотеке или пуле");
    if (code == 4309) return QString::fromUtf8("Ресурс, требуемый для этой операции, отключен");
    if (code == 4310) return QString::fromUtf8("Идентификатор носителя представляет неверный носитель");
    if (code == 4311) return QString::fromUtf8("Очистка диска невозможна или этот диск ее не поддерживает");
    if (code == 4312) return QString::fromUtf8("Идентификатор объекта представляет неверный объект");
    if (code == 4313) return QString::fromUtf8("Чтение и запись в базу данных невозможно");
    if (code == 4314) return QString::fromUtf8("База данных заполнена");
    if (code == 4315) return QString::fromUtf8("Носитель несовместим с устройством или пулом носителей");
    if (code == 4316) return QString::fromUtf8("Ресурс, требуемый для осуществления операции, не существует");
    if (code == 4317) return QString::fromUtf8("Неверный идентификатор операции");
    if (code == 4318) return QString::fromUtf8("Носитель не смонтирован или не готов");
    if (code == 4319) return QString::fromUtf8("Устройство не готово");
    if (code == 4320) return QString::fromUtf8("Оператор или администратор отклонили запрос");
    if (code == 4321) return QString::fromUtf8("Идентификатор диска представляет неверный диск");
    if (code == 4322) return QString::fromUtf8("Библиотека заполнена. Свободные гнезда отсутствуют");
    if (code == 4323) return QString::fromUtf8("Этот транспорт не может получить доступ к носителю");
    if (code == 4324) return QString::fromUtf8("Не удается загрузить носитель в устройство");
    if (code == 4325) return QString::fromUtf8("Информация о статусе устройства недоступна ");
    if (code == 4326) return QString::fromUtf8("Невозможно получить информацию о состоянии гнезда");
    if (code == 4327) return QString::fromUtf8("Невозможно получить информацию о состоянии транспорта");
    if (code == 4328) return QString::fromUtf8("Невозможно использовать этот транспорт, т.к. он уже используется");
    if (code == 4329) return QString::fromUtf8("Не удается открыть или закрыть порт вставки/извлечения");
    if (code == 4330) return QString::fromUtf8("Не удается извлечь носитель, т.к. он находится в устройстве");
    if (code == 4331) return QString::fromUtf8("Гнездо очистителя уже зарезервировано");
    if (code == 4332) return QString::fromUtf8("Гнездо очистителя не зарезервировано");
    if (code == 4333) return QString::fromUtf8("Чистящий картридж выполнил наибольшее из возможных число чисток диска");
    if (code == 4334) return QString::fromUtf8("Непредвиденный идентификатор на носителе");
    if (code == 4335) return QString::fromUtf8("Невозможно удалить последний из оставшихся элементов группы");
    if (code == 4336) return QString::fromUtf8("В полученном сообщении превышен наибольший размер, допустимый для данного параметра");
    if (code == 4337) return QString::fromUtf8("Том содержит системные файлы или файлы подкачки");
    if (code == 4338) return QString::fromUtf8("Этот тип носителя нельзя удалить из библиотеки, т.к. по меньшей мере один из дисков библиотеки подтверждает возможность поддержки этого типа носителя");
    if (code == 4339) return QString::fromUtf8("Этот автономный носитель не может быть подключен к системе, т.к. отсутствуют работающие диски, которые можно использовать");
    if (code == 4340) return QString::fromUtf8("В ленточной библиотеке установлен чистящий картридж");
    if (code == 4341) return QString::fromUtf8("Не удается использовать порт для вставки и извлечения, поскольку он не пуст");
    if (code == 4342) return QString::fromUtf8("Ошибка");
    if (code == 4343) return QString::fromUtf8("OK");
    if (code == 4344) return QString::fromUtf8("Y");
    if (code == 4345) return QString::fromUtf8("N");
    if (code == 4346) return QString::fromUtf8("Любой");
    if (code == 4347) return QString::fromUtf8("A");
    if (code == 4348) return QString::fromUtf8("P");
    if (code == 4349) return QString::fromUtf8("(не найден)");
    if (code == 4350) return QString::fromUtf8("Файл в данный момент недоступен для использования на этом компьютере");
    if (code == 4351) return QString::fromUtf8("Служба съемных носителей сейчас неработоспособна");
    if (code == 4352) return QString::fromUtf8("Служба съемных носителей обнаружила ошибку на носителе");
    if (code == 4353) return QString::fromUtf8("Read");
    if (code == 4354) return QString::fromUtf8("Change");
    if (code == 4355) return QString::fromUtf8("Full");
    if (code == 4356) return QString::fromUtf8("Введите пароль");
    if (code == 4358) return QString::fromUtf8("Введите пароль для пользователя");
    if (code == 4359) return QString::fromUtf8("Введите пароль для общего ресурса");
    if (code == 4360) return QString::fromUtf8("Введите ваш пароль");
    if (code == 4361) return QString::fromUtf8("Повторите ввод пароля для подтверждения");
    if (code == 4362) return QString::fromUtf8("Введите старый пароль пользователя");
    if (code == 4363) return QString::fromUtf8("Введите новый пароль пользователя");
    if (code == 4364) return QString::fromUtf8("Введите ваш новый пароль");
    if (code == 4365) return QString::fromUtf8("Введите пароль службы Replicator");
    if (code == 4368) return QString::fromUtf8("Введите ваше имя пользователя");
    if (code == 4372) return QString::fromUtf8("Сведения о задании печати");
    if (code == 4378) return QString::fromUtf8("Допускается управление следующими выполняющимися службами");
    if (code == 4379) return QString::fromUtf8("Доступна статистика для следующих выполняющихся служб");
    if (code == 4381) return QString::fromUtf8("Синтаксис данной команды");
    if (code == 4382) return QString::fromUtf8("Параметры данной команды");
    if (code == 4383) return QString::fromUtf8("Введите имя основного контроллера домена");
    if (code == 4385) return QString::fromUtf8("Воскресенье");
    if (code == 4386) return QString::fromUtf8("Понедельник");
    if (code == 4387) return QString::fromUtf8("Вторник");
    if (code == 4388) return QString::fromUtf8("Среда");
    if (code == 4389) return QString::fromUtf8("Четверг");
    if (code == 4390) return QString::fromUtf8("Этот файл или папка не являются точкой повторной обработки");
    if (code == 4391) return QString::fromUtf8("Нельзя установить атрибут точки повторной обработки, т.к. он конфликтует с существующим атрибутом");
    if (code == 4392) return QString::fromUtf8("Данные в буфере точки повторной обработки являются недопустимыми");
    if (code == 4393) return QString::fromUtf8("Тег в буфере точки повторной обработки являются недопустимыми");
    if (code == 4394) return QString::fromUtf8("Имеется несовпадение между тегом, указанном в запросе, и теге в буфере точки повторной обработки");
    if (code == 4395) return QString::fromUtf8("Ср");
    if (code == 4396) return QString::fromUtf8("Чт");
    if (code == 4397) return QString::fromUtf8("Пт");
    if (code == 4398) return QString::fromUtf8("Сб");
    if (code == 4399) return QString::fromUtf8("Сб");
    if (code == 4401) return QString::fromUtf8("Имя группы");
    if (code == 4402) return QString::fromUtf8("Комментарий");
    if (code == 4403) return QString::fromUtf8("Члены");
    if (code == 4406) return QString::fromUtf8("Имя псевдонима");
    if (code == 4407) return QString::fromUtf8("Комментарий");
    if (code == 4408) return QString::fromUtf8("Члены");
    if (code == 4411) return QString::fromUtf8("Имя пользователя");
    if (code == 4412) return QString::fromUtf8("Полное имя");
    if (code == 4413) return QString::fromUtf8("Комментарий");
    if (code == 4414) return QString::fromUtf8("Комментарий пользователя");
    if (code == 4415) return QString::fromUtf8("Параметры");
    if (code == 4416) return QString::fromUtf8("Код страны");
    if (code == 4417) return QString::fromUtf8("Уровень привилегий");
    if (code == 4418) return QString::fromUtf8("Привилегии оператора");
    if (code == 4419) return QString::fromUtf8("Учетная запись активна");
    if (code == 4420) return QString::fromUtf8("Учетная запись просрочена");
    if (code == 4421) return QString::fromUtf8("Последний пароль задан");
    if (code == 4422) return QString::fromUtf8("Действие пароля завершается");
    if (code == 4423) return QString::fromUtf8("Пароль допускает изменение");
    if (code == 4424) return QString::fromUtf8("Разрешенные рабочие станции");
    if (code == 4425) return QString::fromUtf8("Максимальный объем диска");
    if (code == 4426) return QString::fromUtf8("Без ограничений");
    if (code == 4427) return QString::fromUtf8("Членство в локальных группах");
    if (code == 4428) return QString::fromUtf8("Контроллер домена");
    if (code == 4429) return QString::fromUtf8("Сценарий входа");
    if (code == 4430) return QString::fromUtf8("Последний вход");
    if (code == 4431) return QString::fromUtf8("Членство в глобальных группах");
    if (code == 4432) return QString::fromUtf8("Разрешенные часы входа");
    if (code == 4433) return QString::fromUtf8("Все");
    if (code == 4434) return QString::fromUtf8("Нет");
    if (code == 4436) return QString::fromUtf8("Основной каталог");
    if (code == 4437) return QString::fromUtf8("Требуется пароль");
    if (code == 4438) return QString::fromUtf8("Пользователь может изменить пароль");
    if (code == 4439) return QString::fromUtf8("Конфигурация пользователя");
    if (code == 4440) return QString::fromUtf8("Блокировка");
    if (code == 4450) return QString::fromUtf8("Имя компьютера");
    if (code == 4451) return QString::fromUtf8("Имя пользователя");
    if (code == 4452) return QString::fromUtf8("Версия программы");
    if (code == 4453) return QString::fromUtf8("Активная рабочая станция на");
    if (code == 4454) return QString::fromUtf8("Корневой каталог Windows NT");
    if (code == 4455) return QString::fromUtf8("Домен рабочей станции");
    if (code == 4456) return QString::fromUtf8("Домен входа");
    if (code == 4457) return QString::fromUtf8("Другие домены");
    if (code == 4458) return QString::fromUtf8("Интервал ожидания открытия COM-порта (с)");
    if (code == 4459) return QString::fromUtf8("Отсчет передачи COM-порта (байт)");
    if (code == 4460) return QString::fromUtf8("Таймаут передачи COM-порта (мс)");
    if (code == 4461) return QString::fromUtf8("Таймаут печати сеанса DOS (с)");
    if (code == 4462) return QString::fromUtf8("Максимальный размер журнала ошибок (К)");
    if (code == 4463) return QString::fromUtf8("Максимальный размер временного буфера (К)");
    if (code == 4464) return QString::fromUtf8("Число сетевых буферов");
    if (code == 4465) return QString::fromUtf8("Число символьных буферов");
    if (code == 4466) return QString::fromUtf8("Размер сетевых буферов");
    if (code == 4467) return QString::fromUtf8("Размер символьных буферов");
    if (code == 4468) return QString::fromUtf8("Полное имя компьютера");
    if (code == 4469) return QString::fromUtf8("DNS-имя домена рабочей станции");
    if (code == 4470) return QString::fromUtf8("Windows 2002");
    if (code == 4481) return QString::fromUtf8("Имя сервера");
    if (code == 4482) return QString::fromUtf8("Комментарий для сервера");
    if (code == 4483) return QString::fromUtf8("Отправка административных оповещений");
    if (code == 4484) return QString::fromUtf8("Версия программы");
    if (code == 4485) return QString::fromUtf8("Сервер одноранговой сети");
    if (code == 4486) return QString::fromUtf8("Windows NT");
    if (code == 4487) return QString::fromUtf8("Уровень сервера");
    if (code == 4488) return QString::fromUtf8("Windows NT для сервера");
    if (code == 4489) return QString::fromUtf8("Активный сервер на");
    if (code == 4492) return QString::fromUtf8("Скрытый сервер");
    if (code == 4500) return QString::fromUtf8("Хранилище единственных копий на этом томе недоступно");
    if (code == 4506) return QString::fromUtf8("Максимальное число  пользователей");
    if (code == 4507) return QString::fromUtf8("Максимальное число работающих администраторов");
    if (code == 4508) return QString::fromUtf8("Максимальное число общих ресурсов");
    if (code == 4509) return QString::fromUtf8("Максимальное число подключений к ресурсам");
    if (code == 4510) return QString::fromUtf8("Максимальное число открытых файлов на сервере");
    if (code == 4511) return QString::fromUtf8("Максимальное число открытых файлов в сеансе");
    if (code == 4512) return QString::fromUtf8("Максимальное число блокировок файлов");
    if (code == 4520) return QString::fromUtf8("Время холостого хода сеанса (мин)");
    if (code == 4526) return QString::fromUtf8("Общий уровень");
    if (code == 4527) return QString::fromUtf8("Уровень пользователя");
    if (code == 4530) return QString::fromUtf8("Неограниченный сервер");
    if (code == 4570) return QString::fromUtf8("Принудительный выход по истечении времени через:");
    if (code == 4571) return QString::fromUtf8("Блокировка учетной записи после ввода ошибочных паролей:");
    if (code == 4572) return QString::fromUtf8("Минимальный срок действия пароля (дней):");
    if (code == 4573) return QString::fromUtf8("Максимальный срок действия пароля (дней):");
    if (code == 4574) return QString::fromUtf8("Минимальная длина пароля:");
    if (code == 4575) return QString::fromUtf8("Хранение неповторяющихся паролей:");
    if (code == 4576) return QString::fromUtf8("Роль компьютера:");
    if (code == 4577) return QString::fromUtf8("Основной контроллер для домена рабочей станции:");
    if (code == 4578) return QString::fromUtf8("Блокировка после ошибок ввода пароля:");
    if (code == 4579) return QString::fromUtf8("Длительность блокировки (минут):");
    if (code == 4580) return QString::fromUtf8("Сброс счетчика блокировок через (минут):");
    if (code == 4600) return QString::fromUtf8("Статистика после");
    if (code == 4601) return QString::fromUtf8("Принятые сеансы");
    if (code == 4602) return QString::fromUtf8("Сеансы с истекшим интервалом");
    if (code == 4603) return QString::fromUtf8("Сеансы с ошибками");
    if (code == 4604) return QString::fromUtf8("Послано КБ");
    if (code == 4605) return QString::fromUtf8("Принято КБ");
    if (code == 4606) return QString::fromUtf8("Среднее время отклика (мс)");
    if (code == 4607) return QString::fromUtf8("Ошибки сети");
    if (code == 4608) return QString::fromUtf8("Доступ к файлам");
    if (code == 4609) return QString::fromUtf8("Задания печати в очереди");
    if (code == 4610) return QString::fromUtf8("Системные ошибки");
    if (code == 4611) return QString::fromUtf8("Нарушение паролей");
    if (code == 4612) return QString::fromUtf8("Нарушение разрешений");
    if (code == 4613) return QString::fromUtf8("Доступ к устройствам связи");
    if (code == 4614) return QString::fromUtf8("Запущенные сеансы");
    if (code == 4615) return QString::fromUtf8("Переключенные сеансы");
    if (code == 4616) return QString::fromUtf8("Сбои при запуске сеансов");
    if (code == 4617) return QString::fromUtf8("Отключенные сеансы");
    if (code == 4618) return QString::fromUtf8("Сетевые операции ввода/вывода");
    if (code == 4619) return QString::fromUtf8("Доступ к файлам и каналам");
    if (code == 4620) return QString::fromUtf8("Исчерпанные буферы времени");
    if (code == 4621) return QString::fromUtf8("Большие буферы");
    if (code == 4622) return QString::fromUtf8("Затребованные буферы");
    if (code == 4626) return QString::fromUtf8("Выполненные подключения");
    if (code == 4627) return QString::fromUtf8("Неудачные подключения");
    if (code == 4630) return QString::fromUtf8("Получено байт");
    if (code == 4631) return QString::fromUtf8("Принятые блоки сообщений сервера SMB");
    if (code == 4632) return QString::fromUtf8("Передано байт");
    if (code == 4633) return QString::fromUtf8("Переданные блоки сообщений сервера SMB");
    if (code == 4634) return QString::fromUtf8("Операции чтения");
    if (code == 4635) return QString::fromUtf8("Операции записи");
    if (code == 4636) return QString::fromUtf8("Отказано в чтении");
    if (code == 4637) return QString::fromUtf8("Отказано в записи");
    if (code == 4638) return QString::fromUtf8("Ошибки сети");
    if (code == 4639) return QString::fromUtf8("Выполненные подключения");
    if (code == 4640) return QString::fromUtf8("Повторные подключения");
    if (code == 4641) return QString::fromUtf8("Отключений от сервера");
    if (code == 4642) return QString::fromUtf8("Запущенные сеансы");
    if (code == 4643) return QString::fromUtf8("Зависание сеансов");
    if (code == 4644) return QString::fromUtf8("Сбои в сеансах");
    if (code == 4645) return QString::fromUtf8("Сбои в операциях");
    if (code == 4646) return QString::fromUtf8("Счетчик использования");
    if (code == 4647) return QString::fromUtf8("Счетчик сбоев при использовании");
    if (code == 4655) return QString::fromUtf8("Направление имени сообщения успешно отменено");
    if (code == 4661) return QString::fromUtf8("Пароль успешно изменен");
    if (code == 4664) return QString::fromUtf8("Сообщение успешно отослано всем пользователям в сети");
    if (code == 4666) return QString::fromUtf8("Сообщение успешно отослано всем пользователям данного сервера");
    if (code == 4696) return QString::fromUtf8("Windows NT Server");
    if (code == 4697) return QString::fromUtf8("Windows NT Workstation");
    if (code == 4698) return QString::fromUtf8("Рабочая станция MS-DOS");
    if (code == 4700) return QString::fromUtf8("Имя сервера            Заметки");
    if (code == 4701) return QString::fromUtf8("Невозможно перечислить серверы в секции не по умолчанию");
    if (code == 4702) return QString::fromUtf8("(UNC)");
    if (code == 4703) return QString::fromUtf8("...");
    if (code == 4704) return QString::fromUtf8("Домен");
    if (code == 4706) return QString::fromUtf8("Неправильный поставщик сетевых услуг. Доступные сети:");
    if (code == 4710) return QString::fromUtf8("Диск");
    if (code == 4711) return QString::fromUtf8("Печать");
    if (code == 4712) return QString::fromUtf8("Порт");
    if (code == 4713) return QString::fromUtf8("IPC");
    if (code == 4714) return QString::fromUtf8("Состояние   Локальный  Удаленный                 Сеть");
    if (code == 4715) return QString::fromUtf8("OK");
    if (code == 4716) return QString::fromUtf8("Ожидание");
    if (code == 4717) return QString::fromUtf8("Пауза");
    if (code == 4718) return QString::fromUtf8("Отсоединен");
    if (code == 4719) return QString::fromUtf8("Ошибка");
    if (code == 4720) return QString::fromUtf8("Подключение");
    if (code == 4721) return QString::fromUtf8("Переподключение");
    if (code == 4722) return QString::fromUtf8("Состояние");
    if (code == 4723) return QString::fromUtf8("Локальное имя");
    if (code == 4724) return QString::fromUtf8("Удаленное имя");
    if (code == 4725) return QString::fromUtf8("Тип ресурса");
    if (code == 4726) return QString::fromUtf8("Открыто");
    if (code == 4727) return QString::fromUtf8("Подключено");
    if (code == 4728) return QString::fromUtf8("Нет доступа");
    if (code == 4730) return QString::fromUtf8("Общее имя   Ресурс                        Заметки");
    if (code == 4731) return QString::fromUtf8("Имя общего ресурса");
    if (code == 4732) return QString::fromUtf8("Ресурс");
    if (code == 4733) return QString::fromUtf8("Очередь");
    if (code == 4734) return QString::fromUtf8("Разрешение");
    if (code == 4735) return QString::fromUtf8("Макс. число пользователей");
    if (code == 4736) return QString::fromUtf8("Не ограничен");
    if (code == 4737) return QString::fromUtf8("Пользователи");
    if (code == 4739) return QString::fromUtf8("Кэширование");
    if (code == 4740) return QString::fromUtf8("Код         Путь                                 Пользователь          if (code ==  Блокировок");
    if (code == 4741) return QString::fromUtf8("Идентификатор файла");
    if (code == 4742) return QString::fromUtf8("Блокировки");
    if (code == 4743) return QString::fromUtf8("Разрешения");
    if (code == 4744) return QString::fromUtf8("Имя общего ресурса");
    if (code == 4745) return QString::fromUtf8("Тип");
    if (code == 4746) return QString::fromUtf8("Используется как");
    if (code == 4747) return QString::fromUtf8("Комментарий");
    if (code == 4750) return QString::fromUtf8("Компьютер              Пользователь         Тип клиента      Ожидание открытия");
    if (code == 4751) return QString::fromUtf8("Компьютер");
    if (code == 4752) return QString::fromUtf8("Время сеанса");
    if (code == 4753) return QString::fromUtf8("Время простоя");
    if (code == 4754) return QString::fromUtf8("Сетевое имя     Тип     Открыто");
    if (code == 4755) return QString::fromUtf8("Тип клиента");
    if (code == 4756) return QString::fromUtf8("Вход гостя");
    if (code == 4770) return QString::fromUtf8("Документы кэшируются вручную");
    if (code == 4771) return QString::fromUtf8("Документы кэшируются автоматически");
    if (code == 4772) return QString::fromUtf8("Программы и документы кэшируются автоматически");
    if (code == 4773) return QString::fromUtf8("Ручное кэширование документов с помощью BranchCache включено");
    if (code == 4774) return QString::fromUtf8("Кэширование отключено");
    if (code == 4775) return QString::fromUtf8("Automatic");
    if (code == 4776) return QString::fromUtf8("Manual");
    if (code == 4777) return QString::fromUtf8("Documents");
    if (code == 4778) return QString::fromUtf8("Programs");
    if (code == 4779) return QString::fromUtf8("BranchCache");
    if (code == 4780) return QString::fromUtf8("None");
    if (code == 4800) return QString::fromUtf8("Имя");
    if (code == 4801) return QString::fromUtf8("Направлен на");
    if (code == 4802) return QString::fromUtf8("Направлен вам от");
    if (code == 4803) return QString::fromUtf8("Пользователи данного сервера");
    if (code == 4804) return QString::fromUtf8("Операция Net Send прервана нажатием клавиш Ctrl+Break пользователем");
    if (code == 4810) return QString::fromUtf8("Имя                         Задание     if (code ==       Размер            Состояние");
    if (code == 4811) return QString::fromUtf8("задания");
    if (code == 4812) return QString::fromUtf8("Печать");
    if (code == 4813) return QString::fromUtf8("Имя");
    if (code == 4814) return QString::fromUtf8("Задание №");
    if (code == 4815) return QString::fromUtf8("Размер");
    if (code == 4816) return QString::fromUtf8("Состояние");
    if (code == 4817) return QString::fromUtf8("Файл разделителя");
    if (code == 4818) return QString::fromUtf8("Комментарий");
    if (code == 4819) return QString::fromUtf8("Приоритет");
    if (code == 4820) return QString::fromUtf8("Печать после");
    if (code == 4821) return QString::fromUtf8("Печать до");
    if (code == 4822) return QString::fromUtf8("Обработчик заданий печати");
    if (code == 4823) return QString::fromUtf8("Дополнительные сведения");
    if (code == 4824) return QString::fromUtf8("Параметры");
    if (code == 4825) return QString::fromUtf8("Устройства печати");
    if (code == 4826) return QString::fromUtf8("Активный принтер");
    if (code == 4827) return QString::fromUtf8("Задержанный принтер");
    if (code == 4828) return QString::fromUtf8("Ошибка принтера");
    if (code == 4829) return QString::fromUtf8("Принтер был удален");
    if (code == 4830) return QString::fromUtf8("Состояние принтера неизвестно");
    if (code == 4841) return QString::fromUtf8("Задание №");
    if (code == 4842) return QString::fromUtf8("Получено от пользователя");
    if (code == 4843) return QString::fromUtf8("Уведомить");
    if (code == 4844) return QString::fromUtf8("Тип данных задания");
    if (code == 4845) return QString::fromUtf8("Параметры задания");
    if (code == 4846) return QString::fromUtf8("Ожидание");
    if (code == 4847) return QString::fromUtf8("Содержится в очереди");
    if (code == 4848) return QString::fromUtf8("Постановка в очередь");
    if (code == 4849) return QString::fromUtf8("Пауза");
    if (code == 4850) return QString::fromUtf8("Отключение");
    if (code == 4851) return QString::fromUtf8("Ошибка");
    if (code == 4852) return QString::fromUtf8("Нет бумаги");
    if (code == 4853) return QString::fromUtf8("Требуется вмешательство");
    if (code == 4854) return QString::fromUtf8("Идет печать");
    if (code == 4855) return QString::fromUtf8("на");
    if (code == 4862) return QString::fromUtf8("Драйвер");
    if (code == 4930) return QString::fromUtf8("Пользователь              Тип                 Дата");
    if (code == 4931) return QString::fromUtf8("Взаимоблокировка");
    if (code == 4932) return QString::fromUtf8("Служба");
    if (code == 4933) return QString::fromUtf8("Сервер");
    if (code == 4934) return QString::fromUtf8("Сервер запущен");
    if (code == 4935) return QString::fromUtf8("Пауза на сервере");
    if (code == 4936) return QString::fromUtf8("Продолжение работы сервера");
    if (code == 4937) return QString::fromUtf8("Сервер остановлен");
    if (code == 4938) return QString::fromUtf8("Сеанс");
    if (code == 4939) return QString::fromUtf8("Вход гостя");
    if (code == 4940) return QString::fromUtf8("Вход пользователя");
    if (code == 4941) return QString::fromUtf8("Вход администратора");
    if (code == 4942) return QString::fromUtf8("Обычный выход");
    if (code == 4943) return QString::fromUtf8("Вход");
    if (code == 4944) return QString::fromUtf8("Ошибка при выходе");
    if (code == 4945) return QString::fromUtf8("Автоотключение при выходе");
    if (code == 4946) return QString::fromUtf8("Отключение администратором при выходе");
    if (code == 4947) return QString::fromUtf8("Выход из-за ограничений на число входов");
    if (code == 4948) return QString::fromUtf8("Служба");
    if (code == 4957) return QString::fromUtf8("Учетная запись");
    if (code == 4964) return QString::fromUtf8("Системные параметры записи были изменены");
    if (code == 4965) return QString::fromUtf8("Ограничения на вход");
    if (code == 4966) return QString::fromUtf8("Превышен предел:  НЕИЗВЕСТНЫЙ");
    if (code == 4967) return QString::fromUtf8("Превышен предел:  Часы входа");
    if (code == 4968) return QString::fromUtf8("Превышен предел:  Учетная запись просрочена");
    if (code == 4969) return QString::fromUtf8("Превышен предел:  Неправильный идентификатор рабочей станции");
    if (code == 4970) return QString::fromUtf8("Превышен предел:  Учетная запись отключена");
    if (code == 4971) return QString::fromUtf8("Превышен предел:  Учетная запись удалена");
    if (code == 4972) return QString::fromUtf8("Общий ресурс");
    if (code == 4978) return QString::fromUtf8("Неправильный пароль");
    if (code == 4979) return QString::fromUtf8("Требуется привилегия администратора");
    if (code == 4980) return QString::fromUtf8("Доступ");
    if (code == 4984) return QString::fromUtf8("Отказано в доступе");
    if (code == 4985) return QString::fromUtf8("Неизвестный");
    if (code == 4986) return QString::fromUtf8("Другой");
    if (code == 4987) return QString::fromUtf8("Длительность:");
    if (code == 4988) return QString::fromUtf8("Длительность: нет доступа");
    if (code == 4989) return QString::fromUtf8("Длительность: менее одной секунды");
    if (code == 4990) return QString::fromUtf8("(отсутствует)");
    if (code == 4994) return QString::fromUtf8("Доступ закончен");
    if (code == 4995) return QString::fromUtf8("Вход в сеть");
    if (code == 4996) return QString::fromUtf8("Отказано во входе");
    if (code == 4997) return QString::fromUtf8("Программа             Сообщение             Время");
    if (code == 4999) return QString::fromUtf8("Учетная запись разблокирована администратором");
    if (code == 5000) return QString::fromUtf8("Выход из сети");
    if (code == 5001) return QString::fromUtf8("Невозможно завершить операцию, поскольку от этого ресурса зависят другие ресурсы");
    if (code == 5002) return QString::fromUtf8("Не удается найти зависимость ресурса кластера");
    if (code == 5003) return QString::fromUtf8("Ресурс кластера нельзя сделать зависимым от указанного ресурса, т.к. он уже является зависимым");
    if (code == 5004) return QString::fromUtf8("Ресурс кластера находится в состоянии \"вне сети\"");
    if (code == 5005) return QString::fromUtf8("Узел кластера недоступен для этой операции");
    if (code == 5006) return QString::fromUtf8("Ресурс кластера недоступен");
    if (code == 5007) return QString::fromUtf8("Не удается найти ресурс кластера");
    if (code == 5008) return QString::fromUtf8("Кластер отключен");
    if (code == 5009) return QString::fromUtf8("Узел кластера нельзя отделить от кластера, пока узел не будет отключен, или пока этот узел не является последним");
    if (code == 5010) return QString::fromUtf8("Этот объект уже существует");
    if (code == 5011) return QString::fromUtf8("Этот объект уже присутствует в списке");
    if (code == 5012) return QString::fromUtf8("Кластерная группа недоступна для новых запросов");
    if (code == 5013) return QString::fromUtf8("Не удается найти кластерную группу");
    if (code == 5014) return QString::fromUtf8("Невозможно завершить эту операцию, т.к. кластерная группа недоступна по сети");
    if (code == 5015) return QString::fromUtf8("Не удалось выполнить операцию, поскольку указанный узел кластера не является владельцем этого ресурса, либо не может стать владельцем этого ресурса");
    if (code == 5016) return QString::fromUtf8("Не удалось выполнить операцию, поскольку указанный узел кластера не является владельцем этой группы, либо не может стать владельцем этой группы");
    if (code == 5017) return QString::fromUtf8("Ресурс кластера не может быть создан в указанном мониторе ресурсов");
    if (code == 5018) return QString::fromUtf8("Ресурс кластера не может быть подключен к сети с помощью монитора ресурсов");
    if (code == 5019) return QString::fromUtf8("Невозможно завершить эту операцию, т.к. ресурс кластера подключен к сети");
    if (code == 5020) return QString::fromUtf8("Ресурс кластера не может быть удален или переведен в состояние \"вне сети\", т.к. это ресурс кворума");
    if (code == 5021) return QString::fromUtf8("Кластер не может сделать выбранный ресурс как ресурс кворума, т.к. у нет соответствующих характеристик");
    if (code == 5022) return QString::fromUtf8("Идет завершение работы программного обеспечения кластера");
    if (code == 5023) return QString::fromUtf8("Группа или ресурс не находятся в нужном состоянии для выполнения требуемой операции");
    if (code == 5024) return QString::fromUtf8("Свойства были сохранены, но не все изменения смогут вступить в силу до тех пор, пока ресурс окажется в сети следующий раз");
    if (code == 5025) return QString::fromUtf8("Кластер не может сделать существующий ресурс ресурсом кворума, т.к. это он не соответствует классу общего хранилища");
    if (code == 5026) return QString::fromUtf8("Ресурс кластера не может быть удален, т.к. является ресурсом ядра");
    if (code == 5027) return QString::fromUtf8("Не удалось подключить к сети ресурс кворума");
    if (code == 5028) return QString::fromUtf8("Не удается создать или подключить журнал кворума");
    if (code == 5029) return QString::fromUtf8("Журнал кворума поврежден");
    if (code == 5030) return QString::fromUtf8("Эту запись сделать в журнале нельзя, т.к. превышен максимальный размер записи");
    if (code == 5031) return QString::fromUtf8("Размер журнал превысил максимально допустимое значение");
    if (code == 5032) return QString::fromUtf8("В журнале кластера не найдено записи контрольной точки");
    if (code == 5033) return QString::fromUtf8("На диске отсутствует даже минимально необходимое место для размещения журнала");
    if (code == 5034) return QString::fromUtf8("Узел кластера не смог взять управление над ресурсом кворума, т.к. этот ресурс принадлежит другому активному узлу");
    if (code == 5035) return QString::fromUtf8("Сеть кластеров недоступна для этой операции");
    if (code == 5036) return QString::fromUtf8("Узел кластера недоступен для этой операции");
    if (code == 5037) return QString::fromUtf8("Узлы кластеров должны быть во включенном состоянии для выполнения этой операции");
    if (code == 5038) return QString::fromUtf8("Ошибка ресурса кластера");
    if (code == 5039) return QString::fromUtf8("Недопустимый ресурс кластера");
    if (code == 5040) return QString::fromUtf8("Узел кластера уже существует");
    if (code == 5041) return QString::fromUtf8("Идет процесс присоединения узла к кластеру");
    if (code == 5042) return QString::fromUtf8("Узел кластера не найден");
    if (code == 5043) return QString::fromUtf8("Информация о локальном узле кластера не найдена");
    if (code == 5044) return QString::fromUtf8("Сеть кластеров уже существует");
    if (code == 5045) return QString::fromUtf8("Сеть кластеров не найдена");
    if (code == 5046) return QString::fromUtf8("Интерфейс сети кластеров уже существует");
    if (code == 5047) return QString::fromUtf8("Интерфейс сети кластеров не найден");
    if (code == 5048) return QString::fromUtf8("Недопустимый запрос от кластера к этому объекту");
    if (code == 5049) return QString::fromUtf8("Недопустимый поставщик сетевого кластера");
    if (code == 5050) return QString::fromUtf8("Узел кластера отключен");
    if (code == 5051) return QString::fromUtf8("Нет доступа к узлу кластера");
    if (code == 5052) return QString::fromUtf8("Этот узел кластера не входит в состав кластера");
    if (code == 5053) return QString::fromUtf8("Операция присоединения к кластеру не запущена");
    if (code == 5054) return QString::fromUtf8("Недопустимая сеть кластеров");
    if (code == 5055) return QString::fromUtf8("Мар");
    if (code == 5056) return QString::fromUtf8("Узел кластера включен");
    if (code == 5057) return QString::fromUtf8("IP-адрес кластера уже используется");
    if (code == 5058) return QString::fromUtf8("Узел кластера не приостановлен");
    if (code == 5059) return QString::fromUtf8("Контекст безопасности кластера недоступен");
    if (code == 5060) return QString::fromUtf8("Сеть кластеров не настроена для передачи данных внутри кластера");
    if (code == 5061) return QString::fromUtf8("Узел кластера уже включен");
    if (code == 5062) return QString::fromUtf8("Узел кластера уже отключен");
    if (code == 5063) return QString::fromUtf8("Сеть кластеров уже подключена по сети");
    if (code == 5064) return QString::fromUtf8("Сеть кластеров уже находится в состоянии \"вне сети\"");
    if (code == 5065) return QString::fromUtf8("Этот узел кластера уже является членом кластера");
    if (code == 5066) return QString::fromUtf8("Только сеть кластеров настроена для взаимодействия между двумя или более активными узлами кластеров. Возможность внутренней связи между узлами не может быть удалена (из сети)");
    if (code == 5067) return QString::fromUtf8("Один или несколько ресурсов кластера используют сеть для работы клиентских служб. Нельзя удалить функцию доступа клиентов по сети");
    if (code == 5068) return QString::fromUtf8("Данная операция не может быть выполнена на ресурсе кластера, т.к. это ресурс кворума. Нельзя переключить ресурс кворума в состояние \"вне сети\" или изменить его список возможных владельцев");
    if (code == 5069) return QString::fromUtf8("Ресурс кворума кластера не может иметь никаких зависимых отношений");
    if (code == 5070) return QString::fromUtf8("Узел кластера приостановлен");
    if (code == 5071) return QString::fromUtf8("Не удалось подключить ресурс кластера к сети. Узел владельца не может запустить этот ресурс");
    if (code == 5072) return QString::fromUtf8("Узел кластера не готов для выполнения запрошенной операции");
    if (code == 5073) return QString::fromUtf8("Идет отключение узла кластера");
    if (code == 5074) return QString::fromUtf8("Операция присоединения к кластеру была прервана");
    if (code == 5075) return QString::fromUtf8("Сбой операции присоединения к кластеру вследствие несовместимости версий программ между присоединяемым узлом и его спонсором");
    if (code == 5076) return QString::fromUtf8("Невозможно создать ресурс, т.к. для кластера достигнут предел числа контролируемых ресурсов");
    if (code == 5077) return QString::fromUtf8("Конфигурация системы изменилась в течение операции формирования или присоединения к домену. Операция формирования или присоединения прервана");
    if (code == 5078) return QString::fromUtf8("Указанный тип ресурса не найден");
    if (code == 5079) return QString::fromUtf8("Указанный узел не поддерживает ресурс такого типа. Это может быть вследствие несовпадения версий или отсутствия библиотеки ресурсов (DLL) на этом узле");
    if (code == 5080) return QString::fromUtf8("Указанное имя ресурса не поддерживается этой библиотекой ресурсов (DLL). Это м.б. вследствие неверного (или поврежденного) имени, полученного библиотекой ресурсов");
    if (code == 5081) return QString::fromUtf8("Для RPC-сервера нельзя зарегистрировать пакеты проверки подлинности");
    if (code == 5082) return QString::fromUtf8("Эту группу нельзя подключить к сети, т.к. владелец группы не находится в списке предпочтений группы. Чтобы изменить узел владельца для группы, переместите группу");
    if (code == 5083) return QString::fromUtf8("Сбой операции присоединения вследствие того, что номер последовательности базы данных кластера изменился или несовместим с узлом блокиратора.Это могло случиться в течение операции присоединения, если база данных кластера была изменена в тот момент");
    if (code == 5084) return QString::fromUtf8("Монитор ресурсов не позволит выполнить ошибочную операци, пока ресурс находится в своем текущем состоянии. Это может случиться, если ресурс находится в состоянии ожидания");
    if (code == 5085) return QString::fromUtf8("Код, не принадлежащий блокиратору, получил запрос на резервирование блока для проведения общего обновления");
    if (code == 5086) return QString::fromUtf8("Служба кластера не может найти диск кворума");
    if (code == 5087) return QString::fromUtf8("Возможно, резервная копия базы данных кластера повреждена");
    if (code == 5088) return QString::fromUtf8("Корень DFS уже существует в этом узле кластера");
    if (code == 5089) return QString::fromUtf8("Не удалась попытка изменить свойство ресурса, т.к. имеется конфликт с другим существующим свойством");
    if (code == 5090) return QString::fromUtf8("Испания");
    if (code == 5091) return QString::fromUtf8("Дания");
    if (code == 5092) return QString::fromUtf8("Швеция");
    if (code == 5093) return QString::fromUtf8("Норвегия");
    if (code == 5094) return QString::fromUtf8("Германия");
    if (code == 5095) return QString::fromUtf8("Австралия");
    if (code == 5096) return QString::fromUtf8("Япония");
    if (code == 5097) return QString::fromUtf8("Корея");
    if (code == 5098) return QString::fromUtf8("Китай (КНР)");
    if (code == 5099) return QString::fromUtf8("Тайвань");
    if (code == 5100) return QString::fromUtf8("Азия");
    if (code == 5101) return QString::fromUtf8("Португалия");
    if (code == 5102) return QString::fromUtf8("Финляндия");
    if (code == 5103) return QString::fromUtf8("Арабский");
    if (code == 5104) return QString::fromUtf8("Иврит");
    if (code == 5153) return QString::fromUtf8("Служба UPS приступает к окончательному отключению");
    if (code == 5170) return QString::fromUtf8("Для запуска рабочей станции необходима команда NET START");
    if (code == 5175) return QString::fromUtf8("Удаленный IPC");
    if (code == 5176) return QString::fromUtf8("Удаленный Admin");
    if (code == 5177) return QString::fromUtf8("Стандартный общий ресурс");
    if (code == 5178) return QString::fromUtf8("Профили пользователей");
    if (code == 5291) return QString::fromUtf8("Никогда");
    if (code == 5292) return QString::fromUtf8("Никогда");
    if (code == 5293) return QString::fromUtf8("Никогда");
    if (code == 5295) return QString::fromUtf8("NET.HLP");
    if (code == 5296) return QString::fromUtf8("NET.HLP");
    if (code == 5297) return QString::fromUtf8("Запретить");
    if (code == 5300) return QString::fromUtf8("Запрос сетевого управляющего блока (NCB) успешно завершен");
    if (code == 5301) return QString::fromUtf8("Недопустимый размер буфера сетевого управляющего блока (NCB) на SEND DATAGRAM,");
    if (code == 5302) return QString::fromUtf8("В сетевом управляющем блоке (NCB) указан недопустимый массив дескрипторов");
    if (code == 5303) return QString::fromUtf8("В сетевом управляющем блоке (NCB) указана недопустимая команда");
    if (code == 5304) return QString::fromUtf8("В сетевом управляющем блоке (NCB) указан недопустимый коррелятор");
    if (code == 5305) return QString::fromUtf8("Истек интервал ожидания команды сетевого управляющего блока (NCB).  Возможно");
    if (code == 5306) return QString::fromUtf8("Получено неполное сообщение сетевого управляющего блока (NCB)");
    if (code == 5307) return QString::fromUtf8("В сетевом управляющем блоке (NCB) указан недопустимый адрес буфера");
    if (code == 5308) return QString::fromUtf8("Сеанс с номером, указанным в сетевом управляющем блоке (NCB), не активен");
    if (code == 5309) return QString::fromUtf8("Нет ресурса, доступного для сетевой платы");
    if (code == 5310) return QString::fromUtf8("Сеанс, указанный в сетевом управляющем блоке (NCB), был закрыт");
    if (code == 5311) return QString::fromUtf8("Команда сетевого управляющего блока (NCB) была отменена");
    if (code == 5312) return QString::fromUtf8("Сегмент сообщения, указанный в сетевом управляющем блоке (NCB),");
    if (code == 5313) return QString::fromUtf8("Имя уже существует в локальной таблице имен адаптеров");
    if (code == 5314) return QString::fromUtf8("Таблиц имен сетевых адаптеров заполнена");
    if (code == 5315) return QString::fromUtf8("Для сетевого имени имеются активные сеансы.  Выполняется отключение");
    if (code == 5316) return QString::fromUtf8("Ранее полученная команда Receive Lookahead активна");
    if (code == 5317) return QString::fromUtf8("Таблица локальных сеансов заполнена. Отказ на запрос сетевого управляющего блока (NCB)");
    if (code == 5318) return QString::fromUtf8("Отказ в открытии сеанса сетевого управляющего блока (NCB).  Нет команд LISTEN");
    if (code == 5319) return QString::fromUtf8("В сетевом управляющем блоке (NCB) указан недопустимый номер имени");
    if (code == 5320) return QString::fromUtf8("Вызываемое имя, указанное в сетевом управляющем блоке (NCB), не найдено");
    if (code == 5321) return QString::fromUtf8("Имя, указанное в сетевом управляющем блоке (NCB), не найдено.  Нельзя включать '*' или");
    if (code == 5322) return QString::fromUtf8("Имя, указанное в сетевом управляющем блоке (NCB), используется удаленным адаптером");
    if (code == 5323) return QString::fromUtf8("Имя, указанное в сетевом управляющем блоке (NCB), было удалено");
    if (code == 5324) return QString::fromUtf8("Аномальное завершение сеанса, указанного в сетевом управляющем блоке (NCB)");
    if (code == 5325) return QString::fromUtf8("Сетевой протокол удалил два или несколько одинаковых");
    if (code == 5326) return QString::fromUtf8("Принят неправильный пакет протокола.  Возможно, существует");
    if (code == 5333) return QString::fromUtf8("Интерфейс NetBIOS занят");
    if (code == 5334) return QString::fromUtf8("Слишком много ожидающих команд в сетевом управляющем блоке (NCB)");
    if (code == 5335) return QString::fromUtf8("В сетевом управляющем блоке (NCB) указан неправильный номер платы");
    if (code == 5336) return QString::fromUtf8("Команда сетевого управляющего блока (NCB) была завершена в момент команды отмены");
    if (code == 5337) return QString::fromUtf8("Имя, указанное в сетевом управляющем блоке (NCB), зарезервировано");
    if (code == 5338) return QString::fromUtf8("Команда сетевого управляющего блока (NCB) не допускает отмены");
    if (code == 5351) return QString::fromUtf8("Имеется несколько запросов сетевых управляющих блоков (NCB) на один сеанс");
    if (code == 5352) return QString::fromUtf8("Ошибка сетевой платы. Единственной допустимой командой NetBIOS");
    if (code == 5354) return QString::fromUtf8("Превышено максимальное число приложений");
    if (code == 5356) return QString::fromUtf8("Затребованные ресурсы недоступны");
    if (code == 5364) return QString::fromUtf8("Системная ошибка");
    if (code == 5365) return QString::fromUtf8("Сбой контрольной суммы ROM");
    if (code == 5366) return QString::fromUtf8("Сбой при проверке RAM");
    if (code == 5367) return QString::fromUtf8("Ошибка цифрового сигнала замыкания на себя");
    if (code == 5368) return QString::fromUtf8("Ошибка аналогового сигнала замыкания на себя");
    if (code == 5369) return QString::fromUtf8("Сбой интерфейса");
    if (code == 5370) return QString::fromUtf8("Возвращен нераспознаваемый код сетевого управляющего блока (NCB)");
    if (code == 5380) return QString::fromUtf8("Неисправность сетевой платы");
    if (code == 5381) return QString::fromUtf8("Ожидается команда сетевого управляющего блока (NCB)");
    if (code == 5509) return QString::fromUtf8("Невозможно запустить Windows в текущей конфигурации");
    if (code == 5600) return QString::fromUtf8("Не удалось сделать общим путь к папкам User или Script");
    if (code == 5601) return QString::fromUtf8("Пароль данного компьютера не найден в локальной");
    if (code == 5602) return QString::fromUtf8("Внутренняя ошибка при доступе к локальной");
    if (code == 5728) return QString::fromUtf8("Не удалось загрузить ни один транспорт");
    if (code == 5739) return QString::fromUtf8("Этот домен содержит больше глобальных групп, чем может быть реплицировано LanMan");
    if (code == 5742) return QString::fromUtf8("Служба не может загрузить сообщения, требуемые для загрузки клиентов удаленной загрузки");
    if (code == 5743) return QString::fromUtf8("Служба обнаружила серьезную ошибку и не может обеспечить удаленную загрузку");
    if (code == 5744) return QString::fromUtf8("Служба обнаружила серьезную системную ошибку и закрывается");
    if (code == 5760) return QString::fromUtf8("Служба обнаружила ошибку при проверке настройки RPL");
    if (code == 5761) return QString::fromUtf8("Служба обнаружила ошибку при создании конфигураций RPL для всех настроек");
    if (code == 5762) return QString::fromUtf8("Служба обнаружила ошибку при доступе к реестру");
    if (code == 5763) return QString::fromUtf8("Служба обнаружила ошибку при замене просроченного файла RPLDISK.SYS");
    if (code == 5764) return QString::fromUtf8("Служба обнаружила ошибку при добавлении учетных записей защиты или установке");
    if (code == 5765) return QString::fromUtf8("Служба не смогла выполнить резервирование собственной базы данных");
    if (code == 5766) return QString::fromUtf8("Служба не смогла выполнить инициализацию по своей базе данных.  Вероятно,");
    if (code == 5767) return QString::fromUtf8("Служба не смогла восстановить собственную базу данных по архивной копии");
    if (code == 5768) return QString::fromUtf8("Служба успешно восстановила собственную базу данных по архивной копии");
    if (code == 5769) return QString::fromUtf8("Служба не смогла выполнить инициализацию по восстановленной базе данных");
    if (code == 5771) return QString::fromUtf8("База данных удаленной загрузки с сервера имеет формат NT 3.5 / NT 3.51");
    if (code == 5806) return QString::fromUtf8("На данном контроллере домена динамическое обновление DNS отключено вручную");
    if (code == 5808) return QString::fromUtf8("Отмена регистрации некоторых записей локатора контроллеров доменов DNS");
    if (code == 5890) return QString::fromUtf8("Операция несовместима с текущим состоянием узла");
    if (code == 5891) return QString::fromUtf8("Ресурс кворума не содержит журнал кворума");
    if (code == 5892) return QString::fromUtf8("Отвечающий за членство модуль потребовал закрытия кластерной службы на этом узле");
    if (code == 5893) return QString::fromUtf8("Ошибка операции присоединения из-за несоответствия идентификаторов экземпляров кластера присоединяющегося узла и его спонсора");
    if (code == 5894) return QString::fromUtf8("Не удалось найти соответствующую кластерную сеть для указанного IP-адреса");
    if (code == 5895) return QString::fromUtf8("Реальный тип данных свойства не соответствует ожидаемому");
    if (code == 5896) return QString::fromUtf8("Узел был успешно исключен из кластера, однако этот узел не очищен. Чтобы определить, какие шаги очистки не выполнены и как выполнить восстановление, найдите в журнале событий приложений записи об отказоустойчивости кластера");
    if (code == 5897) return QString::fromUtf8("Два или более значения, заданных для свойств ресурса, конфликтуют друг с другом");
    if (code == 5898) return QString::fromUtf8("Этот компьютер нельзя включить в кластер");
    if (code == 5899) return QString::fromUtf8("Этот компьютер нельзя включить в кластер, так как на нем установлена неверная версия Windows");
    if (code == 5900) return QString::fromUtf8("Кластер с указанным именем не может быть создан, поскольку кластер с данным именем уже существует. Укажите другое имя кластера");
    if (code == 5901) return QString::fromUtf8("Действие конфигурации кластера уже выполнено");
    if (code == 5902) return QString::fromUtf8("Действие конфигурации кластера нельзя отменить");
    if (code == 5903) return QString::fromUtf8("Буква диска, назначенная системному диску на одном узле, конфликтует с буквой диска, назначенной диску на другом узле");
    if (code == 5904) return QString::fromUtf8("Один или несколько узлов в кластере используют версию Windows, не поддерживающую эту операцию");
    if (code == 5905) return QString::fromUtf8("Имя соответствующей учетной записи компьютера не совпадает с сетевым именем этого ресурса");
    if (code == 5906) return QString::fromUtf8("Нет доступных сетевых адаптеров");
    if (code == 5907) return QString::fromUtf8("Узел кластера поврежден");
    if (code == 5908) return QString::fromUtf8("Эта группа не может принять запрос, так как она будет перемещена в другой узел");
    if (code == 5909) return QString::fromUtf8("Ресурс этого типа не может принять запрос, так как он выполняет другую операцию");
    if (code == 5910) return QString::fromUtf8("Время ожидания вызова библиотеки DLL ресурса кластера истекло");
    if (code == 5911) return QString::fromUtf8("Указан неправильный адрес для ресурса \"IPv6-адрес\". Требуется глобальный IPv6-адрес, и он должен соответствовать кластерной сети. Адреса совместимости использовать не разрешается");
    if (code == 5912) return QString::fromUtf8("Обнаружена внутренняя ошибка кластера. Сделана попытка вызвать недопустимую функцию");
    if (code == 5913) return QString::fromUtf8("Значение параметра находится за пределами допустимого диапазона");
    if (code == 5914) return QString::fromUtf8("При отправке данных в другой узел кластера произошла ошибка сети. Количество переданных байт меньше требуемого значения");
    if (code == 5915) return QString::fromUtf8("Сделана попытка выполнить недопустимую операцию в реестре кластера");
    if (code == 5916) return QString::fromUtf8("Входная строка знаков неправильно завершена");
    if (code == 5917) return QString::fromUtf8("Входная строка знаков имеет неправильный формат для содержащихся в ней данных");
    if (code == 5918) return QString::fromUtf8("Обнаружена внутренняя ошибка кластера. Сделана попытка запустить транзакцию базы данных кластера, которая уже выполняется");
    if (code == 5919) return QString::fromUtf8("Обнаружена внутренняя ошибка кластера. Произошла попытка завершения транзакции базы данных кластера, в то время как выполняющихся транзакций нет");
    if (code == 5920) return QString::fromUtf8("Обнаружена внутренняя ошибка кластера. Данные не были правильно инициализированы");
    if (code == 5921) return QString::fromUtf8("Ошибка при чтении из потока данных. Возвращено неожиданное число байт");
    if (code == 5922) return QString::fromUtf8("Ошибка при записи в поток данных. Не удалось записать требуемое число байт");
    if (code == 5923) return QString::fromUtf8("Ошибка при десериализации потока данных кластера");
    if (code == 5924) return QString::fromUtf8("Одно или несколько значений свойств для этого ресурса конфликтуют со значениями свойств, связанных с зависимыми ресурсами");
    if (code == 5925) return QString::fromUtf8("Для создания кластера нет кворума узлов кластера");
    if (code == 5926) return QString::fromUtf8("Сеть кластеров недопустима для адреса IPv6 ресурса, или она не соответствует заданному адресу");
    if (code == 5927) return QString::fromUtf8("Сеть кластеров недопустима для ресурса туннельного режима IPv6. Проверьте конфигурацию IP-адреса ресурса, от которого зависит туннельный ресурс IPv6");
    if (code == 5928) return QString::fromUtf8("Ресурс кворума не может храниться в группе доступных хранилищ");
    if (code == 5929) return QString::fromUtf8("Слишком глубокий уровень вложения зависимостей для этого ресурса");
    if (code == 5930) return QString::fromUtf8("Обращение к библиотеке ресурсов вызвало необрабатываемое исключение");
    if (code == 5931) return QString::fromUtf8("Сбой инициализации процесса RHS");
    if (code == 5932) return QString::fromUtf8("Средство отказоустойчивости кластеров не установлено на данном узле");
    if (code == 5933) return QString::fromUtf8("Для данной операции необходимо, чтобы ресурсы на том же узле находились в состоянии \"в сети\"");
    if (code == 5934) return QString::fromUtf8("Невозможно добавить новый узел: достигнуто максимальное количество узлов в данном кластере");
    if (code == 5935) return QString::fromUtf8("Невозможно создать кластер: указанное число узлов превышает максимально разрешенное");
    if (code == 5936) return QString::fromUtf8("Не удалось использовать указанное имя кластера: включенный объект компьютера с таким именем уже существует в домене");
    if (code == 5937) return QString::fromUtf8("Невозможно уничтожить данный кластер. До уничтожения кластера необходимо удалить содержащиеся в нем группы несистемных приложений");
    if (code == 5938) return QString::fromUtf8("Общий файловый ресурс, сопоставленный данному файловому ресурсу-свидетелю, не может быть расположен на данном кластере или его узлах");
    if (code == 5939) return QString::fromUtf8("Исключение этого узла в данный момент недопустимо. Согласно требованиям кворума, исключение узла приведет к завершению работы кластера");
    if (code == 5940) return QString::fromUtf8("В кластере может содержаться только один экземпляр данного типа ресурса");
    if (code == 5941) return QString::fromUtf8("В каждой ресурсной группе может содержаться только один экземпляр данного типа ресурса");
    if (code == 5942) return QString::fromUtf8("Не удалось подключить к сети данный ресурс: сбой одного или нескольких ресурсов поставщика");
    if (code == 5943) return QString::fromUtf8("Ресурс показывает, что он не может быть подключен к сети ни на одном узле");
    if (code == 5944) return QString::fromUtf8("Невозможно выполнить текущую операцию над этой группой в данный момент");
    if (code == 5945) return QString::fromUtf8("Этот файл или каталог не находится на общем томе кластера");
    if (code == 5946) return QString::fromUtf8("Дескриптор безопасности не соответствует требованиям кластера");
    if (code == 5947) return QString::fromUtf8("В кластере настроен один или несколько ресурсов общих томов");
    if (code == 5948) return QString::fromUtf8("Этой группой или ресурсом нельзя управлять напрямую");
    if (code == 5949) return QString::fromUtf8("Выполняется архивация. Перед попыткой повторить операцию дождитесь завершения архивации");
    if (code == 5950) return QString::fromUtf8("Путь не принадлежит общему тому кластера");
    if (code == 5951) return QString::fromUtf8("К этому узлу не подключен общий том кластера");
    if (code == 5952) return QString::fromUtf8("Таймер наблюдения кластера завершает работу");
    if (code == 6000) return QString::fromUtf8("Указанный файл не может быть зашифрован");
    if (code == 6001) return QString::fromUtf8("Указанный файл не может быть расшифрован");
    if (code == 6002) return QString::fromUtf8("Указанный файл зашифрован и не может быть расшифрован этим пользователем");
    if (code == 6003) return QString::fromUtf8("Для этой системы отсутствует политика надежного восстановления шифрования");
    if (code == 6004) return QString::fromUtf8("В системе не загружен требуемый драйвер шифрования");
    if (code == 6005) return QString::fromUtf8("Этот файл был зашифрован с помощью драйвера иной версии, чем драйвер, загруженный в данный момент");
    if (code == 6006) return QString::fromUtf8("Отсутствуют EFS-ключи, определенные для этого пользователя");
    if (code == 6007) return QString::fromUtf8("Указанный файл не зашифрован");
    if (code == 6008) return QString::fromUtf8("Указанный файл не имеет определенного формата экспорта EFS");
    if (code == 6009) return QString::fromUtf8("Указанный файл имеет атрибут \"только для чтения\"");
    if (code == 6010) return QString::fromUtf8("Запрещено шифрование этой папки");
    if (code == 6011) return QString::fromUtf8("Операции удаленного шифрования на этом сервере не имеет достаточно доверия");
    if (code == 6012) return QString::fromUtf8("Политика восстановления, заданная для системы, содержит неверный сертификат восстановления");
    if (code == 6013) return QString::fromUtf8("Алгоритм шифрования, использованный для исходного файла, нуждается в более длинном буфере для ключа, чем у конечного файла");
    if (code == 6014) return QString::fromUtf8("Этот раздел диска не поддерживает шифрование файлов");
    if (code == 6015) return QString::fromUtf8("На компьютере отключено шифрование файлов");
    if (code == 6016) return QString::fromUtf8("Для расшифровки файла требуется более новая система");
    if (code == 6017) return QString::fromUtf8("Удаленный сервер отправил недопустимый ответ для файла, открытого в режиме шифрования на стороне клиента");
    if (code == 6018) return QString::fromUtf8("Удаленный сервер не поддерживает шифрование на стороне клиента, хотя он претендует на это");
    if (code == 6019) return QString::fromUtf8("Файл зашифрован и должен быть открыт в режиме шифрования на стороне клиента");
    if (code == 6020) return QString::fromUtf8("Создан новый зашифрованный файл, требуется указать $EFS");
    if (code == 6021) return QString::fromUtf8("SMB-клиент запросил CSE FSCTL для файла не-CSE");
    if (code == 6022) return QString::fromUtf8("Запрошенная операция была блокирована политикой. Для получения дополнительных сведений обратитесь к системному администратору");
    if (code == 6118) return QString::fromUtf8("Недоступен список серверов для этой рабочей группы");
    if (code == 6200) return QString::fromUtf8("Служба планировщика заданий должна запускаться с использованием системной учетной записи. Отдельные задания могут использовать другие учетные записи");
    if (code == 6600) return QString::fromUtf8("Служба журнала обнаружила неправильный сектор журнала");
    if (code == 6601) return QString::fromUtf8("Служба журнала обнаружила сектор журнала с неправильным битом четности блока");
    if (code == 6602) return QString::fromUtf8("Служба журнала обнаружила пересопоставленный сектор журнала");
    if (code == 6603) return QString::fromUtf8("Служба журнала обнаружила частичный или неполный блок журнала");
    if (code == 6604) return QString::fromUtf8("Служба журнала обнаружила попытку доступа к данным за пределами активного диапазона журнала");
    if (code == 6605) return QString::fromUtf8("Пользовательские буферы упорядочивания службы журнала исчерпаны");
    if (code == 6606) return QString::fromUtf8("Служба журнала обнаружила попытку чтения из области упорядочивания с неправильным контекстом чтения");
    if (code == 6607) return QString::fromUtf8("Служба журнала обнаружила неправильную область перезапуска журнала");
    if (code == 6608) return QString::fromUtf8("Служба журнала обнаружила неправильную версию блока журнала");
    if (code == 6609) return QString::fromUtf8("Служба журнала обнаружила неправильный блок журнала");
    if (code == 6610) return QString::fromUtf8("Служба журнала обнаружила попытку чтения журнала с неправильным режимом чтения");
    if (code == 6611) return QString::fromUtf8("Служба журнала обнаружила поток журнала без области перезапуска");
    if (code == 6612) return QString::fromUtf8("Служба журнала обнаружила поврежденный файл метаданных");
    if (code == 6613) return QString::fromUtf8("Служба журнала обнаружила файл метаданных, который не мог быть создан файловой системой журнала");
    if (code == 6614) return QString::fromUtf8("Служба журнала обнаружила файл метаданных с противоречивыми данными");
    if (code == 6615) return QString::fromUtf8("Служба журнала обнаружила попытку ошибочного выделения или освобождения зарезервированного пространства");
    if (code == 6616) return QString::fromUtf8("Служба журнала не может удалить файл журнала или контейнер файловой системы");
    if (code == 6617) return QString::fromUtf8("Служба журнала достигла максимума разрешенных контейнеров, выделенных файлу журнала");
    if (code == 6618) return QString::fromUtf8("Служба журнала обнаружила попытку чтения или записи в обратном направлении за пределами начала журнала");
    if (code == 6619) return QString::fromUtf8("Невозможно установить политику журнала, так как политика того же типа уже установлена");
    if (code == 6620) return QString::fromUtf8("Соответствующая политика журнала не была установлена во время этого запроса");
    if (code == 6621) return QString::fromUtf8("Установленный набор политик для этого журнала неправилен");
    if (code == 6622) return QString::fromUtf8("Политика для этого журнала препятствует завершению операции");
    if (code == 6623) return QString::fromUtf8("Пространство журнала не удается отобрать, поскольку этот журнал зафиксирован архивной цепочкой");
    if (code == 6624) return QString::fromUtf8("Журнальная запись не является допустимой записью в файле журнала");
    if (code == 6625) return QString::fromUtf8("Количество зарезервированных журнальных записей или изменение количества зарезервированных журнальных записей имеет недопустимое значение");
    if (code == 6626) return QString::fromUtf8("Зарезервированное место в журнале или изменение зарезервированного места в журнале имеет недопустимое значение");
    if (code == 6627) return QString::fromUtf8("Новая или существующая архивная цепочка или база активного журнала неправильна");
    if (code == 6628) return QString::fromUtf8("Место в журнале исчерпано");
    if (code == 6629) return QString::fromUtf8("Запрошенный размер не может быть установлен для этого журнала");
    if (code == 6630) return QString::fromUtf8("Журнал мультиплексный, прямая запись в физический журнал запрещена");
    if (code == 6631) return QString::fromUtf8("Ошибка при выполнении операции, поскольку этот журнал является выделенным журналом");
    if (code == 6632) return QString::fromUtf8("Для этой операции требуется контекст архивации");
    if (code == 6633) return QString::fromUtf8("Выполняется архивация журнала");
    if (code == 6634) return QString::fromUtf8("Для этой операции требуется постоянного журнала, однако данный журнал является временным");
    if (code == 6635) return QString::fromUtf8("Журнал должен иметь не менее двух контейнеров, чтобы с ним можно было выполнять операции чтения и записи");
    if (code == 6636) return QString::fromUtf8("Клиент журнала уже зарегистрирован в потоке");
    if (code == 6637) return QString::fromUtf8("Клиент журнала не зарегистрирован в потоке");
    if (code == 6638) return QString::fromUtf8("Запрос на обработку условия переполнения журнала уже выполнен");
    if (code == 6639) return QString::fromUtf8("Служба журнала обнаружила ошибку при попытке чтения из контейнера журнала");
    if (code == 6640) return QString::fromUtf8("Служба журнала обнаружила ошибку при попытке записи в контейнер журнала");
    if (code == 6641) return QString::fromUtf8("Служба журнала обнаружила ошибку при попытке открыть контейнер журнала");
    if (code == 6642) return QString::fromUtf8("Служба журнала обнаружила недопустимое состояние контейнера при попытке выполнения запрошенного действия");
    if (code == 6643) return QString::fromUtf8("Недопустимое состояние службы ведения журналов для выполнения запрошенного действия");
    if (code == 6644) return QString::fromUtf8("Не удается освободить пространство для журнала, поскольку журнал зафиксирован");
    if (code == 6645) return QString::fromUtf8("Ошибка при попытке сброса метаданных журнала");
    if (code == 6646) return QString::fromUtf8("Несогласованная безопасность журнала и его контейнеров");
    if (code == 6647) return QString::fromUtf8("В журнал были добавлены записи или внесены изменения в резервирование, но журнал не может быть сохранен на диск");
    if (code == 6648) return QString::fromUtf8("Журнал заблокирован для изменения в связи с резервированием большей части расходуемого журналом пространства. Освободите зарезервированные записи для увеличения объема свободного места");
    if (code == 6700) return QString::fromUtf8("Недопустимый дескриптор транзакции, связанный с данной операцией");
    if (code == 6701) return QString::fromUtf8("Запрошенная операция выполнена в контексте транзакции, которая уже не является активной");
    if (code == 6702) return QString::fromUtf8("Запрошенная операция недопустима для объекта транзакции в текущем состоянии");
    if (code == 6703) return QString::fromUtf8("Вызывающая программа обратилась к API ответов, но ответа не ожидается, поскольку программа TM не отправила соответствующий запрос вызывающей программе");
    if (code == 6704) return QString::fromUtf8("Поздно выполнять запрошенную операцию, поскольку транзакция уже прервана");
    if (code == 6705) return QString::fromUtf8("Поздно выполнять запрошенную операцию, поскольку транзакция уже зафиксирована");
    if (code == 6706) return QString::fromUtf8("Не удалось успешно инициализировать диспетчер транзакций. Операции транзакции не поддерживаются");
    if (code == 6707) return QString::fromUtf8("Указанный диспетчер ресурсов не выполнил изменений или обновлений в ресурс в ходе этой транзакции");
    if (code == 6708) return QString::fromUtf8("Диспетчер ресурсов попытался подготовить транзакцию, к которой он не был успешно присоединен");
    if (code == 6709) return QString::fromUtf8("Объект транзакции уже имеет старший связующий объект, а вызывающая программа попыталась выполнить операцию с созданием нового старшего объекта. Разрешен только один старший связующий элемент");
    if (code == 6710) return QString::fromUtf8("Программа RM попыталась зарегистрировать уже существующий протокол");
    if (code == 6711) return QString::fromUtf8("Ошибка при попытке распространения транзакции");
    if (code == 6712) return QString::fromUtf8("Запрошенный протокол распространения не зарегистрирован в качестве CRM");
    if (code == 6713) return QString::fromUtf8("Буфер, переданный в PushTransaction или PullTransaction, имеет недопустимый формат");
    if (code == 6714) return QString::fromUtf8("Контекст текущей транзакции, связанной с потоком, не имеет допустимого дескриптора на объект транзакции");
    if (code == 6715) return QString::fromUtf8("Указанный объект Transaction не может быть открыт, так как он не найден");
    if (code == 6716) return QString::fromUtf8("Указанный объект ResourceManager не может быть открыт, так как он не найден");
    if (code == 6717) return QString::fromUtf8("Указанный объект Enlistment не может быть открыт, так как он не найден");
    if (code == 6718) return QString::fromUtf8("Указанный объект TransactionManager не может быть открыт, так как он не найден");
    if (code == 6719) return QString::fromUtf8("Не удалось создать или открыть указанный объект, так как соответствующий диспетчер транзакций не подключен к сети. Для того чтобы можно было открывать пространства имен Transaction или ResourceManager, необходимо полностью восстановить работу диспетчера транзакций, вызвав функцию RecoverTransactionManager для восстановления до конца файла журнала.  Кроме того, ошибки в записях файла журнала могут привести к отключению диспетчера транзакций от сети");
    if (code == 6720) return QString::fromUtf8("Указанному диспетчеру транзакций не удалось создать объекты, содержащиеся в его файле журнала в пространстве имен объектов. В результате диспетчеру транзакций не удалось выполнить восстановление");
    if (code == 6721) return QString::fromUtf8("Невозможно завершить вызов для создания старшего связующего объекта на этом объекте транзакции, поскольку объект транзакции, указанный для связующего объекта, является подчиненной ветвью транзакции. Только корень транзакции может быть указан для старшего связующего объекта");
    if (code == 6722) return QString::fromUtf8("Дескриптор более не действителен, поскольку связанный диспетчер транзакций или диспетчер ресурсов был закрыт");
    if (code == 6723) return QString::fromUtf8("Указанную операцию нельзя выполнить для данного старшего связующего элемента, поскольку этот элемент не был создан с соответствующим ответом завершения в NotificationMask");
    if (code == 6724) return QString::fromUtf8("Не удается выполнить указанную операцию, так как запись, которую требовалось внести в журнал, была слишком длинной. Это могло произойти по одной из двух причин: либо для данной транзакции имеется слишком много связующих объектов, либо объединенное свойство RecoveryInformation, запись которого выполняется от имени этих связующих объектов, имеет слишком большую длину");
    if (code == 6725) return QString::fromUtf8("Неявная транзакция не поддерживается");
    if (code == 6726) return QString::fromUtf8("Диспетчеру транзакций ядра пришлось прервать или отложить транзакцию, поскольку она блокировала дальнейшую работу");
    if (code == 6727) return QString::fromUtf8("Предоставленное удостоверение диспетчера транзакций не соответствует записанному в файле журнала диспетчера транзакций");
    if (code == 6728) return QString::fromUtf8("Невозможно продолжить операцию получения снимка, поскольку диспетчер транзакционных ресурсов не может быть зафиксирован в его текущем состоянии.  Повторите попытку");
    if (code == 6729) return QString::fromUtf8("Невозможно прикрепить транзакцию с помощью указанного параметра EnlistmentMask, так как у транзакции уже завершена фаза предварительной подготовки.  Для правильного выполнения диспетчер транзакций должен переключиться в режим сквозной записи и прекратить кэширование данных в этой транзакции.  Прикрепление для следующих стадий транзакции по-прежнему может быть выполнено");
    if (code == 6730) return QString::fromUtf8("У транзакции отсутствует старший связующий объект");
    if (code == 6731) return QString::fromUtf8("Попытка выполнения транзакции завершена, но из-за использования эвристических методов часть дерева транзакции, возможно, не была успешно выполнена. Существует вероятность, что некоторые измененные во время транзакции данные не были зафиксированы, что привело к нарушению целостности транзакции. Если это возможно, проверьте данные на согласованность");
    if (code == 6800) return QString::fromUtf8("Функция попыталась использовать имя, зарезервированное для использования другой транзакцией");
    if (code == 6801) return QString::fromUtf8("Поддержка транзакций в диспетчере ресурсов заданного менеджера ресурсов не запущена либо отключена вследствие ошибки");
    if (code == 6802) return QString::fromUtf8("Метаданные программы RM повреждены. Программа RM не работает");
    if (code == 6803) return QString::fromUtf8("В указанном каталоге отсутствует диспетчер ресурсов");
    if (code == 6805) return QString::fromUtf8("Удаленный сервер или общий ресурс не поддерживает файловые операции транзакций");
    if (code == 6806) return QString::fromUtf8("Запрошен недопустимый размер журнала");
    if (code == 6807) return QString::fromUtf8("Объект (файл, поток, ссылка), соответствующий дескриптору, не удален операцией отката в точку сохранения транзакции");
    if (code == 6808) return QString::fromUtf8("Для данного открытого файла транзакции не обнаружена указанная мини-версия файла");
    if (code == 6809) return QString::fromUtf8("Заданная мини-версия файла обнаружена, но сделана недопустимой. Наиболее вероятная причина - откат в точку сохранения транзакции");
    if (code == 6810) return QString::fromUtf8("Мини-версию можно открывать только в контексте создавшей ее транзакции");
    if (code == 6811) return QString::fromUtf8("Не удается открыть мини-версию с доступом на изменение");
    if (code == 6812) return QString::fromUtf8("Не удается создать какие-либо мини-версии для этого потока");
    if (code == 6814) return QString::fromUtf8("Удаленный сервер отправил несовпадающий номер версии или идентификатор FID для файла, открытого с помощью транзакций");
    if (code == 6815) return QString::fromUtf8("Дескриптор сделан недопустимым транзакцией. Наиболее вероятная причина - включенный режим отображения памяти для файла или открытый дескриптор в момент завершения или отката транзакции к точке сохранения");
    if (code == 6816) return QString::fromUtf8("Отсутствуют метаданные по транзакциям данного файла");
    if (code == 6817) return QString::fromUtf8("Данные журнала повреждены");
    if (code == 6818) return QString::fromUtf8("Не удается восстановить файл, поскольку все еще открыт его дескриптор");
    if (code == 6819) return QString::fromUtf8("Результат выполнения транзакции недоступен, поскольку отвечающий за нее диспетчер ресурсов отключился");
    if (code == 6820) return QString::fromUtf8("Запрос отклонен, поскольку данный связующий элемент не является старшим");
    if (code == 6821) return QString::fromUtf8("Диспетчер ресурсов транзакций уже согласован. Восстановление не требуется");
    if (code == 6822) return QString::fromUtf8("Диспетчер ресурсов транзакций уже запущен");
    if (code == 6823) return QString::fromUtf8("Не удается открыть файл с помощью транзакций, поскольку его учетные данные зависят от результата неразрешенной транзакции");
    if (code == 6824) return QString::fromUtf8("Не удается выполнить операцию, поскольку другая транзакция зависит от неизменности данного свойства");
    if (code == 6825) return QString::fromUtf8("Операция должна включать один файл с двумя диспетчерами ресурсов транзакций, поэтому она не разрешена");
    if (code == 6826) return QString::fromUtf8("Каталог $Txf должен быть пуст для успешного выполнения этой операции");
    if (code == 6827) return QString::fromUtf8("Операция приведет к несогласованному состоянию диспетчера ресурсов транзакций, поэтому она не разрешена");
    if (code == 6828) return QString::fromUtf8("Не удалось завершить операцию, поскольку диспетчер транзакций не имеет журнала");
    if (code == 6829) return QString::fromUtf8("Не удалось запланировать откат, поскольку ранее назначенный откат уже выполнен или помещен в очередь на выполнение");
    if (code == 6830) return QString::fromUtf8("Атрибут метаданных транзакции этого файла или каталога поврежден или не читается");
    if (code == 6831) return QString::fromUtf8("Операция шифрования не может быть завершена, поскольку транзакция активна");
    if (code == 6832) return QString::fromUtf8("Запрещено открытие этого объекта в транзакции");
    if (code == 6833) return QString::fromUtf8("Ошибка при попытке создания пространства в журнале диспетчера ресурсов транзакций. Состояние ошибки записано в журнал событий");
    if (code == 6834) return QString::fromUtf8("Удаленный файл отображения памяти (создания отображенной секции) в данной транзакции не поддерживается");
    if (code == 6835) return QString::fromUtf8("Метаданные транзакции уже имеются для данного файла и не могут быть заменены");
    if (code == 6836) return QString::fromUtf8("Не удалось ввести область транзакции, поскольку обработчик области не инициализирован");
    if (code == 6837) return QString::fromUtf8("Запрошено повышение роли, чтобы разрешить диспетчеру ресурсов принимать участие в транзакции, но в самой транзакции установлен запрет на это");
    if (code == 6838) return QString::fromUtf8("Этот файл открыт для изменения в неразрешенной транзакции и может быть открыт для выполнения только программой чтения транзакций");
    if (code == 6839) return QString::fromUtf8("Запрос на разблокировку зависших транзакций пропущен, поскольку отсутствуют зависшие транзакции");
    if (code == 6840) return QString::fromUtf8("Не удается закрепить транзакции, поскольку закрепление уже выполняется");
    if (code == 6841) return QString::fromUtf8("Целевой том не является томом снимков состояния. Эта операция допустима только для тома, смонтированного как снимок состояния");
    if (code == 6842) return QString::fromUtf8("Ошибка операции точки сохранения, поскольку файлы открыты для транзакции. Это не разрешено");
    if (code == 6843) return QString::fromUtf8("Обнаружено повреждение файла, и этот файл немедленно восстановлен. Возможна потеря данных");
    if (code == 6844) return QString::fromUtf8("Операция разрежения не может быть завершена, поскольку транзакция активна для файла");
    if (code == 6845) return QString::fromUtf8("Произошла ошибка при вызове создания объекта TransactionManager, поскольку учетные данные TM из файла журнала не соответствуют учетным данным TM, переданным в качестве аргумента");
    if (code == 6846) return QString::fromUtf8("Попытка ввода-вывода для объекта-секции, ставшая плавающей в результате завершения транзакции. Больше допустимых данных нет");
    if (code == 6847) return QString::fromUtf8("Транзактный диспетчер ресурсов на данный момент не может принять групповую работу в связи с временным условием, таким как нехватка ресурсов");
    if (code == 6848) return QString::fromUtf8("Транзактный диспетчер ресурсов имеет слишком много невыполненных транзакций, которые не могут быть прерваны. Транзактный диспетчер ресурсов отключен");
    if (code == 6849) return QString::fromUtf8("Не удалось завершить операцию, поскольку диск содержит поврежденные кластеры");
    if (code == 6850) return QString::fromUtf8("Операция сжатия не может быть завершена, поскольку данный файл задействован в транзакции");
    if (code == 6851) return QString::fromUtf8("Операцию не удалось завершить, поскольку на томе имеются ошибки. Выполните программу chkdsk и повторите попытку");
    if (code == 6852) return QString::fromUtf8("Операция отслеживания ссылок не может быть завершена, поскольку транзакция активна");
    if (code == 6853) return QString::fromUtf8("Эта операция не может быть выполнена в транзакции");
    if (code == 6854) return QString::fromUtf8("Дескриптор уже не связан с соответствующей транзакцией.  Возможно, дескриптор был открыт в диспетчере ресурсов транзакций, который впоследствии был принудительно перезапущен.  Закройте старый дескриптор и откройте новый");
    if (code == 6855) return QString::fromUtf8("Не удается выполнить указанную операцию, поскольку диспетчер ресурсов не входит в транзакцию");
    if (code == 7001) return QString::fromUtf8("Указано недопустимое имя сеанса");
    if (code == 7002) return QString::fromUtf8("Указан недопустимый драйвер протокола");
    if (code == 7003) return QString::fromUtf8("Указанный драйвер протокола не найден в системном пути");
    if (code == 7004) return QString::fromUtf8("Указанный драйвер терминального подключения не найден в системном пути");
    if (code == 7005) return QString::fromUtf8("Для этого сеанса нельзя создать раздел реестра для записи событий в журнале");
    if (code == 7006) return QString::fromUtf8("В системе уже существует служба с таким именем");
    if (code == 7007) return QString::fromUtf8("В сеансе отложена операция закрытия");
    if (code == 7008) return QString::fromUtf8("Свободные выходные буферы отсутствуют");
    if (code == 7009) return QString::fromUtf8("Не найден файл MODEM.INF");
    if (code == 7010) return QString::fromUtf8("В файле MODEM.INF не найдено имя этого модема");
    if (code == 7011) return QString::fromUtf8("Модем не принял отправленную ему команду. Проверьте, что имя сконфигурированного модема соответствует подключенному модему");
    if (code == 7012) return QString::fromUtf8("Модем не отвечает на отправленную ему команду. Проверьте электропитание и правильность подключения к модему");
    if (code == 7013) return QString::fromUtf8("Несущий сигнал не обнаружен, или он сброшен в результате отключения");
    if (code == 7014) return QString::fromUtf8("Сигнал станции (зуммер) не получен за отведенное время. Проверьте подключение телефонного кабеля и отсутствие его повреждений");
    if (code == 7015) return QString::fromUtf8("При ответном вызове удаленного компьютера обнаружен сигнал \"занято\"");
    if (code == 7016) return QString::fromUtf8("При ответном вызове удаленного компьютера обнаружен ответ голосом");
    if (code == 7017) return QString::fromUtf8("Ошибка драйвера транспорта");
    if (code == 7022) return QString::fromUtf8("Указанный сеанс не найден");
    if (code == 7023) return QString::fromUtf8("Введенное имя сеанса уже используется");
    if (code == 7024) return QString::fromUtf8("Не удается завершить требуемую операцию, поскольку службы удаленных рабочих столов сейчас заняты. Повторите попытку через несколько минут. Другие пользователи должны по-прежнему иметь возможность входа");
    if (code == 7025) return QString::fromUtf8("Была сделана попытка подключения к сеансу с режимом экрана, не поддерживаемым данным клиентом");
    if (code == 7035) return QString::fromUtf8("Данное приложение попыталось включить графический режим DOS. Графический режим DOS не поддерживается");
    if (code == 7037) return QString::fromUtf8("Ваши права на интерактивный вход в систему отключены. Обратитесь к системному администратору");
    if (code == 7038) return QString::fromUtf8("Требуемая операция может быть выполнена только на системной консоли. Обычно это связано с тем, что для драйвера или системной библиотеки требуется прямой доступ к консоли");
    if (code == 7040) return QString::fromUtf8("Клиент не смог ответить на сообщение сервера о подключении");
    if (code == 7041) return QString::fromUtf8("Отключение сеанса консоли не поддерживается");
    if (code == 7042) return QString::fromUtf8("Повторное подключение к консоли отключенного сеанса не поддерживается");
    if (code == 7044) return QString::fromUtf8("Запрос на удаленное управление другим сеансом отклонен");
    if (code == 7045) return QString::fromUtf8("Доступ к требуемому сеансу отклонен");
    if (code == 7049) return QString::fromUtf8("Недопустимый драйвер терминального подключения");
    if (code == 7050) return QString::fromUtf8("Удаленное управление требуемым сеансом невозможно");
    if (code == 7051) return QString::fromUtf8("Указанный сеанс не настроен для осуществления удаленного управления");
    if (code == 7052) return QString::fromUtf8("Запрос на подключение к этому серверу терминалов отклонен. Этот номер клиентской лицензии сервера терминалов используется сейчас другим пользователем. Обратитесь к системному администратору за уникальным номером лицензии");
    if (code == 7053) return QString::fromUtf8("Запрос на подключение к этому серверу терминалов отклонен. Этот номер клиентской лицензии сервера терминалов не введен для данной копии клиента. Обратитесь к системному администратору");
    if (code == 7054) return QString::fromUtf8("Число разрешенных подключений к этому компьютеру ограничено, и все подключения в данный момент уже используются. Попробуйте подключиться позже или обратитесь к системному администратору");
    if (code == 7055) return QString::fromUtf8("Используемый клиент не имеет лицензии для использования этой системы Запрос на вход в систему отклонен");
    if (code == 7056) return QString::fromUtf8("Срок действия системной лицензии истек. Запрос на вход в систему отклонен");
    if (code == 7057) return QString::fromUtf8("Нельзя прекратить удаленное управление, так как указанный сеанс не управляется в удаленном режиме");
    if (code == 7058) return QString::fromUtf8("Удаленное управление консолью прекращено, поскольку изменен режим экрана. Изменение режима отображения в удаленно управляемом сеансе невозможно");
    if (code == 7059) return QString::fromUtf8("Активация этой установленной копии уже была сброшена наибольшее возможное количество раз. Счетчик активации не будет обнулен");
    if (code == 7060) return QString::fromUtf8("Удаленный вход в систему в настоящее время запрещен");
    if (code == 7061) return QString::fromUtf8("Недостаточный уровень шифрования для доступа к этому сеансу");
    if (code == 7062) return QString::fromUtf8("Пользователь s\\s  уже выполнил вход в систему на этом компьютере. В данный момент только этот пользователь или администратор могут войти в систему");
    if (code == 7063) return QString::fromUtf8("Пользователь s\\s уже выполнил вход на консоль этого компьютера. У вас нет разрешения на выполнение входа в это время. Для устранения этой проблемы обратитесь к s\\s и попросите выполнить выход");
    if (code == 7064) return QString::fromUtf8("Вход в систему невозможен из-за ограничений для учетной записи");
    if (code == 7066) return QString::fromUtf8("Служба сопоставления клиентских дисков подключена на терминальном подключении");
    if (code == 7067) return QString::fromUtf8("Служба сопоставления клиентских дисков отключена на терминальном подключении");
    if (code == 7068) return QString::fromUtf8("Уровень безопасности сервера терминалов обнаружил ошибку в потоке протокола и отключил этот клиент");
    if (code == 7069) return QString::fromUtf8("Целевой сеанс несовместим с текущим сеансом");
    if (code == 7070) return QString::fromUtf8("Подключение к сеансу невозможно из-за ошибки в подсистеме видео. Попробуйте подключиться позже или обратитесь за помощью к администратору сервера");
    if (code == 8001) return QString::fromUtf8("Недопустимый вызов API службы репликации файлов");
    if (code == 8002) return QString::fromUtf8("Невозможно запустить службу репликации файлов");
    if (code == 8003) return QString::fromUtf8("Невозможно остановить службу репликации файлов");
    if (code == 8004) return QString::fromUtf8("API службы репликации файлов прервал запрос. Дополнительные сведения могут быть в журнале событий");
    if (code == 8005) return QString::fromUtf8("Служба репликации файлов прервала запрос. Дополнительные сведения могут быть в журнале событий");
    if (code == 8006) return QString::fromUtf8("Нет доступа к службе репликации файлов. Дополнительные сведения могут быть в журнале событий");
    if (code == 8007) return QString::fromUtf8("Служба репликации файлов не может удовлетворить запрос, поскольку у пользователя недостаточно прав. Дополнительные сведения могут быть в журнале событий");
    if (code == 8008) return QString::fromUtf8("Служба репликации файлов не может удовлетворить запрос, поскольку отсутствует RPC с проверенной подлинностью. Дополнительные сведения могут быть в журнале событий");
    if (code == 8009) return QString::fromUtf8("Служба репликации файлов не может удовлетворить запрос, поскольку у пользователя недостаточно прав в контроллере домена. Дополнительные сведения могут быть в журнале событий");
    if (code == 8010) return QString::fromUtf8("Служба репликации файлов не может удовлетворить запрос, поскольку в контроллере домена отсутствует RPC с проверенной подлинностью. Дополнительные сведения могут быть в журнале событий");
    if (code == 8011) return QString::fromUtf8("Служба репликации файлов не может взаимодействовать со службой репликации файлов контроллера домена. Дополнительные сведения могут быть в журнале событий");
    if (code == 8012) return QString::fromUtf8("Служба репликации файлов контроллера домена не может взаимодействовать со службой репликации файлов этого компьютера. Дополнительные сведения могут быть в журнале событий");
    if (code == 8013) return QString::fromUtf8("Служба репликации файлов не может заполнить данными системный том вследствие внутренней ошибки. Дополнительные сведения могут быть в журнале событий");
    if (code == 8014) return QString::fromUtf8("Служба репликации файлов не может заполнить данными системный том вследствие внутреннего тайм-аута. Дополнительные сведения могут быть в журнале событий");
    if (code == 8015) return QString::fromUtf8("Служба репликации файлов не может обработать запрос. Системный том занят на обработке предыдущего запроса");
    if (code == 8016) return QString::fromUtf8("Служба репликации файлов не может прервать репликацию системного тома вследствие внутренней ошибки. Дополнительные сведения могут быть в журнале событий");
    if (code == 8017) return QString::fromUtf8("Служба репликации файлов обнаружила недопустимый параметр");
    if (code == 8200) return QString::fromUtf8("Произошла ошибка при установке службы каталогов. Более подробные сведения находятся в журнале");
    if (code == 8201) return QString::fromUtf8("Служба каталогов проверила принадлежность к группам локально");
    if (code == 8202) return QString::fromUtf8("Указанное значение или атрибут службы каталогов не существует");
    if (code == 8203) return QString::fromUtf8("Для службы каталогов указан недопустимый синтаксис атрибута");
    if (code == 8204) return QString::fromUtf8("Для службы каталогов указан неопределенный тип атрибута");
    if (code == 8205) return QString::fromUtf8("Указанный атрибут или значение службы каталогов уже существует");
    if (code == 8206) return QString::fromUtf8("Служба каталогов занята");
    if (code == 8207) return QString::fromUtf8("Служба каталогов недоступна");
    if (code == 8208) return QString::fromUtf8("Служба каталогов не смогла выделить относительный идентификатор");
    if (code == 8209) return QString::fromUtf8("Служба каталогов исчерпала пул относительных идентификаторов");
    if (code == 8210) return QString::fromUtf8("Невозможно выполнить требуемую операцию, поскольку служба каталогов не является хозяином операций такого типа");
    if (code == 8211) return QString::fromUtf8("Служба каталогов не смогла инициализировать подсистему, которая выделяет относительные идентификаторы");
    if (code == 8212) return QString::fromUtf8("Требуемая операция не удовлетворяет одному или нескольким ограничениям для объектов этого класса");
    if (code == 8213) return QString::fromUtf8("Служба каталогов может выполнять эту операцию только на оконечном листовом объекте");
    if (code == 8214) return QString::fromUtf8("Служба каталогов не может выполнить операцию на RDN-атрибуте объекта");
    if (code == 8215) return QString::fromUtf8("Служба каталогов обнаружила попытку изменить класс объекта");
    if (code == 8216) return QString::fromUtf8("Затребованная операция междоменного перемещения не может быть выполнена");
    if (code == 8217) return QString::fromUtf8("Не удается установить связь с сервером глобального каталога");
    if (code == 8218) return QString::fromUtf8("К объекту политики имеется общий доступ, объект можно изменить только в его корне");
    if (code == 8219) return QString::fromUtf8("Объект политики не существует");
    if (code == 8220) return QString::fromUtf8("Информация о требуемой политике имеется только в службе каталогов");
    if (code == 8221) return QString::fromUtf8("Повышение роли контроллера домена сейчас активно");
    if (code == 8222) return QString::fromUtf8("Повышение роли контроллера домена сейчас не активно");
    if (code == 8224) return QString::fromUtf8("Произошла ошибка операции");
    if (code == 8225) return QString::fromUtf8("Произошла ошибка протокола");
    if (code == 8226) return QString::fromUtf8("Для этого запроса превышен предел времени");
    if (code == 8227) return QString::fromUtf8("Для этого запроса превышен предел размера");
    if (code == 8228) return QString::fromUtf8("Пределы администрирования для этого запроса были превышены");
    if (code == 8229) return QString::fromUtf8("Отклик сравнения: ложный");
    if (code == 8230) return QString::fromUtf8("Отклик сравнения: истинный");
    if (code == 8231) return QString::fromUtf8("Требуемый метод проверки подлинности не поддерживается сервером");
    if (code == 8232) return QString::fromUtf8("Для этого сервера требуется более безопасный метод проверки подлинности");
    if (code == 8233) return QString::fromUtf8("Недопустимая проверка подлинности");
    if (code == 8234) return QString::fromUtf8("Неизвестный механизм проверки подлинности");
    if (code == 8235) return QString::fromUtf8("Сервер возвратил ссылку");
    if (code == 8236) return QString::fromUtf8("Сервер не поддерживает требуемое критическое расширение");
    if (code == 8237) return QString::fromUtf8("Этот запрос требует безопасного подключения");
    if (code == 8238) return QString::fromUtf8("Недопустимое соответствие");
    if (code == 8239) return QString::fromUtf8("Произошло нарушение ограничения");
    if (code == 8240) return QString::fromUtf8("Такой объект на сервере отсутствует");
    if (code == 8241) return QString::fromUtf8("Существует проблема с псевдонимом");
    if (code == 8242) return QString::fromUtf8("Указан недопустимый dn-синтаксис");
    if (code == 8243) return QString::fromUtf8("Этот объект является оконечным листом дерева");
    if (code == 8244) return QString::fromUtf8("Существует проблема разыменования псевдонима");
    if (code == 8245) return QString::fromUtf8("Сервер не склонен обработать запрос");
    if (code == 8246) return QString::fromUtf8("Обнаружен цикл");
    if (code == 8247) return QString::fromUtf8("Произошло нарушение именования");
    if (code == 8248) return QString::fromUtf8("Слишком большой результат");
    if (code == 8249) return QString::fromUtf8("Эта операция затрагивает несколько DSA");
    if (code == 8250) return QString::fromUtf8("Сервер неработоспособен");
    if (code == 8251) return QString::fromUtf8("Произошла локальная ошибка");
    if (code == 8252) return QString::fromUtf8("Произошла ошибка кодирования");
    if (code == 8253) return QString::fromUtf8("Произошла ошибка раскодирования");
    if (code == 8254) return QString::fromUtf8("Фильтр поиска не опознан");
    if (code == 8255) return QString::fromUtf8("Один или несколько параметров недопустимы");
    if (code == 8256) return QString::fromUtf8("указанный метод не поддерживается");
    if (code == 8257) return QString::fromUtf8("Не возвращено никаких результатов");
    if (code == 8258) return QString::fromUtf8("Указанный элемент управления не поддерживается сервером");
    if (code == 8259) return QString::fromUtf8("Клиент обнаружил зацикливание ссылок");
    if (code == 8260) return QString::fromUtf8("Предустановленный предел ссылок исчерпан");
    if (code == 8261) return QString::fromUtf8("Операция поиска нуждается в операторе SORT");
    if (code == 8262) return QString::fromUtf8("Результаты поиска выходят за рамки указанного диапазона смещений");
    if (code == 8301) return QString::fromUtf8("Корневой объект должен быть заголовком контекста именования. Корневой объект не может иметь присвоенного родителя");
    if (code == 8302) return QString::fromUtf8("Невозможно выполнить операцию добавления реплики. Для создания реплики нужна возможность записи контекста именования");
    if (code == 8303) return QString::fromUtf8("Ссылка на атрибут, который не определен в полученной схеме");
    if (code == 8304) return QString::fromUtf8("Превышен наибольший допустимый размер объекта");
    if (code == 8305) return QString::fromUtf8("Сделана попытка добавить к каталогу объект с уже существующим именем");
    if (code == 8306) return QString::fromUtf8("Сделана попытка добавить объект из класса с неопределенным RDN в схеме");
    if (code == 8307) return QString::fromUtf8("Сделана попытка добавить объект с неопределенным RDN в схеме");
    if (code == 8308) return QString::fromUtf8("Ни один из требуемых атрибутов не найден в объектах");
    if (code == 8309) return QString::fromUtf8("Буфер пользователя слишком мал");
    if (code == 8310) return QString::fromUtf8("Указанный в операции атрибут отсутствует в объекте");
    if (code == 8311) return QString::fromUtf8("Недопустимая операция изменения. Некоторые параметры изменения не разрешены");
    if (code == 8312) return QString::fromUtf8("Указанный объект слишком велик");
    if (code == 8313) return QString::fromUtf8("Указан недопустимый тип");
    if (code == 8314) return QString::fromUtf8("Эта операция должна выполняться на главном DSA");
    if (code == 8315) return QString::fromUtf8("Должен быть указан атрибут класса объекта");
    if (code == 8316) return QString::fromUtf8("Не указан обязательный атрибут");
    if (code == 8317) return QString::fromUtf8("Сделана попытка изменить объект включением в него атрибута, не разрешенного для данного класса");
    if (code == 8318) return QString::fromUtf8("Указанный атрибут уже присутствует в этом объекте");
    if (code == 8320) return QString::fromUtf8("Указанный атрибут не существует, или имеет нулевое значение");
    if (code == 8321) return QString::fromUtf8("Множественные значения были заданы для атрибута, которые должен иметь только единственное значение");
    if (code == 8322) return QString::fromUtf8("Значение этого атрибута находилось вне допустимых пределов");
    if (code == 8323) return QString::fromUtf8("Указанное значение уже существует");
    if (code == 8324) return QString::fromUtf8("Этот атрибут не может быть удален, т.к. он отсутствует в объекте");
    if (code == 8325) return QString::fromUtf8("Значение этого атрибута не может быть удалено, т.к. атрибут отсутствует в объекте");
    if (code == 8326) return QString::fromUtf8("Указанный корневой объект не может быть подссылкой");
    if (code == 8327) return QString::fromUtf8("Очистка не разрешена");
    if (code == 8328) return QString::fromUtf8("Оценка очистки не разрешена");
    if (code == 8329) return QString::fromUtf8("Эта операция не может быть выполнена, т.к. родитель объекта либо не подтвержден, либо удален");
    if (code == 8330) return QString::fromUtf8("Родительский объект не может быть псевдонимом. Псевдонимы являются оконечными листовыми объектами дерева");
    if (code == 8331) return QString::fromUtf8("Объект и его родитель должны иметь одинаковые типы, быть оба главными, или оба копиями");
    if (code == 8332) return QString::fromUtf8("Эта операция не может быть выполнена, т.к. существует дочерний объект. Эта операция может быть выполнена только на оконечном листовом объекте");
    if (code == 8333) return QString::fromUtf8("Объект каталога не найден");
    if (code == 8334) return QString::fromUtf8("Объект псевдонима не найден");
    if (code == 8335) return QString::fromUtf8("Имя объекта имеет недопустимый синтаксис");
    if (code == 8336) return QString::fromUtf8("Не разрешается, чтобы псевдоним ссылался на другой псевдоним");
    if (code == 8337) return QString::fromUtf8("Не разрешается, чтобы у псевдонима отсутствовала ссылка");
    if (code == 8338) return QString::fromUtf8("Эта операция вне диапазона");
    if (code == 8339) return QString::fromUtf8("Нельзя продолжить операцию, так как объект находится в процессе удаления");
    if (code == 8340) return QString::fromUtf8("Невозможно удалить объект DSA");
    if (code == 8341) return QString::fromUtf8("Произошла ошибка службы каталогов");
    if (code == 8342) return QString::fromUtf8("Эта операция может быть выполнена только на главном объекте DSA");
    if (code == 8343) return QString::fromUtf8("Этот объект должен быть класса  DSA");
    if (code == 8344) return QString::fromUtf8("Для выполнения операции права недостаточны");
    if (code == 8345) return QString::fromUtf8("Этот объект не может быть добавлен, т.к. родитель отсутствует в списке возможных старших");
    if (code == 8346) return QString::fromUtf8("Доступ к атрибуту не разрешен, т.к. атрибут принадлежит диспетчеру защищенных учетных записей (SAM)");
    if (code == 8347) return QString::fromUtf8("В имени слишком много частей");
    if (code == 8348) return QString::fromUtf8("Имя слишком длинно");
    if (code == 8349) return QString::fromUtf8("Значение имени слишком длинно");
    if (code == 8350) return QString::fromUtf8("Произошла ошибка службы каталогов при обработке имени");
    if (code == 8351) return QString::fromUtf8("Служба каталогов не может получить для имени тип атрибута");
    if (code == 8352) return QString::fromUtf8("Это имя не определяет объект; данное имя определяет объект-фантом");
    if (code == 8353) return QString::fromUtf8("Дескриптор безопасности слишком короток");
    if (code == 8354) return QString::fromUtf8("Недопустимый дескриптор безопасности");
    if (code == 8355) return QString::fromUtf8("Невозможно создать имя для удаленного объекта");
    if (code == 8356) return QString::fromUtf8("Родитель новой подссылки должен существовать");
    if (code == 8357) return QString::fromUtf8("Этот объект должен быть контекстом именования");
    if (code == 8358) return QString::fromUtf8("Не разрешается добавление атрибута, который принадлежит системе");
    if (code == 8359) return QString::fromUtf8("Класс этого объекта должен быть структурным; невозможно утвердить абстрактный класс");
    if (code == 8360) return QString::fromUtf8("Не удалось найти объект схемы");
    if (code == 8361) return QString::fromUtf8("Локальный объект с этим GUID (\"живым\" или \"мертвым\") уже существует");
    if (code == 8362) return QString::fromUtf8("Операция не может быть выполнена на обратной ссылке");
    if (code == 8363) return QString::fromUtf8("Перекрестные ссылки для указанного контекста именования не могут быть найдены");
    if (code == 8364) return QString::fromUtf8("Операция не может быть выполнена, поскольку служба каталогов отключена");
    if (code == 8365) return QString::fromUtf8("Недопустимый запрос службы каталогов");
    if (code == 8366) return QString::fromUtf8("Атрибут владельца роли не может быть прочитан");
    if (code == 8367) return QString::fromUtf8("Ошибка требуемой операции FSMO. Нет связи с текущим владельцем FSMO");
    if (code == 8368) return QString::fromUtf8("Изменение DN через контекст именования не разрешено");
    if (code == 8369) return QString::fromUtf8("Этот атрибут не может быть изменен, т.к. он принадлежит системе");
    if (code == 8370) return QString::fromUtf8("Эту функцию может выполнить только репликатор");
    if (code == 8371) return QString::fromUtf8("Указанный класс не определен");
    if (code == 8372) return QString::fromUtf8("Указанный класс не является подклассом");
    if (code == 8373) return QString::fromUtf8("Ссылка на имя неверна");
    if (code == 8374) return QString::fromUtf8("Перекрестная ссылка уже существует");
    if (code == 8375) return QString::fromUtf8("Удаление основной перекрестной ссылки не разрешено");
    if (code == 8376) return QString::fromUtf8("Изменения поддеревьев поддерживаются только заголовками NC");
    if (code == 8377) return QString::fromUtf8("Слишком сложный фильтр уведомления");
    if (code == 8378) return QString::fromUtf8("Ошибка обновления схемы: повторяющиеся RDN");
    if (code == 8379) return QString::fromUtf8("Ошибка обновления схемы: повторяющиеся OID");
    if (code == 8380) return QString::fromUtf8("Ошибка обновления схемы: повторяющиеся идентификаторы MAPI");
    if (code == 8381) return QString::fromUtf8("Ошибка обновления схемы: повторяющиеся идентификаторы GUID");
    if (code == 8382) return QString::fromUtf8("Ошибка обновления схемы: повторяющееся выводимое имя LDAP");
    if (code == 8383) return QString::fromUtf8("Ошибка обновления схемы: нижнее значение выше, чем верхнее");
    if (code == 8384) return QString::fromUtf8("Ошибка обновления схемы: несовпадение синтаксиса");
    if (code == 8385) return QString::fromUtf8("Ошибка удаления схемы: атрибут использован в must-contain");
    if (code == 8386) return QString::fromUtf8("Ошибка удаления схемы: атрибут использован в may-contain");
    if (code == 8387) return QString::fromUtf8("Ошибка обновления схемы: отсутствует атрибут в may-contain");
    if (code == 8388) return QString::fromUtf8("Ошибка обновления схемы: отсутствует атрибут в must-contain");
    if (code == 8389) return QString::fromUtf8("Ошибка обновления схемы: данный класс в списке дополнительных классов (aux-class) не существует или это особый класс");
    if (code == 8390) return QString::fromUtf8("Ошибка обновления схемы: данный класс в классах высшего уровня (poss-superiors) не существует");
    if (code == 8391) return QString::fromUtf8("Ошибка обновления схемы: класс в списке подклассов (subclassof) не существует или не соответствует правилам иерархии");
    if (code == 8392) return QString::fromUtf8("Ошибка обновления схемы: неверный синтаксис Rdn-Att-Id");
    if (code == 8393) return QString::fromUtf8("Ошибка удаления схемы:  класс используется как особый класс");
    if (code == 8394) return QString::fromUtf8("Ошибка удаления схемы:  класс используется как подкласс");
    if (code == 8395) return QString::fromUtf8("Ошибка удаления схемы:  класс используется как класс высшего ранга");
    if (code == 8396) return QString::fromUtf8("Ошибка обновления схемы при пересчете кэша проверки");
    if (code == 8397) return QString::fromUtf8("Удаление дерева не завершено. Для продолжения процесса удаления запрос должен быть сделан повторно");
    if (code == 8398) return QString::fromUtf8("Затребованная операция удаления не может быть выполнена");
    if (code == 8399) return QString::fromUtf8("Невозможно прочесть идентификатор управления классом для этой записи схемы");
    if (code == 8400) return QString::fromUtf8("Схема атрибута имеет неверный синтаксис");
    if (code == 8401) return QString::fromUtf8("Этот атрибут не может кэшироваться");
    if (code == 8402) return QString::fromUtf8("Этот класс не может кэшироваться");
    if (code == 8403) return QString::fromUtf8("Этот атрибут нельзя удалить из кэша");
    if (code == 8404) return QString::fromUtf8("Этот класс нельзя удалить из кэша");
    if (code == 8405) return QString::fromUtf8("Нельзя прочесть атрибут различающегося имени");
    if (code == 8406) return QString::fromUtf8("Главная ссылка для службы каталогов не настроена. Таким образом, службе каталогов не удастся выдать ссылки на объекты вне этого леса");
    if (code == 8407) return QString::fromUtf8("Нельзя восстановить атрибут типа образца");
    if (code == 8408) return QString::fromUtf8("Произошла внутренняя ошибка");
    if (code == 8409) return QString::fromUtf8("Произошла ошибка базы данных");
    if (code == 8410) return QString::fromUtf8("Не найден атрибут GOVERNSID");
    if (code == 8411) return QString::fromUtf8("Не найден ожидаемый атрибут");
    if (code == 8412) return QString::fromUtf8("Указанный контекст именования не может найти перекрестную ссылку");
    if (code == 8413) return QString::fromUtf8("Произошла ошибка проверки безопасности");
    if (code == 8414) return QString::fromUtf8("Эта схема не загружена");
    if (code == 8415) return QString::fromUtf8("Сбой размещения схемы. Возможно, недостаточно памяти");
    if (code == 8416) return QString::fromUtf8("Невозможно получить требуемый синтаксис для схемы атрибута");
    if (code == 8417) return QString::fromUtf8("Произошла ошибка проверки глобального каталога. Глобальный каталог или недоступен, или не поддерживает такую операцию. Одна из частей службы каталогов сейчас не доступна");
    if (code == 8418) return QString::fromUtf8("Произошла ошибка операции репликации из-за несоответствия схемы задействованных серверов");
    if (code == 8419) return QString::fromUtf8("Не удается найти объект DSA");
    if (code == 8420) return QString::fromUtf8("Не удается найти контекст именования");
    if (code == 8421) return QString::fromUtf8("Не удается найти контекст именования в кэше");
    if (code == 8422) return QString::fromUtf8("Дочерний объект не может быть получен");
    if (code == 8423) return QString::fromUtf8("По соображениям безопасности это изменение не разрешено");
    if (code == 8424) return QString::fromUtf8("Эта операция не может заменить скрытую запись");
    if (code == 8425) return QString::fromUtf8("Файл иерархии недоступен");
    if (code == 8426) return QString::fromUtf8("Не удалась попытка ");
    if (code == 8427) return QString::fromUtf8("Параметр конфигурации каталога не найден в реестре");
    if (code == 8428) return QString::fromUtf8("Сбой попытки вычислить индекс адресной книги");
    if (code == 8429) return QString::fromUtf8("Сбой размещения таблицы иерархии");
    if (code == 8430) return QString::fromUtf8("Внутренняя ошибка службы каталогов");
    if (code == 8431) return QString::fromUtf8("Неизвестная ошибка службы каталогов");
    if (code == 8432) return QString::fromUtf8("Корневой объект требует \"верхнего\" класса");
    if (code == 8433) return QString::fromUtf8("Сервер каталогов прекращает работу и не может быть использован как владелец передаваемых монопольных операций (FSMO)");
    if (code == 8434) return QString::fromUtf8("В службе каталогов утеряна обязательная информация и невозможно определить владельца передаваемых монопольных операций (FSMO)");
    if (code == 8435) return QString::fromUtf8("Службе каталогов не удается передать владение одной или несколькими передаваемыми монопольными операциями (FSMO) на другие серверы");
    if (code == 8436) return QString::fromUtf8("Ошибка операции репликации");
    if (code == 8437) return QString::fromUtf8("Для этой операции репликации указан недопустимый параметр");
    if (code == 8438) return QString::fromUtf8("Служба каталогов занята и не может завершить сейчас операцию репликации");
    if (code == 8439) return QString::fromUtf8("Для этой операции репликации указано недопустимое различающееся имя");
    if (code == 8440) return QString::fromUtf8("Для этой операции репликации указан недопустимый контекст именования");
    if (code == 8441) return QString::fromUtf8("Указанное для этой операции репликации различающееся имя уже существует");
    if (code == 8442) return QString::fromUtf8("В системе репликации произошла внутренняя ошибка");
    if (code == 8443) return QString::fromUtf8("Обнаружено несоответствие в базе данных при выполнении операции репликации");
    if (code == 8444) return QString::fromUtf8("Нет доступа к серверу, выбранному для этой операции репликации");
    if (code == 8445) return QString::fromUtf8("При выполнении операции репликации встречен объект недопустимого типа");
    if (code == 8446) return QString::fromUtf8("Ошибка размещения в памяти при выполнении операции репликации");
    if (code == 8447) return QString::fromUtf8("Произошла ошибка операции репликации, связанная с почтовой системой");
    if (code == 8448) return QString::fromUtf8("Ссылочная информация о репликации для конечного сервера уже существует");
    if (code == 8449) return QString::fromUtf8("Ссылочная информация о репликации для конечного сервера не существует");
    if (code == 8450) return QString::fromUtf8("Нельзя удалить контекст именования, т.к. он реплицирован на другой сервер");
    if (code == 8451) return QString::fromUtf8("Произошла ошибка базы данных при выполнении репликации");
    if (code == 8452) return QString::fromUtf8("Контекст именования находится в процессе удаления или не был реплицирован с указанного сервера");
    if (code == 8453) return QString::fromUtf8("Доступ к репликации отвергнут");
    if (code == 8454) return QString::fromUtf8("Эта операция репликации не поддерживается в данной версии службы каталогов");
    if (code == 8455) return QString::fromUtf8("Репликация вызова удаленной процедуры была прервана");
    if (code == 8456) return QString::fromUtf8("Исходный сервер в настоящий момент отвергает запросы на репликацию");
    if (code == 8457) return QString::fromUtf8("Конечный сервер в настоящий момент отвергает запросы на репликацию");
    if (code == 8458) return QString::fromUtf8("Ошибка операции репликации из-за конфликта имен объектов");
    if (code == 8459) return QString::fromUtf8("Источник репликации был установлен заново");
    if (code == 8460) return QString::fromUtf8("Ошибка операции репликации из-за отсутствия требуемого родительского объекта");
    if (code == 8461) return QString::fromUtf8("Операция репликации была выполнена раньше других");
    if (code == 8462) return QString::fromUtf8("Попытка синхронизации репликации была прервана из-за отсутствия обновлений");
    if (code == 8463) return QString::fromUtf8("Операция репликации была прервана, т.к. происходит выключение системы");
    if (code == 8464) return QString::fromUtf8("Попытка синхронизации завершена с ошибкой, т.к. конечный контроллер домена ожидает завершения синхронизации с источником нового частного набора атрибутов. Это нормальное состояние, если недавнее изменение схемы привело к модификации частного набора атрибутов. Конечный частный набор атрибутов не является подмножеством исходного частного набора атрибутов");
    if (code == 8465) return QString::fromUtf8("Попытка синхронизации репликации завершена с ошибкой, т.к. мастер-реплика попыталась синхронизироваться с неполной реплики");
    if (code == 8466) return QString::fromUtf8("Получен доступ к серверу, указанному для операции репликации, но это сервер не смог связаться с другим сервером, необходимым для завершения операции");
    if (code == 8467) return QString::fromUtf8("Версия схемы службы каталогов исходного леса несовместима с версией службы каталогов на этом компьютере");
    if (code == 8468) return QString::fromUtf8("Ошибка обновления схемы: атрибут с таким идентификатором ссылки уже существует");
    if (code == 8469) return QString::fromUtf8("Преобразование имен: общая ошибка обработки");
    if (code == 8470) return QString::fromUtf8("Преобразование имен: не удается найти имя или права на чтение имени недостаточны");
    if (code == 8471) return QString::fromUtf8("Преобразование имен: входящее имя сопоставлено более чем одному исходящему имени");
    if (code == 8472) return QString::fromUtf8("Преобразование имен: входящее имя найдено, но оно исходящий формат неверен");
    if (code == 8473) return QString::fromUtf8("Преобразование имен: не удается разрешить имя полностью, найден только домен");
    if (code == 8474) return QString::fromUtf8("Преобразование имен: не удается выполнить полное синтаксическое сопоставление у клиента без осуществления подключения");
    if (code == 8475) return QString::fromUtf8("Изменение построенного атрибута не допускается");
    if (code == 8476) return QString::fromUtf8("Указанный OM-Object-Class неверен для атрибута с таким синтаксисом");
    if (code == 8477) return QString::fromUtf8("Запрос на репликацию отправлен; ждите отклик");
    if (code == 8478) return QString::fromUtf8("Для выполнения требуемой операции нужна служба каталогов, которая недоступна");
    if (code == 8479) return QString::fromUtf8("Выводимое имя LDAP для класса или атрибута содержит символы, не входящие в ASCII");
    if (code == 8480) return QString::fromUtf8("Требуемая операция поиска поддерживается для простого поиска");
    if (code == 8481) return QString::fromUtf8("Операция поиска не смогла получить атрибуты из базы данных");
    if (code == 8482) return QString::fromUtf8("Операция обновления схемы попыталась добавить атрибут обратной ссылки, не имеющей соответствующей ссылки вперед");
    if (code == 8483) return QString::fromUtf8("Исходное и конечное расположение при перемещении между доменами не смогли быть согласованы по временным характеристикам объекта. Или исходное, или конечное место не обладают последней версией объекта");
    if (code == 8484) return QString::fromUtf8("Исходное и конечное расположение при перемещении между доменами не смогли согласовать имя объекта. Или исходном, или в конечном месте отсутствует последняя версия объекта");
    if (code == 8485) return QString::fromUtf8("Исходное и конечное расположение при перемещении между доменами совпадают. Следует использовать операцию локального перемещения вместо междоменного");
    if (code == 8486) return QString::fromUtf8("Исходное и конечное расположение при перемещении между доменами не согласованы по контексту именования в лесу. Или исходном, или в конечном месте отсутствует последняя версия контейнера разделов");
    if (code == 8487) return QString::fromUtf8("Конечное расположение при перемещении между доменами не является полномочным для конечного контекста именования");
    if (code == 8488) return QString::fromUtf8("Исходное и конечное расположение при перемещении между доменами не согласовали подлинность исходного объекта. Или исходном, или в конечном месте отсутствует последняя версия исходного объекта");
    if (code == 8489) return QString::fromUtf8("Объект перемещаемый между доменами уже помечен для удаления конечным сервером. На исходном сервере отсутствует последняя версия исходного объекта");
    if (code == 8490) return QString::fromUtf8("Уже выполняется другая операция, требующая доступа к PDC FSMO");
    if (code == 8491) return QString::fromUtf8("Операция перемещения между доменами завершена с ошибкой, т.к. существуют две версии перемещаемого объекта, - по каждой в исходном и конечном домене. Конечный объект должен быть перемещен для восстановления системы в согласованное состояние");
    if (code == 8492) return QString::fromUtf8("Этот объект не может быть перемещен за границу домена, т.к. либо междоменное перемещение для этого класса не разрешено, либо объект имеет особые параметры, к примеру: ограничение RID или доверительная учетная запись, не разрешающие перемещение объектов");
    if (code == 8493) return QString::fromUtf8("Перемещение объектов - членов группы невозможно, т.к. такое перемещение нарушит условия принадлежности к группе учетных записей. Удалите объект из любой из групп учетных записей и повторите попытку");
    if (code == 8494) return QString::fromUtf8("Заголовок контекста именования должен быть непосредственным потомком другого заголовка контекста именования, но не внутреннего узла");
    if (code == 8495) return QString::fromUtf8("Каталог не может проверить предлагаемый контекст именования для имени, т.к. он не содержит реплику предложенного контекста именования. Убедитесь, что роль хозяина именования доменов выполняется сервером, сконфигурированным как сервер глобального каталога, и что его состояние соответствует состоянию партнеров репликации. (Применяется только к хозяинам именования доменов Windows 2000)");
    if (code == 8496) return QString::fromUtf8("Конечный домен должен быть в основном режиме");
    if (code == 8497) return QString::fromUtf8("Операция не может быть выполнена, т.к. сервер не имеет контейнера инфраструктуры в нужном домене");
    if (code == 8498) return QString::fromUtf8("Междоменное перемещение непустых групп учетных записей не разрешается");
    if (code == 8499) return QString::fromUtf8("Междоменное перемещение непустых групп ресурсов не разрешается");
    if (code == 8500) return QString::fromUtf8("Для атрибута заданы недопустимые параметры поиска. Бит ANR допускается только для атрибутов строк Юникод или Teletex");
    if (code == 8501) return QString::fromUtf8("Удаление дерева начато с объекта, имеющего NC-заголовок, т.к. потомки не разрешены");
    if (code == 8502) return QString::fromUtf8("Служба каталогов не смогла заблокировать дерево при подготовке к его удалению, т.к. дерево на тот момент использовалось");
    if (code == 8503) return QString::fromUtf8("Служба каталогов не смогла определить список объектов на удаление при осуществлении попытки удаления дерева");
    if (code == 8505) return QString::fromUtf8("Только администратор может изменить список членов группы администраторов");
    if (code == 8506) return QString::fromUtf8("Невозможно изменить основной идентификатор группы для учетной записи контроллера домена");
    if (code == 8507) return QString::fromUtf8("Сделана попытка изменить основную схему");
    if (code == 8508) return QString::fromUtf8("Добавление нового обязательного атрибута в существующий класс или необязательного атрибута в специализированный класс TОР, который не является наследуемым атрибутом (явно или неявно через механизм наследования, к примеру, добавляя или удаляя вспомогательный класс), - недопустимо");
    if (code == 8509) return QString::fromUtf8("Обновление схемы не разрешено для DC, поскольку DC не является владельцем роли FSMO");
    if (code == 8510) return QString::fromUtf8("Объект данного класса не может быть создан в контейнере схемы. В контейнере схемы можно создать только объекты типа attribute-schema и class-schema");
    if (code == 8511) return QString::fromUtf8("Установка реплики или потомка не смогла получить атрибут objectVersion в контейнере схемы в исходном DC. Атрибут отсутствует в контейнере схемы или у вас отсутствуют права на чтение атрибута");
    if (code == 8512) return QString::fromUtf8("Установка реплики или потомка не смогла получить атрибут objectVersion в секции SCHEMA файла schema.ini в папке system32");
    if (code == 8513) return QString::fromUtf8("Указан недопустимый тип группы");
    if (code == 8514) return QString::fromUtf8("Нельзя вложить глобальные группы в смешанный домен, если группа имеет включенную безопасность");
    if (code == 8515) return QString::fromUtf8("Нельзя вложить локальные группы в смешанный домен, если группа имеет включенную безопасность");
    if (code == 8516) return QString::fromUtf8("Локальная группа не может быть членом глобальной группы");
    if (code == 8517) return QString::fromUtf8("Универсальная группа не может быть членом глобальной группы");
    if (code == 8518) return QString::fromUtf8("Локальная группа не может быть членом универсальной группы");
    if (code == 8519) return QString::fromUtf8("Глобальная группа не может иметь междоменного участника");
    if (code == 8520) return QString::fromUtf8("Локальная междоменная группа не может быть членом другой локальной группы");
    if (code == 8521) return QString::fromUtf8("Группу с основными участниками нельзя изменить на группу с отключенной безопасностью");
    if (code == 8522) return QString::fromUtf8("Ошибка преобразования строки по умолчанию SD на объекте class-schema при загрузке кэша схемы");
    if (code == 8523) return QString::fromUtf8("Только для DSA, настроенных как серверы глобального каталога, разрешена роль хозяина именования доменов FSMO. (Применяется только к серверам Windows 2000)");
    if (code == 8524) return QString::fromUtf8("Операция DSA не смогла быть выполнена, т.к. произошла ошибка поиска в DNS");
    if (code == 8525) return QString::fromUtf8("При изменении имени узла DNS для объекта, значения имени участника службы сохранить при синхронизации нельзя");
    if (code == 8526) return QString::fromUtf8("Не удается прочесть атрибут дескриптора безопасности");
    if (code == 8527) return QString::fromUtf8("Требуемый объект не найден, но найден объект с таким разделом");
    if (code == 8528) return QString::fromUtf8("Недопустимый синтаксис добавляемого связанного атрибута. Прямые ссылки могут иметь синтаксис 2.5.5.1, 2.5.5.7 и 2.5.5.14, а обратные ссылки - только синтаксис 2.5.5.1");
    if (code == 8529) return QString::fromUtf8("Диспетчеру учетных записей безопасности нужно получить пароль загрузки");
    if (code == 8530) return QString::fromUtf8("Диспетчеру учетных записей безопасности нужно получить ключ загрузки с дискеты");
    if (code == 8531) return QString::fromUtf8("Невозможно запустить службу каталогов");
    if (code == 8532) return QString::fromUtf8("Не удается запустить службы каталогов");
    if (code == 8533) return QString::fromUtf8("Подключение между сервером и клиентом требует пакетного или более высокого уровня безопасности");
    if (code == 8534) return QString::fromUtf8("Исходный домен не может быть в одном лесу с конечным доменом");
    if (code == 8535) return QString::fromUtf8("Конечный домен должен быть в этом домене");
    if (code == 8536) return QString::fromUtf8("Операция требует включенного аудита конечного домена");
    if (code == 8537) return QString::fromUtf8("Операция не может найти контроллер домена для исходного домена");
    if (code == 8538) return QString::fromUtf8("Исходный объект должен быть группой или пользователем");
    if (code == 8539) return QString::fromUtf8("SID исходного объекта уже существует в конечном лесу");
    if (code == 8540) return QString::fromUtf8("Исходный и конечный объект должны быть одного типа");
    if (code == 8542) return QString::fromUtf8("Не удалось включить информацию о схеме в запрос на репликацию");
    if (code == 8543) return QString::fromUtf8("Не удалось завершить операцию репликации из-за несовместимости с предыдущей схемой");
    if (code == 8544) return QString::fromUtf8("Не удалось завершить операцию репликации из-за несовместимости с предыдущей схемой");
    if (code == 8545) return QString::fromUtf8("Обновление репликации не проведено, поскольку либо источник либо Приемник еще не получил информацию о последней операции перемещения между доменами");
    if (code == 8546) return QString::fromUtf8("Не удалось удалить, указанный домен поскольку еще существуют контроллеры этого домена");
    if (code == 8547) return QString::fromUtf8("Выполнение запрошенной операции возможно только на сервере глобального каталога");
    if (code == 8548) return QString::fromUtf8("Локальная группа может быть членом другой локальной группы только того же домена");
    if (code == 8549) return QString::fromUtf8("Субъекты внешней безопасности не могут быть членами универсальных групп");
    if (code == 8550) return QString::fromUtf8("Атрибут нельзя реплицировать в GC по причинам безопасности");
    if (code == 8551) return QString::fromUtf8("Не удается достичь контрольной точки PDC, поскольку в данный момент производится слишком много модификаций");
    if (code == 8552) return QString::fromUtf8("Операция требует включенного аудита конечного домена");
    if (code == 8553) return QString::fromUtf8("Основные объекты-субъекты безопасности могут быть созданы только внутри контекстов именования доменов");
    if (code == 8554) return QString::fromUtf8("Не удалось создать имя участника службы (SPN), поскольку предложенное имя узла имеет неподходящий формат");
    if (code == 8555) return QString::fromUtf8("Пропущен фильтр, который использует построенные атрибуты");
    if (code == 8556) return QString::fromUtf8("Значение атрибута unicodePwd должно заключаться в двойные кавычки");
    if (code == 8557) return QString::fromUtf8("Компьютер не может быть присоединен к домену. На этом домене превышено максимальное допустимое число учетных записей. Обратитесь к системному администратору с просьбой отменить это ограничение или увеличить значение");
    if (code == 8558) return QString::fromUtf8("По причинам безопасности, операция должна выполняться на назначенном контроллере домена");
    if (code == 8559) return QString::fromUtf8("По причинам безопасности, на исходном  контроллере домена должен быть установлена Windows NT 4 с пакетом обновления 4 или более поздняя операционная система");
    if (code == 8560) return QString::fromUtf8("Критические объекты службы каталогов не могут быть удалены во время удаления дерева каталогов. Удаление дерева может выполнено лишь частично");
    if (code == 8563) return QString::fromUtf8("Версия операционной системы несовместима с текущим режимом работы леса AD DS или набором конфигураций AD LDS. Чтобы сервер смог стать контроллером домена AD DS , необходимо обновить на нем операционную систему или добавить экземпляр AD LDS в этот лес AD DS или набор конфигураций AD LDS");
    if (code == 8564) return QString::fromUtf8("Установленная версия операционной системы несовместима с текущим режимом работы домена. Чтобы сервер смог стать контроллером домена этого домена, необходимо обновить на нем операционную систему");
    if (code == 8565) return QString::fromUtf8("Версия операционной системы, установленная на этом сервере, больше не поддерживает текущий режим работы леса AD DS или набор конфигураций AD LDS. Необходимо изменить режим работы леса AD DS или набора конфигураций AD LDS, чтобы сервер смог стать контроллером домена AD DS или экземпляром AD LDS в этом лесу набора конфигураций");
    if (code == 8566) return QString::fromUtf8("Установленная на сервере версия операционной системы не поддерживает текущий режим работы домена. Чтобы этот сервер смог стать контроллером домена этого домена, необходимо изменить режим работы домена");
    if (code == 8567) return QString::fromUtf8("Установленная на сервере версия операционной системы не совместима с текущим режимом работы домена или леса");
    if (code == 8568) return QString::fromUtf8("Режим работы домена или леса не может быть изменен на заданный режим, поскольку существует один или более контроллеров домена в домене или лесе, которые работают в более низком несовместимом режиме");
    if (code == 8569) return QString::fromUtf8("Режим работы леса не может быть изменен на заданный режим, поскольку один или более доменов работают в смешанном режиме. Для изменения режима работы леса все домены в лесу должны работать в основном режиме");
    if (code == 8570) return QString::fromUtf8("Требуемая порядок сортировки не поддерживается");
    if (code == 8571) return QString::fromUtf8("Указанное имя уже используется в качестве уникального идентификатора");
    if (code == 8572) return QString::fromUtf8("Учетная запись для компьютера была создана в системе версии ниже NT4. Ее следует создать заново");
    if (code == 8573) return QString::fromUtf8("Версия базы данных не соответствует версии хранилищу");
    if (code == 8574) return QString::fromUtf8("Не удается продолжить операцию из-за нескольких конфликтующих команд");
    if (code == 8575) return QString::fromUtf8("Не удается найти правильный домен ссылки на дескриптор безопасности для раздела");
    if (code == 8576) return QString::fromUtf8("Ошибка обновления схемы:  Это идентификатор связи зарезервирован");
    if (code == 8577) return QString::fromUtf8("Ошибка обновления схемы: Нет доступных идентификаторов связи");
    if (code == 8578) return QString::fromUtf8("Группа учетных записей не может иметь  универсальную группу в качестве члена");
    if (code == 8579) return QString::fromUtf8("Переименование и перемещение заголовков контекста именования и объектов, доступных только для чтения, запрещены");
    if (code == 8580) return QString::fromUtf8("Перемещение объектов из контекста именования схемы запрещено");
    if (code == 8581) return QString::fromUtf8("Для объекта был установлен системный флаг, запрещающий его перемещение и переименование");
    if (code == 8582) return QString::fromUtf8("Объект не может менять прародительский контейнер. Перемещение для него не запрещено, однако ограничено родственными контейнерами");
    if (code == 8583) return QString::fromUtf8("Полное сопоставление не удалось, будет создана ссылка на другой лес");
    if (code == 8584) return QString::fromUtf8("Запрошенное действие не поддерживается стандартным сервером");
    if (code == 8585) return QString::fromUtf8("Нет доступа к разделу службы каталогов на удаленном сервере. Убедитесь в наличии хотя бы одного работающего сервера для этого раздела");
    if (code == 8586) return QString::fromUtf8("Не удается проверить предложенное имя контекста именования или раздела, так как каталог не содержит и/или не может обратиться вышестоящей реплике контекста именования. Проверьте правильность регистрации родительского контекста именования в DNS, а также доступность хотя бы одной реплики этого контекста хозяину именования доменов");
    if (code == 8587) return QString::fromUtf8("Предел потоков для этого запроса был превышен");
    if (code == 8588) return QString::fromUtf8("Сервер глобального каталога не входит в ближайший сайт");
    if (code == 8589) return QString::fromUtf8("Служба каталогов не может создать имя участника службы (SPN), с помощью которого будет выполняться взаимная проверка подлинности с сервером, так как у соответствующего объекта для сервера в локальной базе данных службы каталогов отсутствует атрибут serverReference");
    if (code == 8590) return QString::fromUtf8("Службу каталогов не удалось перевести в однопользовательский режим");
    if (code == 8591) return QString::fromUtf8("Служба каталогов не может проинтерпретировать сценарий из-за синтаксической ошибки");
    if (code == 8592) return QString::fromUtf8("Служба каталогов не может обработать сценарий из-за ошибки");
    if (code == 8593) return QString::fromUtf8("Служба каталогов не может выполнить операцию, так как вовлеченные в нее серверы относятся к разным состояниям репликации (что чаще всего связано с выполняющимся переименованием домена)");
    if (code == 8594) return QString::fromUtf8("Привязка службы каталогов должна быть заново согласована из-за изменений в данных о серверных расширениях");
    if (code == 8595) return QString::fromUtf8("Операция недопустима для отключенной перекрестной ссылки");
    if (code == 8596) return QString::fromUtf8("Ошибка при обновлении схемы: отсутствуют значения для msDS-IntId");
    if (code == 8597) return QString::fromUtf8("Ошибка при обновлении схемы: найдены дубликаты msDS-INtId. Повторите операцию");
    if (code == 8598) return QString::fromUtf8("Ошибка при удалении схемы: атрибут использован в rDNAttID");
    if (code == 8599) return QString::fromUtf8("Службе каталогов не удалось авторизовать запрос");
    if (code == 8600) return QString::fromUtf8("Служба каталогов не может обработать недопустимый сценарий");
    if (code == 8601) return QString::fromUtf8("Ошибка удаленной операции по созданию перекрестной ссылки для FSMO хозяина именования доменов. Сведения об ошибке находятся в расширенных данных");
    if (code == 8602) return QString::fromUtf8("Перекрестная ссылка с таким же именем используется локально");
    if (code == 8603) return QString::fromUtf8("Службе каталогов не удается создать имя участника службы (SPN), с помощью которого будет выполняться взаимная проверка подлинности с сервером, так как домен этого сервера был удален из леса");
    if (code == 8604) return QString::fromUtf8("Доступные для записи NC препятствуют понижению роли этого DC");
    if (code == 8605) return QString::fromUtf8("Запрошенный объект имеет неуникальный идентификатор, поэтому его невозможно извлечь");
    if (code == 8606) return QString::fromUtf8("Задано недостаточно атрибутов для создания объекта. Этот объект не может существовать, поскольку он был удален и собран в качестве мусора");
    if (code == 8607) return QString::fromUtf8("Эту группу нельзя преобразовать из-за ограничений атрибутов в запрошенном типе группы");
    if (code == 8608) return QString::fromUtf8("Перемещение между доменами непустых основных групп приложений запрещено");
    if (code == 8609) return QString::fromUtf8("Перемещение между доменами непустых использующих запросы приложений запрещено");
    if (code == 8610) return QString::fromUtf8("Невозможно проверить обладание ролью FSMO, поскольку соответствующий раздел каталога не был реплицирован ни с одним партнером репликации");
    if (code == 8611) return QString::fromUtf8("Конечный контейнер для перенаправления контейнера общеизвестного объекта не может являться особым контейнером");
    if (code == 8612) return QString::fromUtf8("Службе каталогов не удается выполнить запрошенную операцию, поскольку выполняется операция переименования домена");
    if (code == 8613) return QString::fromUtf8("Служба каталогов обнаружила дочерний раздел внутри создаваемого раздела. Иерархия разделов должна создаваться сверху вниз");
    if (code == 8614) return QString::fromUtf8("Репликация службы каталогов с этим сервером невозможна, поскольку время с момента последней репликации с этим сервером превышает время жизни захоронения");
    if (code == 8615) return QString::fromUtf8("Запрошенная операция неприменима к объектам в контейнере System");
    if (code == 8616) return QString::fromUtf8("В очереди отправки LDAP-серверов нет места, поскольку клиент не обрабатывает результаты или слишком быстро отправляет запросы. Пока клиент не получит ответы, новые запросы обрабатываться не будут. Если клиент не получит ответы, он будет отключен");
    if (code == 8617) return QString::fromUtf8("Запланированная репликация не была выполнена, поскольку система была занята и невозможно было выполнить запрос на репликацию в отведенное время. Очередь репликации перегружена. Возможно, следует уменьшить число партнеров репликации или понизить частоту выполнения репликации");
    if (code == 8618) return QString::fromUtf8("В настоящее время нельзя определить, доступна ли политика репликации разветвления на контроллере домена. Повторите попытку позднее, чтобы учесть задержки репликации");
    if (code == 8619) return QString::fromUtf8("Объект параметров указанного сайта не существует");
    if (code == 8620) return QString::fromUtf8("В хранилище локальных учетных записей отсутствуют секретные сведения по указанной учетной записи");
    if (code == 8621) return QString::fromUtf8("Не найден контроллер данного домена с поддержкой записи");
    if (code == 8622) return QString::fromUtf8("Объект-сервер для контроллера домена не существует");
    if (code == 8623) return QString::fromUtf8("Объект параметров NTDS для контроллера домена не существует");
    if (code == 8624) return QString::fromUtf8("Требуемая операция поиска не поддерживается для ASQ-поиска");
    if (code == 8625) return QString::fromUtf8("Запрошенное событие аудита не может быть сгенерировано для данной операции");
    if (code == 8626) return QString::fromUtf8("Недопустимые параметры поиска для атрибута. Бит индекса поддерева допустим только для однозначных атрибутов");
    if (code == 8627) return QString::fromUtf8("Недопустимые параметры поиска для атрибута. Бит индекса кортежа допустим только для атрибутов строк в формате Юникода");
    if (code == 8628) return QString::fromUtf8("Слишком глубокий уровень вложения адресных книг. Не удалось построить таблицу иерархии");
    if (code == 8629) return QString::fromUtf8("Указанный вектор Uptodateness поврежден");
    if (code == 8630) return QString::fromUtf8("Запрос на репликацию секретов запрещен");
    if (code == 8631) return QString::fromUtf8("Ошибка при обновлении схемы: этот идентификатор MAPI зарезервирован");
    if (code == 8632) return QString::fromUtf8("Ошибка при обновлении схемы: нет доступных идентификаторов MAPI");
    if (code == 8633) return QString::fromUtf8("Сбой операции репликации: отсутствуют требуемые атрибуты локального объекта krbtgt");
    if (code == 8634) return QString::fromUtf8("Имя доверенного домена уже существует в лесу");
    if (code == 8635) return QString::fromUtf8("Плоское имя доверенного домена уже существует в лесу");
    if (code == 8636) return QString::fromUtf8("Недействительное имя участника-пользователя");
    if (code == 8637) return QString::fromUtf8("Идентификатор объекта сопоставляемых групп не может содержать члены");
    if (code == 8638) return QString::fromUtf8("Указанный идентификатор объекта не найден");
    if (code == 8639) return QString::fromUtf8("Не удалось выполнить операцию репликации, поскольку значение ссылки указывает на повторно используемый целевой объект");
    if (code == 9001) return QString::fromUtf8("DNS-сервер не смог обработать этот формат");
    if (code == 9002) return QString::fromUtf8("Ошибка DNS-сервера");
    if (code == 9003) return QString::fromUtf8("DNS-имя не существует");
    if (code == 9004) return QString::fromUtf8("DNS-запрос не поддерживается сервером имен");
    if (code == 9005) return QString::fromUtf8("Операция DNS отвергнута");
    if (code == 9006) return QString::fromUtf8("Существует DNS-имя, которое не должно существовать");
    if (code == 9007) return QString::fromUtf8("Существует набор DNS RR, который не должен существовать");
    if (code == 9008) return QString::fromUtf8("Не существует набор DNS RR, который должен существовать");
    if (code == 9009) return QString::fromUtf8("DNS-сервер не является полномочным для этой зоны");
    if (code == 9010) return QString::fromUtf8("При обновлении DNS-имя вне этой зоны");
    if (code == 9016) return QString::fromUtf8("Невозможно проверить подпись DNS");
    if (code == 9017) return QString::fromUtf8("Неверный раздел DNS");
    if (code == 9018) return QString::fromUtf8("Срок действия подписи DNS истек");
    if (code == 9501) return QString::fromUtf8("Для данного запроса записей в DNS не найдено");
    if (code == 9502) return QString::fromUtf8("Неверный пакет DNS");
    if (code == 9503) return QString::fromUtf8("Пакет DNS отсутствует");
    if (code == 9504) return QString::fromUtf8("Ошибка DNS, проверьте RCODE");
    if (code == 9505) return QString::fromUtf8("Небезопасный пакет DNS");
    if (code == 9551) return QString::fromUtf8("Недопустимый тип DNS");
    if (code == 9552) return QString::fromUtf8("Недопустимый IP-адрес");
    if (code == 9553) return QString::fromUtf8("Недопустимое свойство");
    if (code == 9554) return QString::fromUtf8("Повторите операцию DNS позже еще раз");
    if (code == 9555) return QString::fromUtf8("Запись для указанного имени и типа не является уникальной");
    if (code == 9556) return QString::fromUtf8("DNS-имя не соответствует спецификации RFC");
    if (code == 9557) return QString::fromUtf8("Это DNS-имя является полным DNS-именем");
    if (code == 9558) return QString::fromUtf8("DNS-имя, разделенное точками (multi-label)");
    if (code == 9559) return QString::fromUtf8("DNS-имя является именем, состоящим из одной части");
    if (code == 9560) return QString::fromUtf8("Сетевое имя содержит недопустимые символы");
    if (code == 9561) return QString::fromUtf8("DNS-имя состоит только из цифр");
    if (code == 9562) return QString::fromUtf8("Запрошенная операция недопустима для корневого сервера DNS");
    if (code == 9563) return QString::fromUtf8("Не удается создать эту запись, поскольку эта часть пространства имен DNS делегирована другому DNS-серверу");
    if (code == 9564) return QString::fromUtf8("DNS-серверу не удается найти набор корневых ссылок");
    if (code == 9565) return QString::fromUtf8("DNS-сервер обнаружил корневые ссылки, но они различаются на разных адаптерах");
    if (code == 9566) return QString::fromUtf8("Указанное значение слишком мало для данного параметра");
    if (code == 9567) return QString::fromUtf8("Указанное значение слишком велико для данного параметра");
    if (code == 9568) return QString::fromUtf8("Эта операция не разрешена в то время, когда DNS-сервер загружает зоны в фоновом режиме. Повторите попытку позднее");
    if (code == 9569) return QString::fromUtf8("Запрошенная операция не разрешена для DNS-сервера, запущенного на контроллере домена только для чтения");
    if (code == 9570) return QString::fromUtf8("Под записью DNAME не должно быть никаких данных");
    if (code == 9571) return QString::fromUtf8("Для данной операции требуется делегирование учетных данных");
    if (code == 9572) return QString::fromUtf8("Таблица политики разрешения имен повреждена. До исправления разрешение DNS будет завершаться ошибкой. Обратитесь к администратору сети");
    if (code == 9601) return QString::fromUtf8("Зона DNS не существует");
    if (code == 9602) return QString::fromUtf8("Информация о зоне DNS недоступна");
    if (code == 9603) return QString::fromUtf8("Недопустимая операция на зоне DNS");
    if (code == 9604) return QString::fromUtf8("Недопустимая конфигурация зоны DNS");
    if (code == 9605) return QString::fromUtf8("В зоне DNS отсутствует начальная запись зоны (SOA)");
    if (code == 9606) return QString::fromUtf8("В зоне DNS отсутствует запись о сервере имен (NS)");
    if (code == 9607) return QString::fromUtf8("Зона DNS заблокирована");
    if (code == 9608) return QString::fromUtf8("Ошибка создания зоны DNS");
    if (code == 9609) return QString::fromUtf8("Зона DNS уже существует");
    if (code == 9610) return QString::fromUtf8("Автоматическая зона DNS уже существует");
    if (code == 9611) return QString::fromUtf8("Недопустимый тип зоны DNS");
    if (code == 9612) return QString::fromUtf8("Вторичная зона DNS требует основного IP-адреса");
    if (code == 9613) return QString::fromUtf8("Зона DNS не является дополнительной зоной");
    if (code == 9614) return QString::fromUtf8("Нужен вторичный IP-адрес");
    if (code == 9615) return QString::fromUtf8("Ошибка инициализации WINS");
    if (code == 9616) return QString::fromUtf8("Требуется сервер WINS");
    if (code == 9617) return QString::fromUtf8("Ошибка вызова инициализации NBTSTAT");
    if (code == 9618) return QString::fromUtf8("Недопустимое удаление начальной записи зоны (SOA)");
    if (code == 9619) return QString::fromUtf8("Условная зона перенаправления для этого имени уже имеется");
    if (code == 9620) return QString::fromUtf8("Зона должна быть настроена с одним или несколькими IP-адресами главного сервера DNS");
    if (code == 9621) return QString::fromUtf8("Операция не может быть выполнена из-за неактивности зоны");
    if (code == 9651) return QString::fromUtf8("Основная зона DNS требует файла данных");
    if (code == 9652) return QString::fromUtf8("Недопустимое имя файла данных зоны DNS");
    if (code == 9653) return QString::fromUtf8("Ошибка открытия файла данных зоны DNS");
    if (code == 9654) return QString::fromUtf8("Ошибка записи в файл данных зоны DNS");
    if (code == 9655) return QString::fromUtf8("Ошибка чтения из файла данных зоны DNS");
    if (code == 9701) return QString::fromUtf8("Запись DNS не существует");
    if (code == 9702) return QString::fromUtf8("Ошибка формата записи DNS");
    if (code == 9703) return QString::fromUtf8("Ошибка создания узла DNS");
    if (code == 9704) return QString::fromUtf8("Неизвестный тип записи DNS");
    if (code == 9705) return QString::fromUtf8("Таймаут записи DNS");
    if (code == 9706) return QString::fromUtf8("Имя находится вне зоны DNS");
    if (code == 9707) return QString::fromUtf8("Обнаружен цикл CNAME");
    if (code == 9708) return QString::fromUtf8("Узел является записью CNAME DNS");
    if (code == 9709) return QString::fromUtf8("Для указанного имени уже существует запись CNAME");
    if (code == 9710) return QString::fromUtf8("Запись только в корневой зоне DNS");
    if (code == 9711) return QString::fromUtf8("Запись DNS уже существует");
    if (code == 9712) return QString::fromUtf8("Ошибка данных вторичной зоны DNS");
    if (code == 9713) return QString::fromUtf8("Не удается создать кэшированные данные DNS");
    if (code == 9714) return QString::fromUtf8("DNS-имя не существует");
    if (code == 9715) return QString::fromUtf8("Не удается создать запись указателя (PTR)");
    if (code == 9716) return QString::fromUtf8("Домен DNS был возращен после удаления");
    if (code == 9717) return QString::fromUtf8("Служба каталогов недоступна");
    if (code == 9718) return QString::fromUtf8("Зона DNS уже существует в службе каталогов");
    if (code == 9719) return QString::fromUtf8("DNS-сервер не создает или не читает корневой файл для интегрированной зоны DNS службы каталогов");
    if (code == 9720) return QString::fromUtf8("Узел является записью DNAME DNS");
    if (code == 9721) return QString::fromUtf8("Для указанного имени уже существует запись DNAME");
    if (code == 9722) return QString::fromUtf8("Обнаружена циклическая ссылка псевдонима для записи CNAME или DNAME");
    if (code == 9751) return QString::fromUtf8("Завершение DNS AXFR (передачи зоны)");
    if (code == 9752) return QString::fromUtf8("Ошибка передачи зоны DNS");
    if (code == 9753) return QString::fromUtf8("Добавлен WINS-сервер");
    if (code == 9801) return QString::fromUtf8("Вызов безопасного обновления требует запрос на обновление для продолжения работы");
    if (code == 9851) return QString::fromUtf8("Сетевой протокол TCP/IP не установлен");
    if (code == 9852) return QString::fromUtf8("Для локальной системы не настроено ни одного DNS-сервера");
    if (code == 9901) return QString::fromUtf8("Указанный раздел каталога не существует");
    if (code == 9902) return QString::fromUtf8("Указанный раздел каталога уже существует");
    if (code == 9903) return QString::fromUtf8("DNS-сервер не зарегистрирован в указанном разделе каталога");
    if (code == 9904) return QString::fromUtf8("DNS-сервер уже зарегистрирован в указанном разделе каталога");
    if (code == 9905) return QString::fromUtf8("Этот раздел каталога в данный момент недоступен. Подождите несколько минут и повторите попытку");
    if (code == 9906) return QString::fromUtf8("Ошибка при выполнении операции для раздела приложений каталога. Контроллер домена, исполняющий роль хозяина именования в домене, не работает, не способен обслужить этот запрос, или работает под управлением системы, отличной от Windows Server 2003");
    if (code == 10004) return QString::fromUtf8("Операция блокирования прервана вызовом WSACancelBlockingCall");
    if (code == 10009) return QString::fromUtf8("Предоставленный дескриптор файла неверен");
    if (code == 10013) return QString::fromUtf8("Сделана попытка доступа к сокету методом, запрещенным правами доступа");
    if (code == 10014) return QString::fromUtf8("Система обнаружила недопустимый указатель адреса при попытке использовать в вызове аргумент указателя");
    if (code == 10022) return QString::fromUtf8("Получен недопустимый аргумент");
    if (code == 10024) return QString::fromUtf8("Открыто слишком много сокетов");
    if (code == 10035) return QString::fromUtf8("Операция на незаблокированном сокете не может быть завершена немедленно");
    if (code == 10036) return QString::fromUtf8("Сейчас выполняется операция блокировки");
    if (code == 10037) return QString::fromUtf8("На незаблокированном сокете сделана попытка выполнить операцию при наличии другой выполняемой операции");
    if (code == 10038) return QString::fromUtf8("Сделана попытка выполнить операцию на объекте, не являющемся сокетом");
    if (code == 10039) return QString::fromUtf8("В операции на сокете пропущен обязательный адрес");
    if (code == 10040) return QString::fromUtf8("Сообщение, отправленное на сокет датаграмм, было больше, чем буфер внутренних сообщений или был превышен иной сетевой параметр. Также возможно, что буфер для принятия сообщения был меньше, чем размер сообщения");
    if (code == 10041) return QString::fromUtf8("Протокол, указанный в вызове функции сокета, не поддерживает такую семантику для требуемого типа сокета");
    if (code == 10042) return QString::fromUtf8("Для вызова getsockopt или setsockopt был указан неизвестный, недопустимый или неподдерживаемый параметр или уровень");
    if (code == 10043) return QString::fromUtf8("Требуемый протокол не настроен в данной системе, или не существует его реализации");
    if (code == 10044) return QString::fromUtf8("Поддержка указанного типа сокетов в этом семействе адресов отсутствует");
    if (code == 10045) return QString::fromUtf8("Предпринятая операция не поддерживается для выбранного типа объекта");
    if (code == 10046) return QString::fromUtf8("Данное семейство протоколов не настроено в системе, или оно не реализовано");
    if (code == 10047) return QString::fromUtf8("Адрес несовместим с выбранным протоколом");
    if (code == 10048) return QString::fromUtf8("Обычно разрешается только одно использование адреса сокета (протокол/сетевой адрес/порт)");
    if (code == 10049) return QString::fromUtf8("Требуемый адрес для своего контекста неверен");
    if (code == 10050) return QString::fromUtf8("Операция на сокете обнаружила отключение сети");
    if (code == 10051) return QString::fromUtf8("Сделана попытка выполнить операцию на сокете при отключенной сети");
    if (code == 10052) return QString::fromUtf8("Подключение было разорвано из-за ошибки во время выполнения операции");
    if (code == 10053) return QString::fromUtf8("Программа на вашем хост-компьютере разорвала установленное подключение");
    if (code == 10054) return QString::fromUtf8("Удаленный хост принудительно разорвал существующее подключение");
    if (code == 10055) return QString::fromUtf8("Невозможно выполнить операцию на сокете, т.к. буфер слишком мал или очередь переполнена");
    if (code == 10056) return QString::fromUtf8("Сделан запрос на подключение для уже подключенного сокета");
    if (code == 10057) return QString::fromUtf8("Запрос на отправку или получение данных  (when sending on a datagram socket using a sendto call) no address was supplied");
    if (code == 10058) return QString::fromUtf8("Запрос на отправку или получение данных был запрещен, т.к. сокет уже отключен в данном направлении на основании прежней запроса на его отключение");
    if (code == 10059) return QString::fromUtf8("Слишком много ссылок на некоторый ключевой объект");
    if (code == 10060) return QString::fromUtf8("Попытка установить соединение была безуспешной, т.к. от другого компьютера за требуемое время не получен нужный отклик, или было разорвано уже установленное соединение из-за неверного отклика уже подключенного компьютера");
    if (code == 10061) return QString::fromUtf8("Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение");
    if (code == 10062) return QString::fromUtf8("Не удается преобразовать имя");
    if (code == 10063) return QString::fromUtf8("Компонент имени или все имя слишком длинно");
    if (code == 10064) return QString::fromUtf8("Произошла ошибка операции на сокете, т.к. конечный хост выключен");
    if (code == 10065) return QString::fromUtf8("Сделана попытка выполнить операцию на сокете для недоступного хоста");
    if (code == 10066) return QString::fromUtf8("Нельзя удалить пустой каталог");
    if (code == 10067) return QString::fromUtf8("Реализация Windows Sockets может иметь ограничения на количество одновременно выполняющихся приложений");
    if (code == 10068) return QString::fromUtf8("Квота исчерпана");
    if (code == 10069) return QString::fromUtf8("Дисковая квота исчерпана");
    if (code == 10070) return QString::fromUtf8("Ссылка дескриптора файла более недоступна");
    if (code == 10071) return QString::fromUtf8("Элемент локально недоступен");
    if (code == 10091) return QString::fromUtf8("WSAStartup не может выполняться в данное время, т.к. недоступна основная система, используемая для работы сетевых служб ");
    if (code == 10092) return QString::fromUtf8("Указанная версия Windows Sockets не поддерживается");
    if (code == 10093) return QString::fromUtf8("Или приложение не вызвало WSAStartup, или произошла ошибка в WSAStartup");
    if (code == 10101) return QString::fromUtf8("Возвращено WSARecv или WSARecvFrom, чтобы показать - удаленная сторона инициировала правильную последовательность отключения");
    if (code == 10102) return QString::fromUtf8("WSALookupServiceNext не может возвратить каких-либо дополнительных результатов");
    if (code == 10103) return QString::fromUtf8("Был сделан вызов WSALookupServiceEnd, когда этот вызов еще обрабатывался. Обрабатываемый вызов был прерван");
    if (code == 10104) return QString::fromUtf8("Недопустимая таблица вызова процедуры");
    if (code == 10105) return QString::fromUtf8("Недопустимый поставщик услуг");
    if (code == 10106) return QString::fromUtf8("Не удается загрузить или инициализировать нужного поставщика услуг");
    if (code == 10107) return QString::fromUtf8("Произошла ошибка системного вызова");
    if (code == 10108) return QString::fromUtf8("Неизвестная служба. Эта служба отсутствует в указанном пространстве имен");
    if (code == 10109) return QString::fromUtf8("Указанный класс не найден");
    if (code == 10110) return QString::fromUtf8("WSALookupServiceNext не может возвратить каких-либо дополнительных результатов");
    if (code == 10111) return QString::fromUtf8("Был сделан вызов WSALookupServiceEnd, когда этот вызов еще обрабатывался. Обрабатываемый вызов был прерван");
    if (code == 10112) return QString::fromUtf8("Произошла ошибка запроса к базе данных, т.к. запрос был активно отвергнут");
    if (code == 11001) return QString::fromUtf8("Этот хост неизвестен");
    if (code == 11002) return QString::fromUtf8("Обычно - это временная ошибка, возникающая во время разрешения имени узла, и означающая, что локальный сервер не получил ответа от полномочного сервера");
    if (code == 11003) return QString::fromUtf8("При просмотре базы данных произошла неисправимая ошибка");
    if (code == 11004) return QString::fromUtf8("Запрошенное имя верно, но данные запрошенного типа не найдены");
    if (code == 11005) return QString::fromUtf8("Получен по меньшей мере один резерв");
    if (code == 11006) return QString::fromUtf8("Получен по меньшей мере один путь");
    if (code == 11007) return QString::fromUtf8("Отправители отсутствуют");
    if (code == 11008) return QString::fromUtf8("Получатели отсутствуют");
    if (code == 11009) return QString::fromUtf8("Резерв подтвержден");
    if (code == 11010) return QString::fromUtf8("Произошла ошибка из-за недостатка ресурсов");
    if (code == 11011) return QString::fromUtf8("Отвергнуто по административным причинам - неправильные учетные данные");
    if (code == 11012) return QString::fromUtf8("Неизвестный или вызывающий конфликты стиль");
    if (code == 11013) return QString::fromUtf8("Обнаружена проблема общего типа с буфером filterspec или providerspecific");
    if (code == 11014) return QString::fromUtf8("Обнаружена проблема с частью \"flowspec\"");
    if (code == 11015) return QString::fromUtf8("Общая ошибка QOS");
    if (code == 11016) return QString::fromUtf8("В спецификаторах потока найден недопустимый или нераспознанный тип службы");
    if (code == 11017) return QString::fromUtf8("Недопустимый или нераспознанный спецификатор потока был найден в структуре QOS");
    if (code == 11018) return QString::fromUtf8("Недопустимый буфер QOS, определяемый поставщиком");
    if (code == 11019) return QString::fromUtf8("Использован недопустимый стиль фильтра QOS");
    if (code == 11020) return QString::fromUtf8("Использован недопустимый стиль фильтра QOS");
    if (code == 11021) return QString::fromUtf8("В FLOWDESCRIPTOR был задан неверный номер QOS FILTERSPEC");
    if (code == 11022) return QString::fromUtf8("В определяемом поставщиком буфере  QOS задан объект с неверным полем ObjectLength");
    if (code == 11023) return QString::fromUtf8("В структуре QOS заданы неверные номера дескрипторов потока");
    if (code == 11024) return QString::fromUtf8("В буфере QOS, задаваемом поставщиком, найден нераспознанный объект");
    if (code == 11025) return QString::fromUtf8("В буфере QOS, задаваемом поставщиком, найден объект с недопустимой политикой");
    if (code == 11026) return QString::fromUtf8("В списке дескрипторов потока обнаружен недопустимый дескриптор потока QOS");
    if (code == 11027) return QString::fromUtf8("Недопустимый или нераспознанный спецификатор потока обнаружен в буфере QOS, определяемом поставщиком");
    if (code == 11028) return QString::fromUtf8("Недопустимый FILTERSPEC обнаружен в буфере QOS, определяемом поставщиком");
    if (code == 11029) return QString::fromUtf8("Недопустимый объект режима  изменения формы обнаружен в буфере QOS, определяемом поставщиком");
    if (code == 11030) return QString::fromUtf8("Недопустимый объект формирования  уровня обнаружен в буфере QOS, определяемом поставщиком");
    if (code == 11031) return QString::fromUtf8("Зарезервированный элемент политики обнаружен в буфере QOS, определяемом поставщиком");
    if (code == 11032) return QString::fromUtf8("Этот узел не находится в числе безопасных");
    if (code == 11033) return QString::fromUtf8("Не удалось добавить политику IPSec, основывающуюся на имени");
    if (code == 13000) return QString::fromUtf8("Указанная политика быстрого режима уже существует");
    if (code == 13001) return QString::fromUtf8("Указанная политика быстрого режима не найдена");
    if (code == 13002) return QString::fromUtf8("Указанная политика быстрого режима сейчас используется");
    if (code == 13003) return QString::fromUtf8("Указанная политика основного режима уже существует");
    if (code == 13004) return QString::fromUtf8("Указанная политика основного режима не найдена");
    if (code == 13005) return QString::fromUtf8("Указанная политика основного режима сейчас используется");
    if (code == 13006) return QString::fromUtf8("Указанный фильтр основного режима уже существует");
    if (code == 13007) return QString::fromUtf8("Указанный фильтр основного режима не найден");
    if (code == 13008) return QString::fromUtf8("Указанный фильтр транспортного режима уже существует");
    if (code == 13009) return QString::fromUtf8("Указанный фильтр транспортного режима не существует");
    if (code == 13010) return QString::fromUtf8("Указанный список проверки подлинности для основного режима существует");
    if (code == 13011) return QString::fromUtf8("Указанный список проверки подлинности основного режима не найден");
    if (code == 13012) return QString::fromUtf8("Указанный список проверки подлинности основного режима сейчас используется");
    if (code == 13013) return QString::fromUtf8("Указанная используемая по умолчанию политика основного режима не найдена");
    if (code == 13014) return QString::fromUtf8("Указанный используемый по умолчанию список проверки подлинности основного режима не найден");
    if (code == 13015) return QString::fromUtf8("Указанная используемая по умолчанию политика быстрого режима не найдена");
    if (code == 13016) return QString::fromUtf8("Указанный фильтр туннельного режима уже существует");
    if (code == 13017) return QString::fromUtf8("Указанный фильтр туннельного режима не найден");
    if (code == 13018) return QString::fromUtf8("Идет процесс удаления фильтра основного режима");
    if (code == 13019) return QString::fromUtf8("Идет процесс удаления транспортного фильтра");
    if (code == 13020) return QString::fromUtf8("Идет процесс удаления туннельного фильтра");
    if (code == 13021) return QString::fromUtf8("Идет процесс удаления политики основного режима");
    if (code == 13022) return QString::fromUtf8("Идет процесс удаления пакета проверки подлинности основного режима");
    if (code == 13023) return QString::fromUtf8("Идет процесс удаления политики быстрого режима");
    if (code == 13024) return QString::fromUtf8("Политика основного режима успешно добавлена, но некоторые запрошенные возможности не поддерживаются");
    if (code == 13025) return QString::fromUtf8("Политика быстрого режима успешно добавлена, но некоторые запрошенные возможности не поддерживаются");
    if (code == 13800) return QString::fromUtf8("ERROR_IPSEC_IKE_NEG_STATUS_BEGIN");
    if (code == 13801) return QString::fromUtf8("Неприемлемые учетные данные проверки подлинности IKE");
    if (code == 13802) return QString::fromUtf8("Неприемлемые атрибуты IKE-безопасности");
    if (code == 13803) return QString::fromUtf8("Выполняется согласование IKE");
    if (code == 13804) return QString::fromUtf8("Ошибка обработки");
    if (code == 13805) return QString::fromUtf8("Таймаут согласования");
    if (code == 13806) return QString::fromUtf8("IKE не удалось найти действительный сертификат компьютера. Обратитесь к администратору безопасности сети для установки действительного сертификата в соответствующее хранилище сертификатов");
    if (code == 13807) return QString::fromUtf8("IKE SA удалено другим узлом до того, как закончено установление");
    if (code == 13808) return QString::fromUtf8("IKE SA удалено до того, как закончено установление");
    if (code == 13809) return QString::fromUtf8("Запрос на согласование слишком долго находился в очереди");
    if (code == 13810) return QString::fromUtf8("Запрос на согласование слишком долго находился в очереди");
    if (code == 13811) return QString::fromUtf8("Запрос на согласование слишком долго находился в очереди");
    if (code == 13812) return QString::fromUtf8("Запрос на согласование слишком долго находился в очереди");
    if (code == 13813) return QString::fromUtf8("Нет отклика");
    if (code == 13814) return QString::fromUtf8("Согласование выполнялось слишком долго");
    if (code == 13815) return QString::fromUtf8("Согласование выполнялось слишком долго");
    if (code == 13816) return QString::fromUtf8("Неопознанная ошибка");
    if (code == 13817) return QString::fromUtf8("Ошибка проверки отзыва сертификата");
    if (code == 13818) return QString::fromUtf8("Недопустимое использование ключа сертификата");
    if (code == 13819) return QString::fromUtf8("Недопустимый тип сертификата");
    if (code == 13820) return QString::fromUtf8("Не удалось выполнить IKE-согласование, поскольку используемый сертификат компьютера не имеет закрытого ключа. IPsec-сертификаты должны иметь закрытый ключ. Обратитесь к администратору безопасности сети для замены текущего сертификата на сертификат с закрытым ключом");
    if (code == 13821) return QString::fromUtf8("Зафиксированы случаи одновременного повторного создания ключей");
    if (code == 13822) return QString::fromUtf8("Ошибка обработки Диффи-Хелмана");
    if (code == 13823) return QString::fromUtf8("Неизвестно как обработать критические полезные данные");
    if (code == 13824) return QString::fromUtf8("Недопустимый заголовок");
    if (code == 13825) return QString::fromUtf8("Нет настроенной политики");
    if (code == 13826) return QString::fromUtf8("Ошибка при проверке подписи файла");
    if (code == 13827) return QString::fromUtf8("Проверка подлинности Kerberos не выполнена");
    if (code == 13828) return QString::fromUtf8("Сертификат точки не имеет открытого ключа");
    if (code == 13829) return QString::fromUtf8("Ошибка обработки ошибки полезных данных");
    if (code == 13830) return QString::fromUtf8("Ошибка обработки полезных данных SA");
    if (code == 13831) return QString::fromUtf8("Ошибка обработки полезных данных Proposal");
    if (code == 13832) return QString::fromUtf8("Ошибка обработки полезных данных Transform");
    if (code == 13833) return QString::fromUtf8("Ошибка обработки полезных данных KE");
    if (code == 13834) return QString::fromUtf8("Ошибка обработки полезных данных ID");
    if (code == 13835) return QString::fromUtf8("Ошибка обработки полезных данных сертификата");
    if (code == 13836) return QString::fromUtf8("Ошибка обработки полезных данных запроса сертификата");
    if (code == 13837) return QString::fromUtf8("Ошибка обработки полезных данных хеша");
    if (code == 13838) return QString::fromUtf8("Ошибка обработки полезных данных подписи");
    if (code == 13839) return QString::fromUtf8("Ошибка обработки полезных данных Nonce");
    if (code == 13840) return QString::fromUtf8("Ошибка обработки полезных данных извещения");
    if (code == 13841) return QString::fromUtf8("Ошибка обработки полезных данных удаления");
    if (code == 13842) return QString::fromUtf8("Ошибка обработки полезных данных VendorId");
    if (code == 13843) return QString::fromUtf8("Получены недопустимые полезные данные");
    if (code == 13844) return QString::fromUtf8("Загружено программное SA");
    if (code == 13845) return QString::fromUtf8("Разорвано программное SA");
    if (code == 13846) return QString::fromUtf8("Получен недопустимый файл \"cookie\"");
    if (code == 13847) return QString::fromUtf8("Узлу не удалось отправить действительный сертификат компьютера");
    if (code == 13848) return QString::fromUtf8("Ошибка проверки отзыва сертификата точки");
    if (code == 13849) return QString::fromUtf8("Новая политика сделала недопустимыми SA, сформированные при старой политике");
    if (code == 13850) return QString::fromUtf8("Отсутствует политика IKE для основного режима");
    if (code == 13851) return QString::fromUtf8("Не удалось включить привилегии TCB");
    if (code == 13852) return QString::fromUtf8("Не удалось загрузить SECURITY.DLL");
    if (code == 13853) return QString::fromUtf8("Не удалось получить адрес доставки таблицы функций безопасности от SSPI");
    if (code == 13854) return QString::fromUtf8("Не удалось запросить пакет безопасности Kerberos для получения максимального размера токена");
    if (code == 13855) return QString::fromUtf8("Не удалось получить учетные данные сервера Kerberos для службы ISAKMP/ERROR_IPSEC_IKE. Проверка Kerberos работать не будет. Наиболее вероятная причина - отсутствие членства в домене. Если компьютер входит в рабочую группу, это нормально");
    if (code == 13856) return QString::fromUtf8("Не удалось определить имя SSPI для службы ISAKMP/ERROR_IPSEC_IKE (QueryCredentialsAttributes)");
    if (code == 13857) return QString::fromUtf8("Не удалось получить новый SPI для входящего SA от драйвера IPSec. Вероятная причина: драйвер не имеет подходящего фильтра. Проверьте вашу политику и фильтры в ней");
    if (code == 13858) return QString::fromUtf8("Недопустимый фильтр");
    if (code == 13859) return QString::fromUtf8("Ошибка выделения памяти");
    if (code == 13860) return QString::fromUtf8("Не удалось добавить сопоставление безопасности к драйверу IPSec. Вероятная причина: согласование IKE потребовало слишком длительного промежутка времени. Если проблема повторяется, уменьшите нагрузку на этот компьютер");
    if (code == 13861) return QString::fromUtf8("Недопустимая политика");
    if (code == 13862) return QString::fromUtf8("Недопустимый DOI");
    if (code == 13863) return QString::fromUtf8("Недопустимая ситуация");
    if (code == 13864) return QString::fromUtf8("Ошибка обработки Диффи-Хелмана");
    if (code == 13865) return QString::fromUtf8("Недопустимая группа Диффи-Хелмана");
    if (code == 13866) return QString::fromUtf8("Ошибка при шифровании полезных данных");
    if (code == 13867) return QString::fromUtf8("Ошибка при расшифровке полезных данных");
    if (code == 13868) return QString::fromUtf8("Ошибка сопоставления групповой политики");
    if (code == 13869) return QString::fromUtf8("Не поддерживаемый код (ID)");
    if (code == 13870) return QString::fromUtf8("Ошибка при проверке хеша");
    if (code == 13871) return QString::fromUtf8("Неправильный хеш-алгоритм");
    if (code == 13872) return QString::fromUtf8("Неправильный размер хеша");
    if (code == 13873) return QString::fromUtf8("Неправильный алгоритм шифрования");
    if (code == 13874) return QString::fromUtf8("Недопустимый алгоритм проверки подлинности");
    if (code == 13875) return QString::fromUtf8("Неправильная подпись сертификата");
    if (code == 13876) return QString::fromUtf8("Ошибка загрузки");
    if (code == 13877) return QString::fromUtf8("Удалено через RPC-вызов");
    if (code == 13878) return QString::fromUtf8("Для выполнения повторной инициализации создано временное состояние. Это не сбой");
    if (code == 13879) return QString::fromUtf8("Полученное время жизни меньше минимально разрешенного в Windows 2000. Исправьте политику на узле");
    if (code == 13880) return QString::fromUtf8("Получателю не удается обработать указанную в заголовке версию протокола IKE");
    if (code == 13881) return QString::fromUtf8("Длина ключа в сертификате слишком мала для настроенных требований безопасности");
    if (code == 13882) return QString::fromUtf8("Превышено предельное число установленных для узла MM SA");
    if (code == 13883) return QString::fromUtf8("IKE получена политика, отключающая согласование");
    if (code == 13884) return QString::fromUtf8("Достигнуто максимальное ограничение быстрого режима для основного режима. Будет запущен новый основной режим");
    if (code == 13885) return QString::fromUtf8("Срок действия SA основного режима истек либо другой участник соединения отправил удаление основного режима");
    if (code == 13886) return QString::fromUtf8("Вероятно, SA основного режима недопустимо, поскольку другой участник соединения не отвечает");
    if (code == 13887) return QString::fromUtf8("Сертификат не ограничивает доверенный корень в политике IPsec");
    if (code == 13888) return QString::fromUtf8("Получен непредусмотренный идентификатор сообщения");
    if (code == 13889) return QString::fromUtf8("Получены недопустимые предложения проверки подлинности");
    if (code == 13890) return QString::fromUtf8("Инициатору отправлено уведомление об атаке типа \"отказ в обслуживании\" файлами \"cookie\"");
    if (code == 13891) return QString::fromUtf8("Завершение работы службы IKE");
    if (code == 13892) return QString::fromUtf8("Не удалось проверить привязку между адресом CGA и сертификатом");
    if (code == 13893) return QString::fromUtf8("Ошибка обработки полезных данных NatOA");
    if (code == 13894) return QString::fromUtf8("Параметры основного режима являются недопустимыми для данного быстрого режима");
    if (code == 13895) return QString::fromUtf8("SA быстрого режима прекращено драйвером IPsec");
    if (code == 13896) return QString::fromUtf8("Обнаружено слишком много динамически добавляемых фильтров IKEEXT");
    if (code == 13897) return QString::fromUtf8("ERROR_IPSEC_IKE_NEG_STATUS_END");
    if (code == 13898) return QString::fromUtf8("Повторная проверка подлинности при защите доступа к сети выполнена успешно; необходимо удалить туннель-заглушку NAP IKEv2");
    if (code == 13899) return QString::fromUtf8("Ошибка при назначении инициатору внутреннего IP-адреса в туннельном режиме");
    if (code == 13900) return QString::fromUtf8("Требуемая конфигурация полезных данных отсутствует");
    if (code == 13901) return QString::fromUtf8("Выполняется согласование, запущенное в соответствии с принципами безопасности инициатора подключения");
    if (code == 13902) return QString::fromUtf8("Сопоставление безопасности было удалено в результате проверки на совместную работу протоколов IKEv1 и AuthIP");
    if (code == 13903) return QString::fromUtf8("Входящий запрос сопоставления безопасности был сброшен из-за ограничения на количество обращений к IP-адресу узла");
    if (code == 13904) return QString::fromUtf8("Одноранговый узел не поддерживает MOBIKE");
    if (code == 13905) return QString::fromUtf8("Установление сопоставлений безопасности не авторизовано");
    if (code == 13906) return QString::fromUtf8("Установление сопоставления безопасности не авторизовано из-за отсутствия достаточно надежных учетных данных на основе PKINIT");
    if (code == 13907) return QString::fromUtf8("Установление сопоставлений безопасности не авторизовано. Возможно, потребуется ввести обновленные или другие учетные данные, например, с помощью смарт-карты");
    if (code == 13908) return QString::fromUtf8("Установление сопоставлений безопасности не авторизовано, поскольку не обнаружены достаточно надежные учетные данные на основе протокола PKINIT. Это может быть связано с ошибкой сопоставления сертификата и учетной записи в сопоставлениях безопасности");
    if (code == 13909) return QString::fromUtf8("ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END");
    if (code == 13910) return QString::fromUtf8("Индекс параметра безопасности в пакете не соответствует действительному IPsec SA");
    if (code == 13911) return QString::fromUtf8("Пакет был получен на сопоставление безопасности (SA) IPsec, срок существования которого истек");
    if (code == 13912) return QString::fromUtf8("Пакет был получен сопоставлением безопасности IPsec, не соответствующим характеристикам пакета");
    if (code == 13913) return QString::fromUtf8("Ошибка при повторной проверке порядкового номера пакета");
    if (code == 13914) return QString::fromUtf8("Недопустимый заголовок или замыкатель IPsec в пакете");
    if (code == 13915) return QString::fromUtf8("Ошибка при проверке целостности IPsec");
    if (code == 13916) return QString::fromUtf8("IPsec удалил пакет с открытым текстом");
    if (code == 13917) return QString::fromUtf8("IPsec отклонил входящий ESP-пакет в режиме проверки подлинности брандмауэра.  Это отклонение не представляет опасности");
    if (code == 13918) return QString::fromUtf8("IPsec отклонил пакет по ограничению скорости из-за атаки типа \"отказ в обслуживании\"");
    if (code == 13925) return QString::fromUtf8("Система защиты IPsec от атак типа \"отказ в обслуживании\" обнаружила подходящее правило явной блокировки");
    if (code == 13926) return QString::fromUtf8("Система защиты IPsec от атак типа \"отказ в обслуживании\" получила запрещенный многоадресный пакет IPsec");
    if (code == 13927) return QString::fromUtf8("Система защиты IPsec от атак типа \"отказ в обслуживании\" получила пакет неверного формата");
    if (code == 13928) return QString::fromUtf8("Системе защиты IPsec от атак типа \"отказ в обслуживании\" не удалось найти состояние");
    if (code == 13929) return QString::fromUtf8("Системе защиты IPsec от атак типа \"отказ в обслуживании\" не удалось создать состояние, поскольку уже достигнуто максимальное число записей, разрешенное политикой");
    if (code == 13930) return QString::fromUtf8("Система защиты IPsec от атак типа \"отказ в обслуживании\" получила запрещенный политикой пакет согласования IPsec для модуля ключей");
    if (code == 13931) return QString::fromUtf8("Система защиты IPsec от атак типа \"отказ в обслуживании\" не включена");
    if (code == 13932) return QString::fromUtf8("Системе защиты IPsec от атак типа \"отказ в обслуживании\" не удалось создать очередь для ограничения числа обращений к внутреннему IP-адресу, поскольку достигнуто максимальное число очередей, разрешенное политикой");
    if (code == 14000) return QString::fromUtf8("Указанный раздел не существует в данном контексте активации");
    if (code == 14001) return QString::fromUtf8("Не удалось запустить приложение, поскольку его параллельная конфигурация неправильна. Дополнительные сведения содержатся в журнале событий приложений или используйте программу командной строки sxstrace.exe для получения дополнительных сведений");
    if (code == 14002) return QString::fromUtf8("Недопустимый формат привязки данных приложения");
    if (code == 14003) return QString::fromUtf8("Указанная сборка не установлена в системе");
    if (code == 14004) return QString::fromUtf8("Файл манифеста не начинается с необходимого тега и информации форматирования");
    if (code == 14005) return QString::fromUtf8("Файл манифеста содержит одну или несколько синтаксических ошибок");
    if (code == 14006) return QString::fromUtf8("Приложение попыталось активировать отключенный контекст активации");
    if (code == 14007) return QString::fromUtf8("Указанный ключ соответствия не обнаружен ни в одном из активных контекстов активации");
    if (code == 14008) return QString::fromUtf8("Версия компонента, требуемая для приложения, конфликтует с другой, уже активной версией");
    if (code == 14009) return QString::fromUtf8("Тип указанного раздела контекста активации не соответствует использованному запросу API");
    if (code == 14010) return QString::fromUtf8("Недостаток системных ресурсов потребовал отключения изолированной активации для текущего потока исполнения");
    if (code == 14011) return QString::fromUtf8("Ошибка попытки установки контекста активации по умолчанию, поскольку контекст активации по умолчанию уже установлен");
    if (code == 14012) return QString::fromUtf8("Указанный идентификатор группы кодировок не распознан");
    if (code == 14013) return QString::fromUtf8("Указанная кодировка не распознана");
    if (code == 14014) return QString::fromUtf8("Манифест содержит ссылку на недопустимый URI");
    if (code == 14015) return QString::fromUtf8("Манифест приложения содержит ссылку на зависимую сборку, которая не установлена");
    if (code == 14016) return QString::fromUtf8("Манифест сборки, используемой приложением, ссылается на зависимую сборку, которая не установлена");
    if (code == 14017) return QString::fromUtf8("Манифест содержит атрибут для недопустимого удостоверения сборки");
    if (code == 14018) return QString::fromUtf8("В манифесте отсутствует необходимая спецификация пространства имен по умолчанию для элемента сборки");
    if (code == 14019) return QString::fromUtf8("Манифест содержит спецификацию пространства имен по умолчанию для элемента сборки, однако его значение отличается от \"urn:schemas-microsoft-com:asm.v1\"");
    if (code == 14020) return QString::fromUtf8("Частный манифест пересек неподдерживаемую точку повторной обработки");
    if (code == 14021) return QString::fromUtf8("Два или более компонентов, на которые непосредственно или не непосредственно ссылается манифест приложения, содержат файлы с одинаковыми именами");
    if (code == 14022) return QString::fromUtf8("Два или более компонентов, на которые непосредственно или не непосредственно ссылается манифест приложения, содержат классы окон с одинаковыми именами");
    if (code == 14023) return QString::fromUtf8("Два или более компонентов, на которые непосредственно или не непосредственно ссылается манифест приложения, имеют одинаковые идентификаторы CLSID для COM сервера");
    if (code == 14024) return QString::fromUtf8("Два или более компонентов, на которые непосредственно или не непосредственно ссылается манифест приложения, имеют прокси для одинаковых идентификаторов IID интерфейсов COM");
    if (code == 14025) return QString::fromUtf8("Два или более компонентов, на которые непосредственно или не непосредственно ссылается манифест приложения, имеют одинаковые идентификаторы TLBID для библиотеки типов COM");
    if (code == 14026) return QString::fromUtf8("Два или более компонентов, на которые непосредственно или не непосредственно ссылается манифест приложения, имеют одинаковые идентификаторы ProgID COM");
    if (code == 14027) return QString::fromUtf8("Два или более компонентов, на которые непосредственно или не непосредственно ссылается манифест приложения, имеют разные версии одинакового компонента, что недопустимо");
    if (code == 14028) return QString::fromUtf8("Файл компонента не соответствует информации проверки, указанной в манифесте компонента");
    if (code == 14029) return QString::fromUtf8("Манифест политики содержит одну или более синтаксических ошибок");
    if (code == 14030) return QString::fromUtf8("Ошибка обработки манифеста: Ожидалась строковое значение, однако не было обнаружено открывающей кавычки");
    if (code == 14031) return QString::fromUtf8("Ошибка обработки манифеста: В комментарии использован недопустимый синтаксис");
    if (code == 14032) return QString::fromUtf8("Ошибка обработки манифеста: Имя начинается с недопустимого символа");
    if (code == 14033) return QString::fromUtf8("Ошибка обработки манифеста: Имя содержит недопустимый символ");
    if (code == 14034) return QString::fromUtf8("Ошибка обработки манифеста: Строковое значение содержит недопустимый символ");
    if (code == 14035) return QString::fromUtf8("Ошибка обработки манифеста: Недопустимый синтаксис в декларации XML");
    if (code == 14036) return QString::fromUtf8("Ошибка обработки манифеста: В тексте содержится недопустимый символ");
    if (code == 14037) return QString::fromUtf8("Ошибка обработки манифеста: Отсутствует требуемый пробел");
    if (code == 14038) return QString::fromUtf8("Ошибка обработки манифеста: Ожидался символ '>'");
    if (code == 14039) return QString::fromUtf8("Ошибка обработки манифеста: Ожидалась запятая");
    if (code == 14040) return QString::fromUtf8("Ошибка обработки манифеста: Несогласованные круглые скобки");
    if (code == 14041) return QString::fromUtf8("Ошибка обработки манифеста: Внутренняя ошибка");
    if (code == 14042) return QString::fromUtf8("Ошибка обработки манифеста: Пробелы в данном месте не допускаются");
    if (code == 14043) return QString::fromUtf8("Ошибка обработки манифеста: Достигнут конец файла в недопустимом состоянии текущей кодировки");
    if (code == 14044) return QString::fromUtf8("Ошибка обработки манифеста: Утеряна круглая скобка");
    if (code == 14045) return QString::fromUtf8("Ошибка обработки манифеста: Утерян символ одиночной или двойной кавычки (\' или \")");
    if (code == 14046) return QString::fromUtf8("Ошибка обработки манифеста: В имени не допускаются несколько двойных кавычек");
    if (code == 14047) return QString::fromUtf8("Ошибка обработки манифеста: Недопустимый символ для десятичной цифры");
    if (code == 14048) return QString::fromUtf8("Ошибка обработки манифеста: недопустимый знак для шестнадцатеричной цифры");
    if (code == 14049) return QString::fromUtf8("Ошибка обработки манифеста: Недопустимое значение символа UNICODE character для данной платформы");
    if (code == 14050) return QString::fromUtf8("Ошибка обработки манифеста: Ожидался пробел или '?'");
    if (code == 14051) return QString::fromUtf8("Ошибка обработки манифеста: Не ожидался конец тега в данном месте");
    if (code == 14053) return QString::fromUtf8("Ошибка обработки манифеста: Повторяющийся атрибут");
    if (code == 14054) return QString::fromUtf8("Ошибка обработки манифеста: В XML документе допускается только вышележащий элемент");
    if (code == 14055) return QString::fromUtf8("Ошибка обработки манифеста: Ошибка на верхнем уровне документа");
    if (code == 14056) return QString::fromUtf8("Ошибка обработки манифеста: Недопустимое описание XML");
    if (code == 14057) return QString::fromUtf8("Ошибка обработки манифеста: XML документ должен содержать элемент верхнего уровня");
    if (code == 14058) return QString::fromUtf8("Ошибка обработки манифеста: Неожиданное окончание файла");
    if (code == 14059) return QString::fromUtf8("Ошибка обработки манифеста: Описание параметров не может быть использовано в описании разметки во внутреннем наборе");
    if (code == 14060) return QString::fromUtf8("Ошибка обработки манифеста: Элемент не закрыт");
    if (code == 14061) return QString::fromUtf8("Ошибка обработки манифеста: Конечный элемент не содержит символа '>'");
    if (code == 14062) return QString::fromUtf8("Ошибка обработки манифеста: Символьная строка не закрыта");
    if (code == 14063) return QString::fromUtf8("Ошибка обработки манифеста: Комментарий не закрыт");
    if (code == 14064) return QString::fromUtf8("Ошибка обработки манифеста: Описание не закрыто");
    if (code == 14065) return QString::fromUtf8("Ошибка обработки манифеста: Раздел CDATA не закрыт");
    if (code == 14066) return QString::fromUtf8("Ошибка обработки манифеста: Префикс пространства имен не может начинаться с зарезервированной строки \"xml\"");
    if (code == 14067) return QString::fromUtf8("Ошибка обработки манифеста: Система не поддерживает указанную кодировку");
    if (code == 14068) return QString::fromUtf8("Ошибка обработки манифеста: Переключение с текущей кодировки на указанную не поддерживается");
    if (code == 14069) return QString::fromUtf8("Ошибка обработки манифеста: Имя 'xml' зарезервировано и должно начинаться с маленькой буквы");
    if (code == 14070) return QString::fromUtf8("Ошибка обработки манифеста: Изолированный атрибут должен иметь значение 'yes' или 'no'");
    if (code == 14071) return QString::fromUtf8("Ошибка обработки манифеста: Изолированный атрибут не может быть использован во внешних сущностях");
    if (code == 14072) return QString::fromUtf8("Ошибка обработки манифеста: Недопустимый номер версии");
    if (code == 14073) return QString::fromUtf8("Ошибка обработки манифеста: Утерян знак равенства между атрибутом и его значением");
    if (code == 14074) return QString::fromUtf8("Ошибка защиты сборки. Не удается восстановить указанную сборку");
    if (code == 14075) return QString::fromUtf8("Ошибка защиты сборки. Открытый ключ для сборки слишком короткий");
    if (code == 14076) return QString::fromUtf8("Ошибка защиты сборки. Недопустимый каталог для сборки, или он не соответствует манифесту сборки");
    if (code == 14077) return QString::fromUtf8("HRESULT не может быть транслирована в соответствующий код ошибки Win32");
    if (code == 14078) return QString::fromUtf8("Ошибка защиты сборки. Отсутствует каталог для сборки");
    if (code == 14079) return QString::fromUtf8("В указанном удостоверении сборки отсутствует один или несколько атрибутов, которые должны присутствовать в данном контексте");
    if (code == 14080) return QString::fromUtf8("Указанное удостоверение сборки содержит один или несколько атрибутов, имена которых содержат недопустимые для XML-имен символы");
    if (code == 14081) return QString::fromUtf8("Не найдена сборка, на которую имеется ссылка");
    if (code == 14082) return QString::fromUtf8("Стек активации контекста активации для выполняющегося процесса поврежден");
    if (code == 14083) return QString::fromUtf8("Метаданные изоляции приложения для этого процесса или потока повреждены");
    if (code == 14084) return QString::fromUtf8("Деактивируемый контекст активации не является последним активированным контекстом");
    if (code == 14085) return QString::fromUtf8("Деактивируемый контекст активации не является активным для данного потока исполнения");
    if (code == 14086) return QString::fromUtf8("Деактивируемый контекст активации уже деактивирован");
    if (code == 14087) return QString::fromUtf8("Компонент, использованный при изоляции, запросил завершение процесса");
    if (code == 14088) return QString::fromUtf8("Компонент режима ядра освобождает ссылку на контекст активации");
    if (code == 14089) return QString::fromUtf8("Не удалось сгенерировать контекст активации используемой по умолчанию системной сборки");
    if (code == 14090) return QString::fromUtf8("Значение атрибута в учетных данных за пределами допустимого диапазона");
    if (code == 14091) return QString::fromUtf8("Имя атрибута в учетных данных за пределами допустимого диапазона");
    if (code == 14092) return QString::fromUtf8("Учетные данные содержат два определения одного атрибута");
    if (code == 14093) return QString::fromUtf8("Строка учетных данных неверно записана. Это может быть обусловлено завершающей запятой, наличием трех и более неименованных атрибутов, отсутствием имени или значения атрибута");
    if (code == 14094) return QString::fromUtf8("Строка, хранящая локализованное заменяемое содержимое, сформирована неправильно. Либо за знаком доллара ($) следует не левая скобка или еще один знак доллара, либо правая скобка подстановки не обнаружена");
    if (code == 14095) return QString::fromUtf8("Токен открытого ключа не соответствует указанному открытому ключу");
    if (code == 14096) return QString::fromUtf8("Строка подстановки не имеет соответствия");
    if (code == 14097) return QString::fromUtf8("Необходимо заблокировать компонент перед выполнением запроса");
    if (code == 14098) return QString::fromUtf8("Хранилище компонентов повреждено");
    if (code == 14099) return QString::fromUtf8("Ошибка дополнительной программы установки в ходе настройки или обслуживания");
    if (code == 14100) return QString::fromUtf8("Кодировка в объявлении XML не соответствует кодировке, используемой в документе");
    if (code == 14101) return QString::fromUtf8("Учетные данные манифестов идентичны, однако их содержимое отличается");
    if (code == 14102) return QString::fromUtf8("Учетные данные компонента отличаются");
    if (code == 14103) return QString::fromUtf8("Сборка не является развертыванием");
    if (code == 14104) return QString::fromUtf8("Файл не является частью сборки");
    if (code == 14105) return QString::fromUtf8("Размер манифеста превышает максимально возможный");
    if (code == 14106) return QString::fromUtf8("Параметр не зарегистрирован");
    if (code == 14107) return QString::fromUtf8("Отсутствуют один или несколько обязательных членов транзакции");
    if (code == 14108) return QString::fromUtf8("Ошибка установщика примитива SMI в процессе установки или обслуживания");
    if (code == 14109) return QString::fromUtf8("Исполняемая групповая команда вернула результат, который указывает на ошибку");
    if (code == 14110) return QString::fromUtf8("В манифесте компонента отсутствуют сведения о проверке файла");
    if (code == 15000) return QString::fromUtf8("Указан неверный путь к каналу");
    if (code == 15001) return QString::fromUtf8("Запрос задан неверно");
    if (code == 15002) return QString::fromUtf8("Не удалось найти метаданные издателя в ресурсе");
    if (code == 15004) return QString::fromUtf8("Указано недопустимое имя издателя");
    if (code == 15005) return QString::fromUtf8("Данные события, измененные издателем, несовместимы с определением шаблона события в манифесте издателя");
    if (code == 15007) return QString::fromUtf8("Указанный канал не найден. Проверьте конфигурацию канала");
    if (code == 15008) return QString::fromUtf8("Указанный XML-текст неверно построен. Дополнительные сведения см. в файле расширенных сведений об ошибках");
    if (code == 15009) return QString::fromUtf8("Вызывающая программа пытается подписаться на прямой канал, что запрещено. События прямого канала направляются непосредственно в файл журнала и подписываться на них нельзя");
    if (code == 15010) return QString::fromUtf8("Ошибка конфигурации");
    if (code == 15011) return QString::fromUtf8("Результат запроса устарел или неверен. Это может быть обусловлено очисткой или проходом по журналу после формирования результата запроса. Пользователи должны обрабатывать этот код посредством разблокировки объекта результата запроса и повторного выполнения запроса");
    if (code == 15012) return QString::fromUtf8("Неверное положение результата запроса");
    if (code == 15013) return QString::fromUtf8("Зарегистрированный MSXML не поддерживает проверку данных");
    if (code == 15014) return QString::fromUtf8("После выражения может идти только изменение операции над диапазоном, если результатом его вычисления является набор узлов, и оно не является частью другого изменения операции над диапазоном");
    if (code == 15015) return QString::fromUtf8("Не удается выполнить шаговую операцию из условия, которое не представляет набор элементов");
    if (code == 15016) return QString::fromUtf8("Аргументы левой части в двоичных операторах должны быть атрибутами, узлами или переменными, а аргументы правой части должны быть константами");
    if (code == 15017) return QString::fromUtf8("Шаговая операция должна содержать либо проверку узла, либо (в случае предиката) алгебраическое выражение, по отношению к которому следует вести вычисления при проверке всех узлов из набора узлов, определенных предшествующим набором узлов");
    if (code == 15018) return QString::fromUtf8("Этот тип данных в настоящее время не поддерживается");
    if (code == 15020) return QString::fromUtf8("Этот оператор не поддерживается в данной реализации фильтра");
    if (code == 15021) return QString::fromUtf8("Обнаружен непредусмотренный токен");
    if (code == 15022) return QString::fromUtf8("Запрошенная операция не может быть выполнена для активированного прямого канала. Канал необходимо отключить перед выполнением запрошенной операции");
    if (code == 15025) return QString::fromUtf8("Ошибка при активации канала");
    if (code == 15026) return QString::fromUtf8("Слишком сложное выражение xpath. Упростите выражение или разделите его на два или большее число выражений");
    if (code == 15027) return QString::fromUtf8("ресурс сообщения существует, но сообщение не найдено в таблице строк и таблице сообщений");
    if (code == 15028) return QString::fromUtf8("Не удалось найти идентификатор требуемого сообщения");
    if (code == 15031) return QString::fromUtf8("Достигнуто максимальное число замен");
    if (code == 15033) return QString::fromUtf8("Отсутствует специальный ресурс языкового стандарта для нужного сообщения");
    if (code == 15034) return QString::fromUtf8("Ресурс слишком старый, чтобы быть совместимым");
    if (code == 15035) return QString::fromUtf8("Ресурс слишком новый, чтобы быть совместимым");
    if (code == 15037) return QString::fromUtf8("Издатель отключен, а его ресурс недоступен. Обычно это происходит в процессе удаления издателя или его обновления");
    if (code == 15038) return QString::fromUtf8("Попытка создать числовой тип, который выходит за пределы своего допустимого диапазона");
    if (code == 15080) return QString::fromUtf8("Ошибка активации подписки");
    if (code == 15081) return QString::fromUtf8("Журнал подписки отключен и не может быть использован для пересылки событий в него. Прежде чем активировать подписку, необходимо включить журнал");
    if (code == 15082) return QString::fromUtf8("При пересылке событий с локального компьютера на этот же компьютер запрос подписки не должен содержать целевой журнал подписки");
    if (code == 15083) return QString::fromUtf8("Хранилище учетных данных полностью заполнено");
    if (code == 15084) return QString::fromUtf8("Не удается найти учетные данные, используемые этой подпиской, в хранилище учетных данных");
    if (code == 15085) return QString::fromUtf8("Не найден активный канал для этого запроса");
    if (code == 15100) return QString::fromUtf8("Загрузчику ресурсов не удалось найти файл MUI");
    if (code == 15101) return QString::fromUtf8("Загрузчику ресурсов не удалось загрузить файл MUI, поскольку этот файл не прошел проверку правильности");
    if (code == 15102) return QString::fromUtf8("Манифест RC поврежден лишними данными или неподдерживаемой версией, или отсутствием обязательного элемента");
    if (code == 15103) return QString::fromUtf8("Манифест RC имеет неверное имя культуры");
    if (code == 15104) return QString::fromUtf8("Манифест RC имеет неверное имя окончательного возврата в исходное состояние");
    if (code == 15105) return QString::fromUtf8("Кэш загрузчика ресурсов не содержит загруженного элемента MUI");
    if (code == 15106) return QString::fromUtf8("Пользователь остановил перечисление ресурсов");
    if (code == 15107) return QString::fromUtf8("Не удалось установить язык интерфейса пользователя");
    if (code == 15108) return QString::fromUtf8("Не удалось выполнить установку языкового стандарта");
    if (code == 15200) return QString::fromUtf8("Монитор вернул строку возможностей DDC/CI, несовместимую со спецификацией ACCESS.bus 3.0, DDC/CI 1.1 или MCCS 2 редакции 1");
    if (code == 15201) return QString::fromUtf8("Код VCP (0xDF) версии VCP монитора возвратил недопустимое значение версии");
    if (code == 15202) return QString::fromUtf8("Монитор не соответствует спецификации MCCS, о поддержке которой было заявлено");
    if (code == 15203) return QString::fromUtf8("Версия MCCS в свойстве mccs_ver монитора не соответствует версии MCCS, указанной монитором при использовании кода VCP (0xDF) версии VCP");
    if (code == 15204) return QString::fromUtf8("API-интерфейс конфигурации монитора работает только с мониторами, которые поддерживают спецификацию MCCS 1.0, MCCS 2.0 или MCCS 2.0 редакции 1");
    if (code == 15205) return QString::fromUtf8("Произошла внутренняя ошибка API настройки мониторов");
    if (code == 15206) return QString::fromUtf8("Монитор вернул недопустимый тип технологии мониторов. Примеры допустимых технологий: ЭЛТ, плазменный и ЖК (с активной матрицей). Эта ошибка означает, что монитор нарушает спецификацию MCCS 2.0 или MCCS 2.0 редакции 1");
    if (code == 15207) return QString::fromUtf8("Программа, вызывающая функцию SetMonitorColorTemperature, передала ей цветовую температуру, не поддерживаемую текущим монитором. Эта ошибка означает, что монитор нарушает спецификацию MCCS 2.0 или MCCS 2.0 редакции 1");
    if (code == 15250) return QString::fromUtf8("Не удается определить запрошенное системное устройство из-за нескольких неразличимых устройств, отвечающих условиям идентификации");
    if (code == 15299) return QString::fromUtf8("Не удается найти запрошенное системное устройство");
    if (code == 15300) return QString::fromUtf8("Создание на сервере хэша указанных версии и типа запрещено");
    if (code == 15301) return QString::fromUtf8("Хэш, запрошенный с сервера, недоступен или недействителен");
    return QString("%1").arg(code);
}
